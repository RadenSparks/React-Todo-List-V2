{"ast":null,"code":"import $4stjr$intlStringsmodulejs from \"./intlStrings.mjs\";\nimport { announce as $4stjr$announce } from \"@react-aria/live-announcer\";\nimport { useLocalizedStringFormatter as $4stjr$useLocalizedStringFormatter } from \"@react-aria/i18n\";\nimport { useRef as $4stjr$useRef } from \"react\";\nimport { useUpdateEffect as $4stjr$useUpdateEffect } from \"@react-aria/utils\";\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $92599c3fd427b763$export$137e594ef3218a10(props, state) {\n  let {\n    getRowText = key => {\n      var _state_collection_getTextValue, _state_collection, _state_collection_getItem;\n      var _state_collection_getTextValue1;\n      return (_state_collection_getTextValue1 = (_state_collection_getTextValue = (_state_collection = state.collection).getTextValue) === null || _state_collection_getTextValue === void 0 ? void 0 : _state_collection_getTextValue.call(_state_collection, key)) !== null && _state_collection_getTextValue1 !== void 0 ? _state_collection_getTextValue1 : (_state_collection_getItem = state.collection.getItem(key)) === null || _state_collection_getItem === void 0 ? void 0 : _state_collection_getItem.textValue;\n    }\n  } = props;\n  let stringFormatter = (0, $4stjr$useLocalizedStringFormatter)((0, $parcel$interopDefault($4stjr$intlStringsmodulejs)), '@react-aria/grid');\n  // Many screen readers do not announce when items in a grid are selected/deselected.\n  // We do this using an ARIA live region.\n  let selection = state.selectionManager.rawSelection;\n  let lastSelection = (0, $4stjr$useRef)(selection);\n  (0, $4stjr$useUpdateEffect)(() => {\n    var _lastSelection_current;\n    if (!state.selectionManager.isFocused) {\n      lastSelection.current = selection;\n      return;\n    }\n    let addedKeys = $92599c3fd427b763$var$diffSelection(selection, lastSelection.current);\n    let removedKeys = $92599c3fd427b763$var$diffSelection(lastSelection.current, selection);\n    // If adding or removing a single row from the selection, announce the name of that item.\n    let isReplace = state.selectionManager.selectionBehavior === 'replace';\n    let messages = [];\n    if (state.selectionManager.selectedKeys.size === 1 && isReplace) {\n      if (state.collection.getItem(state.selectionManager.selectedKeys.keys().next().value)) {\n        let currentSelectionText = getRowText(state.selectionManager.selectedKeys.keys().next().value);\n        if (currentSelectionText) messages.push(stringFormatter.format('selectedItem', {\n          item: currentSelectionText\n        }));\n      }\n    } else if (addedKeys.size === 1 && removedKeys.size === 0) {\n      let addedText = getRowText(addedKeys.keys().next().value);\n      if (addedText) messages.push(stringFormatter.format('selectedItem', {\n        item: addedText\n      }));\n    } else if (removedKeys.size === 1 && addedKeys.size === 0) {\n      if (state.collection.getItem(removedKeys.keys().next().value)) {\n        let removedText = getRowText(removedKeys.keys().next().value);\n        if (removedText) messages.push(stringFormatter.format('deselectedItem', {\n          item: removedText\n        }));\n      }\n    }\n    // Announce how many items are selected, except when selecting the first item.\n    if (state.selectionManager.selectionMode === 'multiple') {\n      if (messages.length === 0 || selection === 'all' || selection.size > 1 || lastSelection.current === 'all' || ((_lastSelection_current = lastSelection.current) === null || _lastSelection_current === void 0 ? void 0 : _lastSelection_current.size) > 1) messages.push(selection === 'all' ? stringFormatter.format('selectedAll') : stringFormatter.format('selectedCount', {\n        count: selection.size\n      }));\n    }\n    if (messages.length > 0) (0, $4stjr$announce)(messages.join(' '));\n    lastSelection.current = selection;\n  }, [selection]);\n}\nfunction $92599c3fd427b763$var$diffSelection(a, b) {\n  let res = new Set();\n  if (a === 'all' || b === 'all') return res;\n  for (let key of a.keys()) if (!b.has(key)) res.add(key);\n  return res;\n}\nexport { $92599c3fd427b763$export$137e594ef3218a10 as useGridSelectionAnnouncement };","map":{"version":3,"mappings":"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","names":["$92599c3fd427b763$export$137e594ef3218a10","props","state","getRowText","key","_state_collection_getTextValue","_state_collection_getItem","_state_collection_getTextValue1","collection","getTextValue","getItem","textValue","stringFormatter","selection","selectionManager","rawSelection","lastSelection","_lastSelection_current","isFocused","current","addedKeys","$92599c3fd427b763$var$diffSelection","removedKeys","isReplace","selectionBehavior","messages","selectedKeys","size","keys","next","value","currentSelectionText","push","format","item","addedText","removedText","selectionMode","length","count","join","a","b","res","Set","has","add"],"sources":["D:\\Like, for real projects\\React-Todo-List-V2\\node_modules\\@react-aria\\grid\\dist\\packages\\@react-aria\\grid\\src\\useGridSelectionAnnouncement.ts"],"sourcesContent":["/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {announce} from '@react-aria/live-announcer';\nimport {Collection, Key, Node, Selection} from '@react-types/shared';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport {SelectionManager} from '@react-stately/selection';\nimport {useLocalizedStringFormatter} from '@react-aria/i18n';\nimport {useRef} from 'react';\nimport {useUpdateEffect} from '@react-aria/utils';\n\nexport interface GridSelectionAnnouncementProps {\n  /**\n   * A function that returns the text that should be announced by assistive technology when a row is added or removed from selection.\n   * @default (key) => state.collection.getItem(key)?.textValue\n   */\n  getRowText?: (key: Key) => string\n}\n\ninterface GridSelectionState<T> {\n  /** A collection of items in the grid. */\n  collection: Collection<Node<T>>,\n  /** A set of items that are disabled. */\n  disabledKeys: Set<Key>,\n  /** A selection manager to read and update multiple selection state. */\n  selectionManager: SelectionManager\n}\n\nexport function useGridSelectionAnnouncement<T>(props: GridSelectionAnnouncementProps, state: GridSelectionState<T>) {\n  let {\n    getRowText = (key) => state.collection.getTextValue?.(key) ?? state.collection.getItem(key)?.textValue\n  } = props;\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-aria/grid');\n\n  // Many screen readers do not announce when items in a grid are selected/deselected.\n  // We do this using an ARIA live region.\n  let selection = state.selectionManager.rawSelection;\n  let lastSelection = useRef(selection);\n  useUpdateEffect(() => {\n    if (!state.selectionManager.isFocused) {\n      lastSelection.current = selection;\n\n      return;\n    }\n\n    let addedKeys = diffSelection(selection, lastSelection.current);\n    let removedKeys = diffSelection(lastSelection.current, selection);\n\n    // If adding or removing a single row from the selection, announce the name of that item.\n    let isReplace = state.selectionManager.selectionBehavior === 'replace';\n    let messages = [];\n\n    if ((state.selectionManager.selectedKeys.size === 1 && isReplace)) {\n      if (state.collection.getItem(state.selectionManager.selectedKeys.keys().next().value)) {\n        let currentSelectionText = getRowText(state.selectionManager.selectedKeys.keys().next().value);\n        if (currentSelectionText) {\n          messages.push(stringFormatter.format('selectedItem', {item: currentSelectionText}));\n        }\n      }\n    } else if (addedKeys.size === 1 && removedKeys.size === 0) {\n      let addedText = getRowText(addedKeys.keys().next().value);\n      if (addedText) {\n        messages.push(stringFormatter.format('selectedItem', {item: addedText}));\n      }\n    } else if (removedKeys.size === 1 && addedKeys.size === 0) {\n      if (state.collection.getItem(removedKeys.keys().next().value)) {\n        let removedText = getRowText(removedKeys.keys().next().value);\n        if (removedText) {\n          messages.push(stringFormatter.format('deselectedItem', {item: removedText}));\n        }\n      }\n    }\n\n    // Announce how many items are selected, except when selecting the first item.\n    if (state.selectionManager.selectionMode === 'multiple') {\n      if (messages.length === 0 || selection === 'all' || selection.size > 1 || lastSelection.current === 'all' || lastSelection.current?.size > 1) {\n        messages.push(selection === 'all'\n          ? stringFormatter.format('selectedAll')\n          : stringFormatter.format('selectedCount', {count: selection.size})\n        );\n      }\n    }\n\n    if (messages.length > 0) {\n      announce(messages.join(' '));\n    }\n\n    lastSelection.current = selection;\n  }, [selection]);\n}\n\nfunction diffSelection(a: Selection, b: Selection): Set<Key> {\n  let res = new Set<Key>();\n  if (a === 'all' || b === 'all') {\n    return res;\n  }\n\n  for (let key of a.keys()) {\n    if (!b.has(key)) {\n      res.add(key);\n    }\n  }\n\n  return res;\n}\n"]},"metadata":{},"sourceType":"module"}