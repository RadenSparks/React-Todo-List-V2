{"ast":null,"code":"import { useLocale as $18f2051aff69b9bf$export$43bb16f9c6d9e3f7 } from \"./context.mjs\";\nimport { MessageDictionary as $eZWU1$MessageDictionary, MessageFormatter as $eZWU1$MessageFormatter } from \"@internationalized/message\";\nimport { useMemo as $eZWU1$useMemo, useCallback as $eZWU1$useCallback } from \"react\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nconst $321bc95feeb923dd$var$cache = new WeakMap();\nfunction $321bc95feeb923dd$var$getCachedDictionary(strings) {\n  let dictionary = $321bc95feeb923dd$var$cache.get(strings);\n  if (!dictionary) {\n    dictionary = new (0, $eZWU1$MessageDictionary)(strings);\n    $321bc95feeb923dd$var$cache.set(strings, dictionary);\n  }\n  return dictionary;\n}\nfunction $321bc95feeb923dd$export$ec23bf898b1eed85(strings) {\n  let {\n    locale: locale\n  } = (0, $18f2051aff69b9bf$export$43bb16f9c6d9e3f7)();\n  let dictionary = (0, $eZWU1$useMemo)(() => $321bc95feeb923dd$var$getCachedDictionary(strings), [strings]);\n  let formatter = (0, $eZWU1$useMemo)(() => new (0, $eZWU1$MessageFormatter)(locale, dictionary), [locale, dictionary]);\n  return (0, $eZWU1$useCallback)((key, variables) => formatter.format(key, variables), [formatter]);\n}\nexport { $321bc95feeb923dd$export$ec23bf898b1eed85 as useMessageFormatter };","map":{"version":3,"mappings":";;;;AAAA;;;;;;;;;;;;AAkBA,MAAMA,8BAAQ,IAAIC;AAClB,SAASC,0CAAoBC,OAAyB;EACpD,IAAIC,aAAaJ,4BAAMK,GAAG,CAACF;EAC3B,IAAI,CAACC,YAAY;IACfA,aAAa,KAAI,2BAAgB,EAAED;IACnCH,4BAAMM,GAAG,CAACH,SAASC;EACrB;EAEA,OAAOA;AACT;AAQO,SAASG,0CAAoBJ,OAAyB;EAC3D,IAAI;IAAAK,QAACA;EAAM,CAAC,GAAG,6CAAQ;EACvB,IAAIJ,aAAa,kBAAM,EAAE,MAAMF,0CAAoBC,UAAU,CAACA,QAAQ;EACtE,IAAIM,YAAY,kBAAM,EAAE,MAAM,KAAI,0BAAe,EAAED,QAAQJ,aAAa,CAACI,QAAQJ,WAAW;EAC5F,OAAO,sBAAU,EAAE,CAACM,KAAKC,cAAcF,UAAUG,MAAM,CAACF,KAAKC,YAAY,CAACF,UAAU;AACtF","names":["$321bc95feeb923dd$var$cache","WeakMap","$321bc95feeb923dd$var$getCachedDictionary","strings","dictionary","get","set","$321bc95feeb923dd$export$ec23bf898b1eed85","locale","formatter","key","variables","format"],"sources":["D:\\Like, for real projects\\React-Todo-List-V2\\node_modules\\@react-aria\\grid\\node_modules\\@react-aria\\i18n\\dist\\packages\\@react-aria\\i18n\\src\\useMessageFormatter.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {LocalizedStrings, MessageDictionary, MessageFormatter} from '@internationalized/message';\nimport {useCallback, useMemo} from 'react';\nimport {useLocale} from './context';\n\nexport type FormatMessage = (key: string, variables?: {[key: string]: any}) => string;\n\nconst cache = new WeakMap();\nfunction getCachedDictionary(strings: LocalizedStrings) {\n  let dictionary = cache.get(strings);\n  if (!dictionary) {\n    dictionary = new MessageDictionary(strings);\n    cache.set(strings, dictionary);\n  }\n\n  return dictionary;\n}\n\n/**\n * Handles formatting ICU Message strings to create localized strings for the current locale.\n * Automatically updates when the locale changes, and handles caching of messages for performance.\n * @param strings - A mapping of languages to strings by key.\n * @deprecated - use useLocalizedStringFormatter instead.\n */\nexport function useMessageFormatter(strings: LocalizedStrings): FormatMessage {\n  let {locale} = useLocale();\n  let dictionary = useMemo(() => getCachedDictionary(strings), [strings]);\n  let formatter = useMemo(() => new MessageFormatter(locale, dictionary), [locale, dictionary]);\n  return useCallback((key, variables) => formatter.format(key, variables), [formatter]);\n}\n"]},"metadata":{},"sourceType":"module"}