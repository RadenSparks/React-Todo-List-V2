{"ast":null,"code":"import { hookData as $a074e1e2d0f0a665$export$653eddfc964b0f8a, useSelectedDateDescription as $a074e1e2d0f0a665$export$b6df97c887c38e1a, useVisibleRangeDescription as $a074e1e2d0f0a665$export$31afe65d91ef6e8 } from \"./utils.mjs\";\nimport $g2t6q$intlStringsmodulejs from \"./intlStrings.mjs\";\nimport { announce as $g2t6q$announce } from \"@react-aria/live-announcer\";\nimport { filterDOMProps as $g2t6q$filterDOMProps, useUpdateEffect as $g2t6q$useUpdateEffect, useSlotId as $g2t6q$useSlotId, useLabels as $g2t6q$useLabels, mergeProps as $g2t6q$mergeProps } from \"@react-aria/utils\";\nimport { useLocalizedStringFormatter as $g2t6q$useLocalizedStringFormatter } from \"@react-aria/i18n\";\nimport { useState as $g2t6q$useState } from \"react\";\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $c4acc1de3ab169cf$export$d652b3ea2d672d5b(props, state) {\n  let stringFormatter = (0, $g2t6q$useLocalizedStringFormatter)((0, $parcel$interopDefault($g2t6q$intlStringsmodulejs)), '@react-aria/calendar');\n  let domProps = (0, $g2t6q$filterDOMProps)(props);\n  let title = (0, $a074e1e2d0f0a665$export$31afe65d91ef6e8)(state.visibleRange.start, state.visibleRange.end, state.timeZone, false);\n  let visibleRangeDescription = (0, $a074e1e2d0f0a665$export$31afe65d91ef6e8)(state.visibleRange.start, state.visibleRange.end, state.timeZone, true);\n  // Announce when the visible date range changes\n  (0, $g2t6q$useUpdateEffect)(() => {\n    // only when pressing the Previous or Next button\n    if (!state.isFocused) (0, $g2t6q$announce)(visibleRangeDescription);\n  }, [visibleRangeDescription]);\n  // Announce when the selected value changes\n  let selectedDateDescription = (0, $a074e1e2d0f0a665$export$b6df97c887c38e1a)(state);\n  (0, $g2t6q$useUpdateEffect)(() => {\n    if (selectedDateDescription) (0, $g2t6q$announce)(selectedDateDescription, 'polite', 4000);\n    // handle an update to the caption that describes the currently selected range, to announce the new value\n  }, [selectedDateDescription]);\n  let errorMessageId = (0, $g2t6q$useSlotId)([Boolean(props.errorMessage), props.isInvalid, props.validationState]);\n  // Pass the label to the child grid elements.\n  (0, $a074e1e2d0f0a665$export$653eddfc964b0f8a).set(state, {\n    ariaLabel: props['aria-label'],\n    ariaLabelledBy: props['aria-labelledby'],\n    errorMessageId: errorMessageId,\n    selectedDateDescription: selectedDateDescription\n  });\n  // If the next or previous buttons become disabled while they are focused, move focus to the calendar body.\n  let [nextFocused, setNextFocused] = (0, $g2t6q$useState)(false);\n  let nextDisabled = props.isDisabled || state.isNextVisibleRangeInvalid();\n  if (nextDisabled && nextFocused) {\n    setNextFocused(false);\n    state.setFocused(true);\n  }\n  let [previousFocused, setPreviousFocused] = (0, $g2t6q$useState)(false);\n  let previousDisabled = props.isDisabled || state.isPreviousVisibleRangeInvalid();\n  if (previousDisabled && previousFocused) {\n    setPreviousFocused(false);\n    state.setFocused(true);\n  }\n  let labelProps = (0, $g2t6q$useLabels)({\n    id: props['id'],\n    'aria-label': [props['aria-label'], visibleRangeDescription].filter(Boolean).join(', '),\n    'aria-labelledby': props['aria-labelledby']\n  });\n  return {\n    calendarProps: (0, $g2t6q$mergeProps)(domProps, labelProps, {\n      role: 'application',\n      'aria-describedby': props['aria-describedby'] || undefined\n    }),\n    nextButtonProps: {\n      onPress: () => state.focusNextPage(),\n      'aria-label': stringFormatter.format('next'),\n      isDisabled: nextDisabled,\n      onFocusChange: setNextFocused\n    },\n    prevButtonProps: {\n      onPress: () => state.focusPreviousPage(),\n      'aria-label': stringFormatter.format('previous'),\n      isDisabled: previousDisabled,\n      onFocusChange: setPreviousFocused\n    },\n    errorMessageProps: {\n      id: errorMessageId\n    },\n    title: title\n  };\n}\nexport { $c4acc1de3ab169cf$export$d652b3ea2d672d5b as useCalendarBase };","map":{"version":3,"mappings":";;;;;;;;;AAAA;;;;;;;;;;;;AAqCO,SAASA,0CAAgBC,KAAuD,EAAEC,KAAyC;EAChI,IAAIC,kBAAkB,sCAA0B,GAAE,qDAAW,GAAG;EAChE,IAAIC,WAAW,yBAAa,EAAEH;EAE9B,IAAII,QAAQ,4CAAyB,EAAEH,MAAMI,YAAY,CAACC,KAAK,EAAEL,MAAMI,YAAY,CAACE,GAAG,EAAEN,MAAMO,QAAQ,EAAE;EACzG,IAAIC,0BAA0B,4CAAyB,EAAER,MAAMI,YAAY,CAACC,KAAK,EAAEL,MAAMI,YAAY,CAACE,GAAG,EAAEN,MAAMO,QAAQ,EAAE;EAE3H;EACA,0BAAc,EAAE;IACd;IACA,IAAI,CAACP,MAAMS,SAAS,EAClB,mBAAO,EAAED;EAEb,GAAG,CAACA,wBAAwB;EAE5B;EACA,IAAIE,0BAA0B,6CAAyB,EAAEV;EACzD,0BAAc,EAAE;IACd,IAAIU,yBACF,mBAAO,EAAEA,yBAAyB,UAAU;IAE9C;EACF,GAAG,CAACA,wBAAwB;EAE5B,IAAIC,iBAAiB,oBAAQ,EAAE,CAACC,QAAQb,MAAMc,YAAY,GAAGd,MAAMe,SAAS,EAAEf,MAAMgB,eAAe,CAAC;EAEpG;EACA,6CAAO,EAAEC,GAAG,CAAChB,OAAO;IAClBiB,WAAWlB,KAAK,CAAC,aAAa;IAC9BmB,gBAAgBnB,KAAK,CAAC,kBAAkB;oBACxCY;6BACAD;EACF;EAEA;EACA,IAAI,CAACS,aAAaC,eAAe,GAAG,mBAAO,EAAE;EAC7C,IAAIC,eAAetB,MAAMuB,UAAU,IAAItB,MAAMuB,yBAAyB;EACtE,IAAIF,gBAAgBF,aAAa;IAC/BC,eAAe;IACfpB,MAAMwB,UAAU,CAAC;EACnB;EAEA,IAAI,CAACC,iBAAiBC,mBAAmB,GAAG,mBAAO,EAAE;EACrD,IAAIC,mBAAmB5B,MAAMuB,UAAU,IAAItB,MAAM4B,6BAA6B;EAC9E,IAAID,oBAAoBF,iBAAiB;IACvCC,mBAAmB;IACnB1B,MAAMwB,UAAU,CAAC;EACnB;EAEA,IAAIK,aAAa,oBAAQ,EAAE;IACzBC,IAAI/B,KAAK,CAAC,KAAK;IACf,cAAc,CAACA,KAAK,CAAC,aAAa,EAAES,wBAAwB,CAACuB,MAAM,CAACnB,SAASoB,IAAI,CAAC;IAClF,mBAAmBjC,KAAK,CAAC;EAC3B;EAEA,OAAO;IACLkC,eAAe,qBAAS,EAAE/B,UAAU2B,YAAY;MAC9CK,MAAM;MACN,oBAAoBnC,KAAK,CAAC,mBAAmB,IAAIoC;IACnD;IACAC,iBAAiB;MACfC,SAASA,MAAMrC,MAAMsC,aAAa;MAClC,cAAcrC,gBAAgBsC,MAAM,CAAC;MACrCjB,YAAYD;MACZmB,eAAepB;IACjB;IACAqB,iBAAiB;MACfJ,SAASA,MAAMrC,MAAM0C,iBAAiB;MACtC,cAAczC,gBAAgBsC,MAAM,CAAC;MACrCjB,YAAYK;MACZa,eAAed;IACjB;IACAiB,mBAAmB;MACjBb,IAAInB;IACN;WACAR;EACF;AACF","names":["$c4acc1de3ab169cf$export$d652b3ea2d672d5b","props","state","stringFormatter","domProps","title","visibleRange","start","end","timeZone","visibleRangeDescription","isFocused","selectedDateDescription","errorMessageId","Boolean","errorMessage","isInvalid","validationState","set","ariaLabel","ariaLabelledBy","nextFocused","setNextFocused","nextDisabled","isDisabled","isNextVisibleRangeInvalid","setFocused","previousFocused","setPreviousFocused","previousDisabled","isPreviousVisibleRangeInvalid","labelProps","id","filter","join","calendarProps","role","undefined","nextButtonProps","onPress","focusNextPage","format","onFocusChange","prevButtonProps","focusPreviousPage","errorMessageProps"],"sources":["D:\\Like, for real projects\\React-Todo-List-V2\\node_modules\\@react-aria\\calendar\\dist\\packages\\@react-aria\\calendar\\src\\useCalendarBase.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {announce} from '@react-aria/live-announcer';\nimport {AriaButtonProps} from '@react-types/button';\nimport {AriaLabelingProps, DOMAttributes, DOMProps} from '@react-types/shared';\nimport {CalendarPropsBase} from '@react-types/calendar';\nimport {CalendarState, RangeCalendarState} from '@react-stately/calendar';\nimport {filterDOMProps, mergeProps, useLabels, useSlotId, useUpdateEffect} from '@react-aria/utils';\nimport {hookData, useSelectedDateDescription, useVisibleRangeDescription} from './utils';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport {useLocalizedStringFormatter} from '@react-aria/i18n';\nimport {useState} from 'react';\n\nexport interface CalendarAria {\n  /** Props for the calendar grouping element. */\n  calendarProps: DOMAttributes,\n  /** Props for the next button. */\n  nextButtonProps: AriaButtonProps,\n  /** Props for the previous button. */\n  prevButtonProps: AriaButtonProps,\n  /** Props for the error message element, if any. */\n  errorMessageProps: DOMAttributes,\n  /** A description of the visible date range, for use in the calendar title. */\n  title: string\n}\n\nexport function useCalendarBase(props: CalendarPropsBase & DOMProps & AriaLabelingProps, state: CalendarState | RangeCalendarState): CalendarAria {\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-aria/calendar');\n  let domProps = filterDOMProps(props);\n\n  let title = useVisibleRangeDescription(state.visibleRange.start, state.visibleRange.end, state.timeZone, false);\n  let visibleRangeDescription = useVisibleRangeDescription(state.visibleRange.start, state.visibleRange.end, state.timeZone, true);\n\n  // Announce when the visible date range changes\n  useUpdateEffect(() => {\n    // only when pressing the Previous or Next button\n    if (!state.isFocused) {\n      announce(visibleRangeDescription);\n    }\n  }, [visibleRangeDescription]);\n\n  // Announce when the selected value changes\n  let selectedDateDescription = useSelectedDateDescription(state);\n  useUpdateEffect(() => {\n    if (selectedDateDescription) {\n      announce(selectedDateDescription, 'polite', 4000);\n    }\n    // handle an update to the caption that describes the currently selected range, to announce the new value\n  }, [selectedDateDescription]);\n\n  let errorMessageId = useSlotId([Boolean(props.errorMessage), props.isInvalid, props.validationState]);\n\n  // Pass the label to the child grid elements.\n  hookData.set(state, {\n    ariaLabel: props['aria-label'],\n    ariaLabelledBy: props['aria-labelledby'],\n    errorMessageId,\n    selectedDateDescription\n  });\n\n  // If the next or previous buttons become disabled while they are focused, move focus to the calendar body.\n  let [nextFocused, setNextFocused] = useState(false);\n  let nextDisabled = props.isDisabled || state.isNextVisibleRangeInvalid();\n  if (nextDisabled && nextFocused) {\n    setNextFocused(false);\n    state.setFocused(true);\n  }\n\n  let [previousFocused, setPreviousFocused] = useState(false);\n  let previousDisabled = props.isDisabled || state.isPreviousVisibleRangeInvalid();\n  if (previousDisabled && previousFocused) {\n    setPreviousFocused(false);\n    state.setFocused(true);\n  }\n\n  let labelProps = useLabels({\n    id: props['id'],\n    'aria-label': [props['aria-label'], visibleRangeDescription].filter(Boolean).join(', '),\n    'aria-labelledby': props['aria-labelledby']\n  });\n\n  return {\n    calendarProps: mergeProps(domProps, labelProps, {\n      role: 'application',\n      'aria-describedby': props['aria-describedby'] || undefined\n    }),\n    nextButtonProps: {\n      onPress: () => state.focusNextPage(),\n      'aria-label': stringFormatter.format('next'),\n      isDisabled: nextDisabled,\n      onFocusChange: setNextFocused\n    },\n    prevButtonProps: {\n      onPress: () => state.focusPreviousPage(),\n      'aria-label': stringFormatter.format('previous'),\n      isDisabled: previousDisabled,\n      onFocusChange: setPreviousFocused\n    },\n    errorMessageProps: {\n      id: errorMessageId\n    },\n    title\n  };\n}\n"]},"metadata":{},"sourceType":"module"}