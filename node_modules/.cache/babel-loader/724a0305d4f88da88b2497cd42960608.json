{"ast":null,"code":"import { startOfYear as $k1D4u$startOfYear, startOfMonth as $k1D4u$startOfMonth, startOfWeek as $k1D4u$startOfWeek, maxDate as $k1D4u$maxDate, toCalendarDate as $k1D4u$toCalendarDate, minDate as $k1D4u$minDate } from \"@internationalized/date\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nfunction $f62d864046160412$export$eac50920cf2fd59a(date, minValue, maxValue) {\n  return minValue != null && date.compare(minValue) < 0 || maxValue != null && date.compare(maxValue) > 0;\n}\nfunction $f62d864046160412$export$f4a51ff076cc9a09(date, duration, locale, minValue, maxValue) {\n  let halfDuration = {};\n  for (let key in duration) {\n    halfDuration[key] = Math.floor(duration[key] / 2);\n    if (halfDuration[key] > 0 && duration[key] % 2 === 0) halfDuration[key]--;\n  }\n  let aligned = $f62d864046160412$export$144a00ba6044eb9(date, duration, locale).subtract(halfDuration);\n  return $f62d864046160412$export$5bb865b12696a77d(date, aligned, duration, locale, minValue, maxValue);\n}\nfunction $f62d864046160412$export$144a00ba6044eb9(date, duration, locale, minValue, maxValue) {\n  // align to the start of the largest unit\n  let aligned = date;\n  if (duration.years) aligned = (0, $k1D4u$startOfYear)(date);else if (duration.months) aligned = (0, $k1D4u$startOfMonth)(date);else if (duration.weeks) aligned = (0, $k1D4u$startOfWeek)(date, locale);\n  return $f62d864046160412$export$5bb865b12696a77d(date, aligned, duration, locale, minValue, maxValue);\n}\nfunction $f62d864046160412$export$530edbfc915b2b04(date, duration, locale, minValue, maxValue) {\n  let d = {\n    ...duration\n  };\n  // subtract 1 from the smallest unit\n  if (duration.days) d.days--;else if (duration.weeks) d.weeks--;else if (duration.months) d.months--;else if (duration.years) d.years--;\n  let aligned = $f62d864046160412$export$144a00ba6044eb9(date, duration, locale).subtract(d);\n  return $f62d864046160412$export$5bb865b12696a77d(date, aligned, duration, locale, minValue, maxValue);\n}\nfunction $f62d864046160412$export$5bb865b12696a77d(date, aligned, duration, locale, minValue, maxValue) {\n  if (minValue && date.compare(minValue) >= 0) aligned = (0, $k1D4u$maxDate)(aligned, $f62d864046160412$export$144a00ba6044eb9((0, $k1D4u$toCalendarDate)(minValue), duration, locale));\n  if (maxValue && date.compare(maxValue) <= 0) aligned = (0, $k1D4u$minDate)(aligned, $f62d864046160412$export$530edbfc915b2b04((0, $k1D4u$toCalendarDate)(maxValue), duration, locale));\n  return aligned;\n}\nfunction $f62d864046160412$export$4f5203c0d889109e(date, minValue, maxValue) {\n  if (minValue) date = (0, $k1D4u$maxDate)(date, (0, $k1D4u$toCalendarDate)(minValue));\n  if (maxValue) date = (0, $k1D4u$minDate)(date, (0, $k1D4u$toCalendarDate)(maxValue));\n  return date;\n}\nfunction $f62d864046160412$export$a1d3911297b952d7(date, minValue, isDateUnavailable) {\n  if (!isDateUnavailable) return date;\n  while (date.compare(minValue) >= 0 && isDateUnavailable(date)) date = date.subtract({\n    days: 1\n  });\n  if (date.compare(minValue) >= 0) return date;\n}\nexport { $f62d864046160412$export$eac50920cf2fd59a as isInvalid, $f62d864046160412$export$f4a51ff076cc9a09 as alignCenter, $f62d864046160412$export$144a00ba6044eb9 as alignStart, $f62d864046160412$export$5bb865b12696a77d as constrainStart, $f62d864046160412$export$530edbfc915b2b04 as alignEnd, $f62d864046160412$export$4f5203c0d889109e as constrainValue, $f62d864046160412$export$a1d3911297b952d7 as previousAvailableDate };","map":{"version":3,"mappings":";;AAAA;;;;;;;;;;;AAuBO,SAASA,0CAAUC,IAAe,EAAEC,QAAmB,EAAEC,QAAmB;EACjF,OAAOD,QAAC,IAAY,QAAQD,KAAKG,OAAO,CAACF,YAAY,KAClDC,YAAY,QAAQF,KAAKG,OAAO,CAACD,YAAY;AAClD;AAEO,SAASE,0CAAYJ,IAAkB,EAAEK,QAAsB,EAAEC,MAAc,EAAEL,QAAoB,EAAEC,QAAoB;EAChI,IAAIK,eAA6B,CAAC;EAClC,KAAK,IAAIC,OAAOH,UAAU;IACxBE,YAAY,CAACC,IAAI,GAAGC,KAAKC,KAAK,CAACL,QAAQ,CAACG,IAAI,GAAG;IAC/C,IAAID,YAAY,CAACC,IAAI,GAAG,KAAKH,QAAQ,CAACG,IAAI,GAAG,MAAM,GACjDD,YAAY,CAACC,IAAI;EAErB;EAEA,IAAIG,UAAUC,yCAAWZ,MAAMK,UAAUC,QAAQO,QAAQ,CAACN;EAC1D,OAAOO,0CAAed,MAAMW,SAASN,UAAUC,QAAQL,UAAUC;AACnE;AAEO,SAASU,yCAAWZ,IAAkB,EAAEK,QAAsB,EAAEC,MAAc,EAAEL,QAAoB,EAAEC,QAAoB;EAC/H;EACA,IAAIS,UAAUX;EACd,IAAIK,SAASU,KAAK,EAChBJ,UAAU,sBAAU,EAAEX,WACjB,IAAIK,SAASW,MAAM,EACxBL,UAAU,uBAAW,EAAEX,WAClB,IAAIK,SAASY,KAAK,EACvBN,UAAU,sBAAU,EAAEX,MAAMM;EAG9B,OAAOQ,0CAAed,MAAMW,SAASN,UAAUC,QAAQL,UAAUC;AACnE;AAEO,SAASgB,0CAASlB,IAAkB,EAAEK,QAAsB,EAAEC,MAAc,EAAEL,QAAoB,EAAEC,QAAoB;EAC7H,IAAIiB,IAAI;IAAC,GAAGd;EAAQ;EACpB;EACA,IAAIA,SAASe,IAAI,EACfD,EAAEC,IAAI,QACD,IAAIf,SAASY,KAAK,EACvBE,EAAEF,KAAK,QACF,IAAIZ,SAASW,MAAM,EACxBG,EAAEH,MAAM,QACH,IAAIX,SAASU,KAAK,EACvBI,EAAEJ,KAAK;EAGT,IAAIJ,UAAUC,yCAAWZ,MAAMK,UAAUC,QAAQO,QAAQ,CAACM;EAC1D,OAAOL,0CAAed,MAAMW,SAASN,UAAUC,QAAQL,UAAUC;AACnE;AAEO,SAASY,0CACdd,IAAkB,EAClBW,OAAqB,EACrBN,QAAsB,EACtBC,MAAc,EACdL,QAAmB,EACnBC,QAAmB;EACnB,IAAID,YAAYD,KAAKG,OAAO,CAACF,aAAa,GACxCU,UAAU,kBAAM,EACdA,SACAC,yCAAW,yBAAa,EAAEX,WAAWI,UAAUC;EAInD,IAAIJ,YAAYF,KAAKG,OAAO,CAACD,aAAa,GACxCS,UAAU,kBAAM,EACdA,SACAO,0CAAS,yBAAa,EAAEhB,WAAWG,UAAUC;EAIjD,OAAOK;AACT;AAEO,SAASU,0CAAerB,IAAkB,EAAEC,QAAmB,EAAEC,QAAmB;EACzF,IAAID,UACFD,OAAO,kBAAM,EAAEA,MAAM,yBAAa,EAAEC;EAGtC,IAAIC,UACFF,OAAO,kBAAM,EAAEA,MAAM,yBAAa,EAAEE;EAGtC,OAAOF;AACT;AAEO,SAASsB,0CAAsBtB,IAAkB,EAAEC,QAAmB,EAAEsB,iBAAkD;EAC/H,IAAI,CAACA,mBACH,OAAOvB;EAGT,OAAOA,KAAKG,OAAO,CAACF,aAAa,KAAKsB,kBAAkBvB,OACtDA,OAAOA,KAAKa,QAAQ,CAAC;IAACO,MAAM;EAAC;EAG/B,IAAIpB,KAAKG,OAAO,CAACF,aAAa,GAC5B,OAAOD;AAEX","names":["$f62d864046160412$export$eac50920cf2fd59a","date","minValue","maxValue","compare","$f62d864046160412$export$f4a51ff076cc9a09","duration","locale","halfDuration","key","Math","floor","aligned","$f62d864046160412$export$144a00ba6044eb9","subtract","$f62d864046160412$export$5bb865b12696a77d","years","months","weeks","$f62d864046160412$export$530edbfc915b2b04","d","days","$f62d864046160412$export$4f5203c0d889109e","$f62d864046160412$export$a1d3911297b952d7","isDateUnavailable"],"sources":["D:\\Like, for real projects\\React-Todo-List-V2\\node_modules\\@react-stately\\calendar\\dist\\packages\\@react-stately\\calendar\\src\\utils.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nimport {\n  CalendarDate,\n  DateDuration,\n  maxDate,\n  minDate,\n  startOfMonth,\n  startOfWeek,\n  startOfYear,\n  toCalendarDate\n} from '@internationalized/date';\nimport {DateValue} from '@react-types/calendar';\n\nexport function isInvalid(date: DateValue, minValue: DateValue, maxValue: DateValue) {\n  return (minValue != null && date.compare(minValue) < 0) ||\n    (maxValue != null && date.compare(maxValue) > 0);\n}\n\nexport function alignCenter(date: CalendarDate, duration: DateDuration, locale: string, minValue?: DateValue, maxValue?: DateValue) {\n  let halfDuration: DateDuration = {};\n  for (let key in duration) {\n    halfDuration[key] = Math.floor(duration[key] / 2);\n    if (halfDuration[key] > 0 && duration[key] % 2 === 0) {\n      halfDuration[key]--;\n    }\n  }\n\n  let aligned = alignStart(date, duration, locale).subtract(halfDuration);\n  return constrainStart(date, aligned, duration, locale, minValue, maxValue);\n}\n\nexport function alignStart(date: CalendarDate, duration: DateDuration, locale: string, minValue?: DateValue, maxValue?: DateValue) {\n  // align to the start of the largest unit\n  let aligned = date;\n  if (duration.years) {\n    aligned = startOfYear(date);\n  } else if (duration.months) {\n    aligned = startOfMonth(date);\n  } else if (duration.weeks) {\n    aligned = startOfWeek(date, locale);\n  }\n\n  return constrainStart(date, aligned, duration, locale, minValue, maxValue);\n}\n\nexport function alignEnd(date: CalendarDate, duration: DateDuration, locale: string, minValue?: DateValue, maxValue?: DateValue) {\n  let d = {...duration};\n  // subtract 1 from the smallest unit\n  if (duration.days) {\n    d.days--;\n  } else if (duration.weeks) {\n    d.weeks--;\n  } else if (duration.months) {\n    d.months--;\n  } else if (duration.years) {\n    d.years--;\n  }\n\n  let aligned = alignStart(date, duration, locale).subtract(d);\n  return constrainStart(date, aligned, duration, locale, minValue, maxValue);\n}\n\nexport function constrainStart(\n  date: CalendarDate,\n  aligned: CalendarDate,\n  duration: DateDuration,\n  locale: string,\n  minValue: DateValue,\n  maxValue: DateValue) {\n  if (minValue && date.compare(minValue) >= 0) {\n    aligned = maxDate(\n      aligned,\n      alignStart(toCalendarDate(minValue), duration, locale)\n    );\n  }\n\n  if (maxValue && date.compare(maxValue) <= 0) {\n    aligned = minDate(\n      aligned,\n      alignEnd(toCalendarDate(maxValue), duration, locale)\n    );\n  }\n\n  return aligned;\n}\n\nexport function constrainValue(date: CalendarDate, minValue: DateValue, maxValue: DateValue) {\n  if (minValue) {\n    date = maxDate(date, toCalendarDate(minValue));\n  }\n\n  if (maxValue) {\n    date = minDate(date, toCalendarDate(maxValue));\n  }\n\n  return date;\n}\n\nexport function previousAvailableDate(date: CalendarDate, minValue: DateValue, isDateUnavailable: (date: CalendarDate) => boolean) {\n  if (!isDateUnavailable) {\n    return date;\n  }\n\n  while (date.compare(minValue) >= 0 && isDateUnavailable(date)) {\n    date = date.subtract({days: 1});\n  }\n\n  if (date.compare(minValue) >= 0) {\n    return date;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}