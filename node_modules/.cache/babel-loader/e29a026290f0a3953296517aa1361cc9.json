{"ast":null,"code":"import { getFormatOptions as $35a22f14a1f04b11$export$7e319ea407e63bc0, getPlaceholderTime as $35a22f14a1f04b11$export$c5221a78ef73c5e9, getValidationResult as $35a22f14a1f04b11$export$f18627323ab57ac0, useDefaultProps as $35a22f14a1f04b11$export$2440da353cedad43 } from \"./utils.mjs\";\nimport { toCalendarDate as $goopS$toCalendarDate, toCalendarDateTime as $goopS$toCalendarDateTime, DateFormatter as $goopS$DateFormatter } from \"@internationalized/date\";\nimport { useFormValidationState as $goopS$useFormValidationState } from \"@react-stately/form\";\nimport { useOverlayTriggerState as $goopS$useOverlayTriggerState } from \"@react-stately/overlays\";\nimport { useControlledState as $goopS$useControlledState } from \"@react-stately/utils\";\nimport { useState as $goopS$useState, useMemo as $goopS$useMemo } from \"react\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $ab5bf3f618090389$export$87194bb378cc3ac2(props) {\n  let overlayState = (0, $goopS$useOverlayTriggerState)(props);\n  let [value, setValue] = (0, $goopS$useControlledState)(props.value, props.defaultValue || null, props.onChange);\n  let v = value || props.placeholderValue;\n  let [granularity, defaultTimeZone] = (0, $35a22f14a1f04b11$export$2440da353cedad43)(v, props.granularity);\n  let dateValue = value != null ? value.toDate(defaultTimeZone !== null && defaultTimeZone !== void 0 ? defaultTimeZone : 'UTC') : null;\n  let hasTime = granularity === 'hour' || granularity === 'minute' || granularity === 'second';\n  var _props_shouldCloseOnSelect;\n  let shouldCloseOnSelect = (_props_shouldCloseOnSelect = props.shouldCloseOnSelect) !== null && _props_shouldCloseOnSelect !== void 0 ? _props_shouldCloseOnSelect : true;\n  let [selectedDate, setSelectedDate] = (0, $goopS$useState)(null);\n  let [selectedTime, setSelectedTime] = (0, $goopS$useState)(null);\n  if (value) {\n    selectedDate = value;\n    if ('hour' in value) selectedTime = value;\n  }\n  // props.granularity must actually exist in the value if one is provided.\n  if (v && !(granularity in v)) throw new Error('Invalid granularity ' + granularity + ' for value ' + v.toString());\n  let showEra = (value === null || value === void 0 ? void 0 : value.calendar.identifier) === 'gregory' && value.era === 'BC';\n  let formatOpts = (0, $goopS$useMemo)(() => ({\n    granularity: granularity,\n    timeZone: defaultTimeZone,\n    hideTimeZone: props.hideTimeZone,\n    hourCycle: props.hourCycle,\n    shouldForceLeadingZeros: props.shouldForceLeadingZeros,\n    showEra: showEra\n  }), [granularity, props.hourCycle, props.shouldForceLeadingZeros, defaultTimeZone, props.hideTimeZone, showEra]);\n  let {\n    minValue: minValue,\n    maxValue: maxValue,\n    isDateUnavailable: isDateUnavailable\n  } = props;\n  let builtinValidation = (0, $goopS$useMemo)(() => (0, $35a22f14a1f04b11$export$f18627323ab57ac0)(value, minValue, maxValue, isDateUnavailable, formatOpts), [value, minValue, maxValue, isDateUnavailable, formatOpts]);\n  let validation = (0, $goopS$useFormValidationState)({\n    ...props,\n    value: value,\n    builtinValidation: builtinValidation\n  });\n  let isValueInvalid = validation.displayValidation.isInvalid;\n  let validationState = props.validationState || (isValueInvalid ? 'invalid' : null);\n  let commitValue = (date, time) => {\n    setValue('timeZone' in time ? time.set((0, $goopS$toCalendarDate)(date)) : (0, $goopS$toCalendarDateTime)(date, time));\n    setSelectedDate(null);\n    setSelectedTime(null);\n    validation.commitValidation();\n  };\n  // Intercept setValue to make sure the Time section is not changed by date selection in Calendar\n  let selectDate = newValue => {\n    let shouldClose = typeof shouldCloseOnSelect === 'function' ? shouldCloseOnSelect() : shouldCloseOnSelect;\n    if (hasTime) {\n      if (selectedTime || shouldClose) commitValue(newValue, selectedTime || (0, $35a22f14a1f04b11$export$c5221a78ef73c5e9)(props.placeholderValue));else setSelectedDate(newValue);\n    } else {\n      setValue(newValue);\n      validation.commitValidation();\n    }\n    if (shouldClose) overlayState.setOpen(false);\n  };\n  let selectTime = newValue => {\n    if (selectedDate && newValue) commitValue(selectedDate, newValue);else setSelectedTime(newValue);\n  };\n  return {\n    ...validation,\n    value: value,\n    setValue: setValue,\n    dateValue: selectedDate,\n    timeValue: selectedTime,\n    setDateValue: selectDate,\n    setTimeValue: selectTime,\n    granularity: granularity,\n    hasTime: hasTime,\n    ...overlayState,\n    setOpen(isOpen) {\n      // Commit the selected date when the calendar is closed. Use a placeholder time if one wasn't set.\n      // If only the time was set and not the date, don't commit. The state will be preserved until\n      // the user opens the popover again.\n      if (!isOpen && !value && selectedDate && hasTime) commitValue(selectedDate, selectedTime || (0, $35a22f14a1f04b11$export$c5221a78ef73c5e9)(props.placeholderValue));\n      overlayState.setOpen(isOpen);\n    },\n    validationState: validationState,\n    isInvalid: isValueInvalid,\n    formatValue(locale, fieldOptions) {\n      if (!dateValue) return '';\n      let formatOptions = (0, $35a22f14a1f04b11$export$7e319ea407e63bc0)(fieldOptions, formatOpts);\n      let formatter = new (0, $goopS$DateFormatter)(locale, formatOptions);\n      return formatter.format(dateValue);\n    }\n  };\n}\nexport { $ab5bf3f618090389$export$87194bb378cc3ac2 as useDatePickerState };","map":{"version":3,"mappings":"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","names":["$ab5bf3f618090389$export$87194bb378cc3ac2","props","overlayState","value","setValue","defaultValue","onChange","v","placeholderValue","granularity","defaultTimeZone","dateValue","toDate","hasTime","_props_shouldCloseOnSelect","shouldCloseOnSelect","selectedDate","setSelectedDate","selectedTime","setSelectedTime","Error","toString","showEra","calendar","identifier","era","formatOpts","timeZone","hideTimeZone","hourCycle","shouldForceLeadingZeros","minValue","maxValue","isDateUnavailable","builtinValidation","validation","isValueInvalid","displayValidation","isInvalid","validationState","commitValue","date","time","set","commitValidation","selectDate","newValue","shouldClose","setOpen","selectTime","timeValue","setDateValue","setTimeValue","isOpen","formatValue","locale","fieldOptions","formatOptions","formatter","format"],"sources":["D:\\Like, for real projects\\React-Todo-List-V2\\node_modules\\@react-stately\\datepicker\\dist\\packages\\@react-stately\\datepicker\\src\\useDatePickerState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CalendarDate, DateFormatter, toCalendarDate, toCalendarDateTime} from '@internationalized/date';\nimport {DatePickerProps, DateValue, Granularity, TimeValue} from '@react-types/datepicker';\nimport {FieldOptions, getFormatOptions, getPlaceholderTime, getValidationResult, useDefaultProps} from './utils';\nimport {FormValidationState, useFormValidationState} from '@react-stately/form';\nimport {OverlayTriggerState, useOverlayTriggerState} from '@react-stately/overlays';\nimport {useControlledState} from '@react-stately/utils';\nimport {useMemo, useState} from 'react';\nimport {ValidationState} from '@react-types/shared';\n\nexport interface DatePickerStateOptions<T extends DateValue> extends DatePickerProps<T> {\n  /**\n   * Determines whether the date picker popover should close automatically when a date is selected.\n   * @default true\n   */\n  shouldCloseOnSelect?: boolean | (() => boolean)\n}\n\nexport interface DatePickerState extends OverlayTriggerState, FormValidationState {\n  /** The currently selected date. */\n  value: DateValue | null,\n  /** Sets the selected date. */\n  setValue(value: DateValue | null): void,\n  /**\n   * The date portion of the value. This may be set prior to `value` if the user has\n   * selected a date but has not yet selected a time.\n   */\n  dateValue: DateValue,\n  /** Sets the date portion of the value. */\n  setDateValue(value: CalendarDate): void,\n  /**\n   * The time portion of the value. This may be set prior to `value` if the user has\n   * selected a time but has not yet selected a date.\n   */\n  timeValue: TimeValue,\n  /** Sets the time portion of the value. */\n  setTimeValue(value: TimeValue): void,\n  /** The granularity for the field, based on the `granularity` prop and current value. */\n  granularity: Granularity,\n  /** Whether the date picker supports selecting a time, according to the `granularity` prop and current value. */\n  hasTime: boolean,\n  /** Whether the calendar popover is currently open. */\n  isOpen: boolean,\n  /** Sets whether the calendar popover is open. */\n  setOpen(isOpen: boolean): void,\n  /**\n   * The current validation state of the date picker, based on the `validationState`, `minValue`, and `maxValue` props.\n   * @deprecated Use `isInvalid` instead.\n   */\n  validationState: ValidationState,\n  /** Whether the date picker is invalid, based on the `isInvalid`, `minValue`, and `maxValue` props. */\n  isInvalid: boolean,\n  /** Formats the selected value using the given options. */\n  formatValue(locale: string, fieldOptions: FieldOptions): string\n}\n\n/**\n * Provides state management for a date picker component.\n * A date picker combines a DateField and a Calendar popover to allow users to enter or select a date and time value.\n */\nexport function useDatePickerState<T extends DateValue = DateValue>(props: DatePickerStateOptions<T>): DatePickerState {\n  let overlayState = useOverlayTriggerState(props);\n  let [value, setValue] = useControlledState<DateValue>(props.value, props.defaultValue || null, props.onChange);\n\n  let v = (value || props.placeholderValue);\n  let [granularity, defaultTimeZone] = useDefaultProps(v, props.granularity);\n  let dateValue = value != null ? value.toDate(defaultTimeZone ?? 'UTC') : null;\n  let hasTime = granularity === 'hour' || granularity === 'minute' || granularity === 'second';\n  let shouldCloseOnSelect = props.shouldCloseOnSelect ?? true;\n\n  let [selectedDate, setSelectedDate] = useState<DateValue>(null);\n  let [selectedTime, setSelectedTime] = useState<TimeValue>(null);\n\n  if (value) {\n    selectedDate = value;\n    if ('hour' in value) {\n      selectedTime = value;\n    }\n  }\n\n  // props.granularity must actually exist in the value if one is provided.\n  if (v && !(granularity in v)) {\n    throw new Error('Invalid granularity ' + granularity + ' for value ' + v.toString());\n  }\n\n  let showEra = value?.calendar.identifier === 'gregory' && value.era === 'BC';\n  let formatOpts = useMemo(() => ({\n    granularity,\n    timeZone: defaultTimeZone,\n    hideTimeZone: props.hideTimeZone,\n    hourCycle: props.hourCycle,\n    shouldForceLeadingZeros: props.shouldForceLeadingZeros,\n    showEra\n  }), [granularity, props.hourCycle, props.shouldForceLeadingZeros, defaultTimeZone, props.hideTimeZone, showEra]);\n\n  let {minValue, maxValue, isDateUnavailable} = props;\n  let builtinValidation = useMemo(() => getValidationResult(\n    value,\n    minValue,\n    maxValue,\n    isDateUnavailable,\n    formatOpts\n  ), [value, minValue, maxValue, isDateUnavailable, formatOpts]);\n\n  let validation = useFormValidationState({\n    ...props,\n    value,\n    builtinValidation\n  });\n\n  let isValueInvalid = validation.displayValidation.isInvalid;\n  let validationState: ValidationState = props.validationState || (isValueInvalid ? 'invalid' : null);\n\n  let commitValue = (date: DateValue, time: TimeValue) => {\n    setValue('timeZone' in time ? time.set(toCalendarDate(date)) : toCalendarDateTime(date, time));\n    setSelectedDate(null);\n    setSelectedTime(null);\n    validation.commitValidation();\n  };\n\n  // Intercept setValue to make sure the Time section is not changed by date selection in Calendar\n  let selectDate = (newValue: CalendarDate) => {\n    let shouldClose = typeof shouldCloseOnSelect === 'function' ? shouldCloseOnSelect() : shouldCloseOnSelect;\n    if (hasTime) {\n      if (selectedTime || shouldClose) {\n        commitValue(newValue, selectedTime || getPlaceholderTime(props.placeholderValue));\n      } else {\n        setSelectedDate(newValue);\n      }\n    } else {\n      setValue(newValue);\n      validation.commitValidation();\n    }\n\n    if (shouldClose) {\n      overlayState.setOpen(false);\n    }\n  };\n\n  let selectTime = (newValue: TimeValue) => {\n    if (selectedDate && newValue) {\n      commitValue(selectedDate, newValue);\n    } else {\n      setSelectedTime(newValue);\n    }\n  };\n\n  return {\n    ...validation,\n    value,\n    setValue,\n    dateValue: selectedDate,\n    timeValue: selectedTime,\n    setDateValue: selectDate,\n    setTimeValue: selectTime,\n    granularity,\n    hasTime,\n    ...overlayState,\n    setOpen(isOpen) {\n      // Commit the selected date when the calendar is closed. Use a placeholder time if one wasn't set.\n      // If only the time was set and not the date, don't commit. The state will be preserved until\n      // the user opens the popover again.\n      if (!isOpen && !value && selectedDate && hasTime) {\n        commitValue(selectedDate, selectedTime || getPlaceholderTime(props.placeholderValue));\n      }\n\n      overlayState.setOpen(isOpen);\n    },\n    validationState,\n    isInvalid: isValueInvalid,\n    formatValue(locale, fieldOptions) {\n      if (!dateValue) {\n        return '';\n      }\n\n      let formatOptions = getFormatOptions(fieldOptions, formatOpts);\n      let formatter = new DateFormatter(locale, formatOptions);\n      return formatter.format(dateValue);\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}