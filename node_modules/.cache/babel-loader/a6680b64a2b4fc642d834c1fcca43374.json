{"ast":null,"code":"import { convertValue as $35a22f14a1f04b11$export$61a490a80c552550, createPlaceholderDate as $35a22f14a1f04b11$export$66aa2b09de4b1ea5, getFormatOptions as $35a22f14a1f04b11$export$7e319ea407e63bc0, getValidationResult as $35a22f14a1f04b11$export$f18627323ab57ac0, useDefaultProps as $35a22f14a1f04b11$export$2440da353cedad43 } from \"./utils.mjs\";\nimport { getPlaceholder as $3e3ed55ab2966714$export$d3f5c5e0a5023fa0 } from \"./placeholders.mjs\";\nimport { DateFormatter as $g03ag$DateFormatter, toCalendar as $g03ag$toCalendar, GregorianCalendar as $g03ag$GregorianCalendar, getMinimumMonthInYear as $g03ag$getMinimumMonthInYear, getMinimumDayInMonth as $g03ag$getMinimumDayInMonth } from \"@internationalized/date\";\nimport { useFormValidationState as $g03ag$useFormValidationState } from \"@react-stately/form\";\nimport { useControlledState as $g03ag$useControlledState } from \"@react-stately/utils\";\nimport { useMemo as $g03ag$useMemo, useState as $g03ag$useState, useRef as $g03ag$useRef, useEffect as $g03ag$useEffect } from \"react\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nconst $3c0fc76039f1c516$var$EDITABLE_SEGMENTS = {\n  year: true,\n  month: true,\n  day: true,\n  hour: true,\n  minute: true,\n  second: true,\n  dayPeriod: true,\n  era: true\n};\nconst $3c0fc76039f1c516$var$PAGE_STEP = {\n  year: 5,\n  month: 2,\n  day: 7,\n  hour: 2,\n  minute: 15,\n  second: 15\n};\n// Node seems to convert everything to lowercase...\nconst $3c0fc76039f1c516$var$TYPE_MAPPING = {\n  dayperiod: 'dayPeriod'\n};\nfunction $3c0fc76039f1c516$export$60e84778edff6d26(props) {\n  let {\n    locale: locale,\n    createCalendar: createCalendar,\n    hideTimeZone: hideTimeZone,\n    isDisabled: isDisabled,\n    isReadOnly: isReadOnly,\n    isRequired: isRequired,\n    minValue: minValue,\n    maxValue: maxValue,\n    isDateUnavailable: isDateUnavailable\n  } = props;\n  let v = props.value || props.defaultValue || props.placeholderValue;\n  let [granularity, defaultTimeZone] = (0, $35a22f14a1f04b11$export$2440da353cedad43)(v, props.granularity);\n  let timeZone = defaultTimeZone || 'UTC';\n  // props.granularity must actually exist in the value if one is provided.\n  if (v && !(granularity in v)) throw new Error('Invalid granularity ' + granularity + ' for value ' + v.toString());\n  let defaultFormatter = (0, $g03ag$useMemo)(() => new (0, $g03ag$DateFormatter)(locale), [locale]);\n  let calendar = (0, $g03ag$useMemo)(() => createCalendar(defaultFormatter.resolvedOptions().calendar), [createCalendar, defaultFormatter]);\n  let [value, setDate] = (0, $g03ag$useControlledState)(props.value, props.defaultValue, props.onChange);\n  let calendarValue = (0, $g03ag$useMemo)(() => (0, $35a22f14a1f04b11$export$61a490a80c552550)(value, calendar), [value, calendar]);\n  // We keep track of the placeholder date separately in state so that onChange is not called\n  // until all segments are set. If the value === null (not undefined), then assume the component\n  // is controlled, so use the placeholder as the value until all segments are entered so it doesn't\n  // change from uncontrolled to controlled and emit a warning.\n  let [placeholderDate, setPlaceholderDate] = (0, $g03ag$useState)(() => (0, $35a22f14a1f04b11$export$66aa2b09de4b1ea5)(props.placeholderValue, granularity, calendar, defaultTimeZone));\n  let val = calendarValue || placeholderDate;\n  let showEra = calendar.identifier === 'gregory' && val.era === 'BC';\n  let formatOpts = (0, $g03ag$useMemo)(() => {\n    var _props_maxGranularity;\n    return {\n      granularity: granularity,\n      maxGranularity: (_props_maxGranularity = props.maxGranularity) !== null && _props_maxGranularity !== void 0 ? _props_maxGranularity : 'year',\n      timeZone: defaultTimeZone,\n      hideTimeZone: hideTimeZone,\n      hourCycle: props.hourCycle,\n      showEra: showEra,\n      shouldForceLeadingZeros: props.shouldForceLeadingZeros\n    };\n  }, [props.maxGranularity, granularity, props.hourCycle, props.shouldForceLeadingZeros, defaultTimeZone, hideTimeZone, showEra]);\n  let opts = (0, $g03ag$useMemo)(() => (0, $35a22f14a1f04b11$export$7e319ea407e63bc0)({}, formatOpts), [formatOpts]);\n  let dateFormatter = (0, $g03ag$useMemo)(() => new (0, $g03ag$DateFormatter)(locale, opts), [locale, opts]);\n  let resolvedOptions = (0, $g03ag$useMemo)(() => dateFormatter.resolvedOptions(), [dateFormatter]);\n  // Determine how many editable segments there are for validation purposes.\n  // The result is cached for performance.\n  let allSegments = (0, $g03ag$useMemo)(() => dateFormatter.formatToParts(new Date()).filter(seg => $3c0fc76039f1c516$var$EDITABLE_SEGMENTS[seg.type]).reduce((p, seg) => (p[seg.type] = true, p), {}), [dateFormatter]);\n  let [validSegments, setValidSegments] = (0, $g03ag$useState)(() => props.value || props.defaultValue ? {\n    ...allSegments\n  } : {});\n  let clearedSegment = (0, $g03ag$useRef)();\n  // Reset placeholder when calendar changes\n  let lastCalendarIdentifier = (0, $g03ag$useRef)(calendar.identifier);\n  (0, $g03ag$useEffect)(() => {\n    if (calendar.identifier !== lastCalendarIdentifier.current) {\n      lastCalendarIdentifier.current = calendar.identifier;\n      setPlaceholderDate(placeholder => Object.keys(validSegments).length > 0 ? (0, $g03ag$toCalendar)(placeholder, calendar) : (0, $35a22f14a1f04b11$export$66aa2b09de4b1ea5)(props.placeholderValue, granularity, calendar, defaultTimeZone));\n    }\n  }, [calendar, granularity, validSegments, defaultTimeZone, props.placeholderValue]);\n  // If there is a value prop, and some segments were previously placeholders, mark them all as valid.\n  if (value && Object.keys(validSegments).length < Object.keys(allSegments).length) {\n    validSegments = {\n      ...allSegments\n    };\n    setValidSegments(validSegments);\n  }\n  // If the value is set to null and all segments are valid, reset the placeholder.\n  if (value == null && Object.keys(validSegments).length === Object.keys(allSegments).length) {\n    validSegments = {};\n    setValidSegments(validSegments);\n    setPlaceholderDate((0, $35a22f14a1f04b11$export$66aa2b09de4b1ea5)(props.placeholderValue, granularity, calendar, defaultTimeZone));\n  }\n  // If all segments are valid, use the date from state, otherwise use the placeholder date.\n  let displayValue = calendarValue && Object.keys(validSegments).length >= Object.keys(allSegments).length ? calendarValue : placeholderDate;\n  let setValue = newValue => {\n    if (props.isDisabled || props.isReadOnly) return;\n    let validKeys = Object.keys(validSegments);\n    let allKeys = Object.keys(allSegments);\n    // if all the segments are completed or a timefield with everything but am/pm set the time, also ignore when am/pm cleared\n    if (newValue == null) {\n      setDate(null);\n      setPlaceholderDate((0, $35a22f14a1f04b11$export$66aa2b09de4b1ea5)(props.placeholderValue, granularity, calendar, defaultTimeZone));\n      setValidSegments({});\n    } else if (validKeys.length >= allKeys.length || validKeys.length === allKeys.length - 1 && allSegments.dayPeriod && !validSegments.dayPeriod && clearedSegment.current !== 'dayPeriod') {\n      // The display calendar should not have any effect on the emitted value.\n      // Emit dates in the same calendar as the original value, if any, otherwise gregorian.\n      newValue = (0, $g03ag$toCalendar)(newValue, (v === null || v === void 0 ? void 0 : v.calendar) || new (0, $g03ag$GregorianCalendar)());\n      setDate(newValue);\n    } else setPlaceholderDate(newValue);\n    clearedSegment.current = null;\n  };\n  let dateValue = (0, $g03ag$useMemo)(() => displayValue.toDate(timeZone), [displayValue, timeZone]);\n  let segments = (0, $g03ag$useMemo)(() => dateFormatter.formatToParts(dateValue).map(segment => {\n    let isEditable = $3c0fc76039f1c516$var$EDITABLE_SEGMENTS[segment.type];\n    if (segment.type === 'era' && calendar.getEras().length === 1) isEditable = false;\n    let isPlaceholder = $3c0fc76039f1c516$var$EDITABLE_SEGMENTS[segment.type] && !validSegments[segment.type];\n    let placeholder = $3c0fc76039f1c516$var$EDITABLE_SEGMENTS[segment.type] ? (0, $3e3ed55ab2966714$export$d3f5c5e0a5023fa0)(segment.type, segment.value, locale) : null;\n    return {\n      type: $3c0fc76039f1c516$var$TYPE_MAPPING[segment.type] || segment.type,\n      text: isPlaceholder ? placeholder : segment.value,\n      ...$3c0fc76039f1c516$var$getSegmentLimits(displayValue, segment.type, resolvedOptions),\n      isPlaceholder: isPlaceholder,\n      placeholder: placeholder,\n      isEditable: isEditable\n    };\n  }), [dateValue, validSegments, dateFormatter, resolvedOptions, displayValue, calendar, locale]);\n  // When the era field appears, mark it valid if the year field is already valid.\n  // If the era field disappears, remove it from the valid segments.\n  if (allSegments.era && validSegments.year && !validSegments.era) {\n    validSegments.era = true;\n    setValidSegments({\n      ...validSegments\n    });\n  } else if (!allSegments.era && validSegments.era) {\n    delete validSegments.era;\n    setValidSegments({\n      ...validSegments\n    });\n  }\n  let markValid = part => {\n    validSegments[part] = true;\n    if (part === 'year' && allSegments.era) validSegments.era = true;\n    setValidSegments({\n      ...validSegments\n    });\n  };\n  let adjustSegment = (type, amount) => {\n    if (!validSegments[type]) {\n      markValid(type);\n      let validKeys = Object.keys(validSegments);\n      let allKeys = Object.keys(allSegments);\n      if (validKeys.length >= allKeys.length || validKeys.length === allKeys.length - 1 && allSegments.dayPeriod && !validSegments.dayPeriod) setValue(displayValue);\n    } else setValue($3c0fc76039f1c516$var$addSegment(displayValue, type, amount, resolvedOptions));\n  };\n  let builtinValidation = (0, $g03ag$useMemo)(() => (0, $35a22f14a1f04b11$export$f18627323ab57ac0)(value, minValue, maxValue, isDateUnavailable, formatOpts), [value, minValue, maxValue, isDateUnavailable, formatOpts]);\n  let validation = (0, $g03ag$useFormValidationState)({\n    ...props,\n    value: value,\n    builtinValidation: builtinValidation\n  });\n  let isValueInvalid = validation.displayValidation.isInvalid;\n  let validationState = props.validationState || (isValueInvalid ? 'invalid' : null);\n  var _props_maxGranularity;\n  return {\n    ...validation,\n    value: calendarValue,\n    dateValue: dateValue,\n    calendar: calendar,\n    setValue: setValue,\n    segments: segments,\n    dateFormatter: dateFormatter,\n    validationState: validationState,\n    isInvalid: isValueInvalid,\n    granularity: granularity,\n    maxGranularity: (_props_maxGranularity = props.maxGranularity) !== null && _props_maxGranularity !== void 0 ? _props_maxGranularity : 'year',\n    isDisabled: isDisabled,\n    isReadOnly: isReadOnly,\n    isRequired: isRequired,\n    increment(part) {\n      adjustSegment(part, 1);\n    },\n    decrement(part) {\n      adjustSegment(part, -1);\n    },\n    incrementPage(part) {\n      adjustSegment(part, $3c0fc76039f1c516$var$PAGE_STEP[part] || 1);\n    },\n    decrementPage(part) {\n      adjustSegment(part, -($3c0fc76039f1c516$var$PAGE_STEP[part] || 1));\n    },\n    setSegment(part, v) {\n      markValid(part);\n      setValue($3c0fc76039f1c516$var$setSegment(displayValue, part, v, resolvedOptions));\n    },\n    confirmPlaceholder() {\n      if (props.isDisabled || props.isReadOnly) return;\n      // Confirm the placeholder if only the day period is not filled in.\n      let validKeys = Object.keys(validSegments);\n      let allKeys = Object.keys(allSegments);\n      if (validKeys.length === allKeys.length - 1 && allSegments.dayPeriod && !validSegments.dayPeriod) {\n        validSegments = {\n          ...allSegments\n        };\n        setValidSegments(validSegments);\n        setValue(displayValue.copy());\n      }\n    },\n    clearSegment(part) {\n      delete validSegments[part];\n      clearedSegment.current = part;\n      setValidSegments({\n        ...validSegments\n      });\n      let placeholder = (0, $35a22f14a1f04b11$export$66aa2b09de4b1ea5)(props.placeholderValue, granularity, calendar, defaultTimeZone);\n      let value = displayValue;\n      // Reset day period to default without changing the hour.\n      if (part === 'dayPeriod' && 'hour' in displayValue && 'hour' in placeholder) {\n        let isPM = displayValue.hour >= 12;\n        let shouldBePM = placeholder.hour >= 12;\n        if (isPM && !shouldBePM) value = displayValue.set({\n          hour: displayValue.hour - 12\n        });else if (!isPM && shouldBePM) value = displayValue.set({\n          hour: displayValue.hour + 12\n        });\n      } else if (part in displayValue) value = displayValue.set({\n        [part]: placeholder[part]\n      });\n      setDate(null);\n      setValue(value);\n    },\n    formatValue(fieldOptions) {\n      if (!calendarValue) return '';\n      let formatOptions = (0, $35a22f14a1f04b11$export$7e319ea407e63bc0)(fieldOptions, formatOpts);\n      let formatter = new (0, $g03ag$DateFormatter)(locale, formatOptions);\n      return formatter.format(dateValue);\n    }\n  };\n}\nfunction $3c0fc76039f1c516$var$getSegmentLimits(date, type, options) {\n  switch (type) {\n    case 'era':\n      {\n        let eras = date.calendar.getEras();\n        return {\n          value: eras.indexOf(date.era),\n          minValue: 0,\n          maxValue: eras.length - 1\n        };\n      }\n    case 'year':\n      return {\n        value: date.year,\n        minValue: 1,\n        maxValue: date.calendar.getYearsInEra(date)\n      };\n    case 'month':\n      return {\n        value: date.month,\n        minValue: (0, $g03ag$getMinimumMonthInYear)(date),\n        maxValue: date.calendar.getMonthsInYear(date)\n      };\n    case 'day':\n      return {\n        value: date.day,\n        minValue: (0, $g03ag$getMinimumDayInMonth)(date),\n        maxValue: date.calendar.getDaysInMonth(date)\n      };\n  }\n  if ('hour' in date) switch (type) {\n    case 'dayPeriod':\n      return {\n        value: date.hour >= 12 ? 12 : 0,\n        minValue: 0,\n        maxValue: 12\n      };\n    case 'hour':\n      if (options.hour12) {\n        let isPM = date.hour >= 12;\n        return {\n          value: date.hour,\n          minValue: isPM ? 12 : 0,\n          maxValue: isPM ? 23 : 11\n        };\n      }\n      return {\n        value: date.hour,\n        minValue: 0,\n        maxValue: 23\n      };\n    case 'minute':\n      return {\n        value: date.minute,\n        minValue: 0,\n        maxValue: 59\n      };\n    case 'second':\n      return {\n        value: date.second,\n        minValue: 0,\n        maxValue: 59\n      };\n  }\n  return {};\n}\nfunction $3c0fc76039f1c516$var$addSegment(value, part, amount, options) {\n  switch (part) {\n    case 'era':\n    case 'year':\n    case 'month':\n    case 'day':\n      return value.cycle(part, amount, {\n        round: part === 'year'\n      });\n  }\n  if ('hour' in value) switch (part) {\n    case 'dayPeriod':\n      {\n        let hours = value.hour;\n        let isPM = hours >= 12;\n        return value.set({\n          hour: isPM ? hours - 12 : hours + 12\n        });\n      }\n    case 'hour':\n    case 'minute':\n    case 'second':\n      return value.cycle(part, amount, {\n        round: part !== 'hour',\n        hourCycle: options.hour12 ? 12 : 24\n      });\n  }\n}\nfunction $3c0fc76039f1c516$var$setSegment(value, part, segmentValue, options) {\n  switch (part) {\n    case 'day':\n    case 'month':\n    case 'year':\n    case 'era':\n      return value.set({\n        [part]: segmentValue\n      });\n  }\n  if ('hour' in value) switch (part) {\n    case 'dayPeriod':\n      {\n        let hours = value.hour;\n        let wasPM = hours >= 12;\n        let isPM = segmentValue >= 12;\n        if (isPM === wasPM) return value;\n        return value.set({\n          hour: wasPM ? hours - 12 : hours + 12\n        });\n      }\n    case 'hour':\n      // In 12 hour time, ensure that AM/PM does not change\n      if (options.hour12) {\n        let hours = value.hour;\n        let wasPM = hours >= 12;\n        if (!wasPM && segmentValue === 12) segmentValue = 0;\n        if (wasPM && segmentValue < 12) segmentValue += 12;\n      }\n    // fallthrough\n    case 'minute':\n    case 'second':\n      return value.set({\n        [part]: segmentValue\n      });\n  }\n}\nexport { $3c0fc76039f1c516$export$60e84778edff6d26 as useDateFieldState };","map":{"version":3,"mappings":"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","names":["$3c0fc76039f1c516$var$EDITABLE_SEGMENTS","year","month","day","hour","minute","second","dayPeriod","era","$3c0fc76039f1c516$var$PAGE_STEP","$3c0fc76039f1c516$var$TYPE_MAPPING","dayperiod","$3c0fc76039f1c516$export$60e84778edff6d26","props","locale","createCalendar","hideTimeZone","isDisabled","isReadOnly","isRequired","minValue","maxValue","isDateUnavailable","v","value","defaultValue","placeholderValue","granularity","defaultTimeZone","timeZone","Error","toString","defaultFormatter","calendar","resolvedOptions","setDate","onChange","calendarValue","placeholderDate","setPlaceholderDate","val","showEra","identifier","formatOpts","_props_maxGranularity","maxGranularity","hourCycle","shouldForceLeadingZeros","opts","dateFormatter","allSegments","formatToParts","Date","filter","seg","type","reduce","p","validSegments","setValidSegments","clearedSegment","lastCalendarIdentifier","current","placeholder","Object","keys","length","displayValue","setValue","newValue","validKeys","allKeys","dateValue","toDate","segments","map","segment","isEditable","getEras","isPlaceholder","text","$3c0fc76039f1c516$var$getSegmentLimits","markValid","part","adjustSegment","amount","$3c0fc76039f1c516$var$addSegment","builtinValidation","validation","isValueInvalid","displayValidation","isInvalid","validationState","increment","decrement","incrementPage","decrementPage","setSegment","$3c0fc76039f1c516$var$setSegment","confirmPlaceholder","copy","clearSegment","isPM","shouldBePM","set","formatValue","fieldOptions","formatOptions","formatter","format","date","options","eras","indexOf","getYearsInEra","getMonthsInYear","getDaysInMonth","hour12","cycle","round","hours","segmentValue","wasPM"],"sources":["D:\\Like, for real projects\\React-Todo-List-V2\\node_modules\\@react-stately\\datepicker\\dist\\packages\\@react-stately\\datepicker\\src\\useDateFieldState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Calendar, DateFormatter, getMinimumDayInMonth, getMinimumMonthInYear, GregorianCalendar, toCalendar} from '@internationalized/date';\nimport {convertValue, createPlaceholderDate, FieldOptions, getFormatOptions, getValidationResult, useDefaultProps} from './utils';\nimport {DatePickerProps, DateValue, Granularity} from '@react-types/datepicker';\nimport {FormValidationState, useFormValidationState} from '@react-stately/form';\nimport {getPlaceholder} from './placeholders';\nimport {useControlledState} from '@react-stately/utils';\nimport {useEffect, useMemo, useRef, useState} from 'react';\nimport {ValidationState} from '@react-types/shared';\n\nexport type SegmentType = 'era' | 'year' | 'month' | 'day' |  'hour' | 'minute' | 'second' | 'dayPeriod' | 'literal' | 'timeZoneName';\nexport interface DateSegment {\n  /** The type of segment. */\n  type: SegmentType,\n  /** The formatted text for the segment. */\n  text: string,\n  /** The numeric value for the segment, if applicable. */\n  value?: number,\n  /** The minimum numeric value for the segment, if applicable. */\n  minValue?: number,\n  /** The maximum numeric value for the segment, if applicable. */\n  maxValue?: number,\n  /** Whether the value is a placeholder. */\n  isPlaceholder: boolean,\n  /** A placeholder string for the segment. */\n  placeholder: string,\n  /** Whether the segment is editable. */\n  isEditable: boolean\n}\n\nexport interface DateFieldState extends FormValidationState {\n  /** The current field value. */\n  value: DateValue,\n  /** The current value, converted to a native JavaScript `Date` object.  */\n  dateValue: Date,\n  /** The calendar system currently in use. */\n  calendar: Calendar,\n  /** Sets the field's value. */\n  setValue(value: DateValue): void,\n  /** A list of segments for the current value. */\n  segments: DateSegment[],\n  /** A date formatter configured for the current locale and format. */\n  dateFormatter: DateFormatter,\n  /**\n   * The current validation state of the date field, based on the `validationState`, `minValue`, and `maxValue` props.\n   * @deprecated Use `isInvalid` instead.\n   */\n  validationState: ValidationState,\n  /** Whether the date field is invalid, based on the `isInvalid`, `minValue`, and `maxValue` props. */\n  isInvalid: boolean,\n  /** The granularity for the field, based on the `granularity` prop and current value. */\n  granularity: Granularity,\n  /** The maximum date or time unit that is displayed in the field. */\n  maxGranularity: 'year' | 'month' | Granularity,\n  /** Whether the field is disabled. */\n  isDisabled: boolean,\n  /** Whether the field is read only. */\n  isReadOnly: boolean,\n  /** Whether the field is required. */\n  isRequired: boolean,\n  /** Increments the given segment. Upon reaching the minimum or maximum value, the value wraps around to the opposite limit. */\n  increment(type: SegmentType): void,\n  /** Decrements the given segment. Upon reaching the minimum or maximum value, the value wraps around to the opposite limit. */\n  decrement(type: SegmentType): void,\n  /**\n   * Increments the given segment by a larger amount, rounding it to the nearest increment.\n   * The amount to increment by depends on the field, for example 15 minutes, 7 days, and 5 years.\n   * Upon reaching the minimum or maximum value, the value wraps around to the opposite limit.\n   */\n  incrementPage(type: SegmentType): void,\n  /**\n   * Decrements the given segment by a larger amount, rounding it to the nearest increment.\n   * The amount to decrement by depends on the field, for example 15 minutes, 7 days, and 5 years.\n   * Upon reaching the minimum or maximum value, the value wraps around to the opposite limit.\n   */\n  decrementPage(type: SegmentType): void,\n  /** Sets the value of the given segment. */\n  setSegment(type: 'era', value: string): void,\n  setSegment(type: SegmentType, value: number): void,\n  /** Updates the remaining unfilled segments with the placeholder value. */\n  confirmPlaceholder(): void,\n  /** Clears the value of the given segment, reverting it to the placeholder. */\n  clearSegment(type: SegmentType): void,\n  /** Formats the current date value using the given options. */\n  formatValue(fieldOptions: FieldOptions): string\n}\n\nconst EDITABLE_SEGMENTS = {\n  year: true,\n  month: true,\n  day: true,\n  hour: true,\n  minute: true,\n  second: true,\n  dayPeriod: true,\n  era: true\n};\n\nconst PAGE_STEP = {\n  year: 5,\n  month: 2,\n  day: 7,\n  hour: 2,\n  minute: 15,\n  second: 15\n};\n\n// Node seems to convert everything to lowercase...\nconst TYPE_MAPPING = {\n  dayperiod: 'dayPeriod'\n};\n\nexport interface DateFieldStateOptions<T extends DateValue = DateValue> extends DatePickerProps<T> {\n  /**\n   * The maximum unit to display in the date field.\n   * @default 'year'\n   */\n  maxGranularity?: 'year' | 'month' | Granularity,\n  /** The locale to display and edit the value according to. */\n  locale: string,\n  /**\n   * A function that creates a [Calendar](../internationalized/date/Calendar.html)\n   * object for a given calendar identifier. Such a function may be imported from the\n   * `@internationalized/date` package, or manually implemented to include support for\n   * only certain calendars.\n   */\n  createCalendar: (name: string) => Calendar\n}\n\n/**\n * Provides state management for a date field component.\n * A date field allows users to enter and edit date and time values using a keyboard.\n * Each part of a date value is displayed in an individually editable segment.\n */\nexport function useDateFieldState<T extends DateValue = DateValue>(props: DateFieldStateOptions<T>): DateFieldState {\n  let {\n    locale,\n    createCalendar,\n    hideTimeZone,\n    isDisabled,\n    isReadOnly,\n    isRequired,\n    minValue,\n    maxValue,\n    isDateUnavailable\n  } = props;\n\n  let v: DateValue = (props.value || props.defaultValue || props.placeholderValue);\n  let [granularity, defaultTimeZone] = useDefaultProps(v, props.granularity);\n  let timeZone = defaultTimeZone || 'UTC';\n\n  // props.granularity must actually exist in the value if one is provided.\n  if (v && !(granularity in v)) {\n    throw new Error('Invalid granularity ' + granularity + ' for value ' + v.toString());\n  }\n\n  let defaultFormatter = useMemo(() => new DateFormatter(locale), [locale]);\n  let calendar = useMemo(() => createCalendar(defaultFormatter.resolvedOptions().calendar), [createCalendar, defaultFormatter]);\n\n  let [value, setDate] = useControlledState<DateValue>(\n    props.value,\n    props.defaultValue,\n    props.onChange\n  );\n\n  let calendarValue = useMemo(() => convertValue(value, calendar), [value, calendar]);\n\n  // We keep track of the placeholder date separately in state so that onChange is not called\n  // until all segments are set. If the value === null (not undefined), then assume the component\n  // is controlled, so use the placeholder as the value until all segments are entered so it doesn't\n  // change from uncontrolled to controlled and emit a warning.\n  let [placeholderDate, setPlaceholderDate] = useState(\n    () => createPlaceholderDate(props.placeholderValue, granularity, calendar, defaultTimeZone)\n  );\n\n  let val = calendarValue || placeholderDate;\n  let showEra = calendar.identifier === 'gregory' && val.era === 'BC';\n  let formatOpts = useMemo(() => ({\n    granularity,\n    maxGranularity: props.maxGranularity ?? 'year',\n    timeZone: defaultTimeZone,\n    hideTimeZone,\n    hourCycle: props.hourCycle,\n    showEra,\n    shouldForceLeadingZeros: props.shouldForceLeadingZeros\n  }), [props.maxGranularity, granularity, props.hourCycle, props.shouldForceLeadingZeros, defaultTimeZone, hideTimeZone, showEra]);\n  let opts = useMemo(() => getFormatOptions({}, formatOpts), [formatOpts]);\n\n  let dateFormatter = useMemo(() => new DateFormatter(locale, opts), [locale, opts]);\n  let resolvedOptions = useMemo(() => dateFormatter.resolvedOptions(), [dateFormatter]);\n\n  // Determine how many editable segments there are for validation purposes.\n  // The result is cached for performance.\n  let allSegments: Partial<typeof EDITABLE_SEGMENTS> = useMemo(() =>\n    dateFormatter.formatToParts(new Date())\n      .filter(seg => EDITABLE_SEGMENTS[seg.type])\n      .reduce((p, seg) => (p[seg.type] = true, p), {})\n  , [dateFormatter]);\n\n  let [validSegments, setValidSegments] = useState<Partial<typeof EDITABLE_SEGMENTS>>(\n    () => props.value || props.defaultValue ? {...allSegments} : {}\n  );\n\n  let clearedSegment = useRef<string>();\n\n  // Reset placeholder when calendar changes\n  let lastCalendarIdentifier = useRef(calendar.identifier);\n  useEffect(() => {\n    if (calendar.identifier !== lastCalendarIdentifier.current) {\n      lastCalendarIdentifier.current = calendar.identifier;\n      setPlaceholderDate(placeholder =>\n        Object.keys(validSegments).length > 0\n          ? toCalendar(placeholder, calendar)\n          : createPlaceholderDate(props.placeholderValue, granularity, calendar, defaultTimeZone)\n      );\n    }\n  }, [calendar, granularity, validSegments, defaultTimeZone, props.placeholderValue]);\n\n  // If there is a value prop, and some segments were previously placeholders, mark them all as valid.\n  if (value && Object.keys(validSegments).length < Object.keys(allSegments).length) {\n    validSegments = {...allSegments};\n    setValidSegments(validSegments);\n  }\n\n  // If the value is set to null and all segments are valid, reset the placeholder.\n  if (value == null && Object.keys(validSegments).length === Object.keys(allSegments).length) {\n    validSegments = {};\n    setValidSegments(validSegments);\n    setPlaceholderDate(createPlaceholderDate(props.placeholderValue, granularity, calendar, defaultTimeZone));\n  }\n\n  // If all segments are valid, use the date from state, otherwise use the placeholder date.\n  let displayValue = calendarValue && Object.keys(validSegments).length >= Object.keys(allSegments).length ? calendarValue : placeholderDate;\n  let setValue = (newValue: DateValue) => {\n    if (props.isDisabled || props.isReadOnly) {\n      return;\n    }\n    let validKeys = Object.keys(validSegments);\n    let allKeys = Object.keys(allSegments);\n\n    // if all the segments are completed or a timefield with everything but am/pm set the time, also ignore when am/pm cleared\n    if (newValue == null) {\n      setDate(null);\n      setPlaceholderDate(createPlaceholderDate(props.placeholderValue, granularity, calendar, defaultTimeZone));\n      setValidSegments({});\n    } else if (validKeys.length >= allKeys.length || (validKeys.length === allKeys.length - 1 && allSegments.dayPeriod && !validSegments.dayPeriod && clearedSegment.current !== 'dayPeriod')) {\n      // The display calendar should not have any effect on the emitted value.\n      // Emit dates in the same calendar as the original value, if any, otherwise gregorian.\n      newValue = toCalendar(newValue, v?.calendar || new GregorianCalendar());\n      setDate(newValue);\n    } else {\n      setPlaceholderDate(newValue);\n    }\n    clearedSegment.current = null;\n  };\n\n  let dateValue = useMemo(() => displayValue.toDate(timeZone), [displayValue, timeZone]);\n  let segments = useMemo(() =>\n    dateFormatter.formatToParts(dateValue)\n      .map(segment => {\n        let isEditable = EDITABLE_SEGMENTS[segment.type];\n        if (segment.type === 'era' && calendar.getEras().length === 1) {\n          isEditable = false;\n        }\n\n        let isPlaceholder = EDITABLE_SEGMENTS[segment.type] && !validSegments[segment.type];\n        let placeholder = EDITABLE_SEGMENTS[segment.type] ? getPlaceholder(segment.type, segment.value, locale) : null;\n        return {\n          type: TYPE_MAPPING[segment.type] || segment.type,\n          text: isPlaceholder ? placeholder : segment.value,\n          ...getSegmentLimits(displayValue, segment.type, resolvedOptions),\n          isPlaceholder,\n          placeholder,\n          isEditable\n        } as DateSegment;\n      })\n  , [dateValue, validSegments, dateFormatter, resolvedOptions, displayValue, calendar, locale]);\n\n  // When the era field appears, mark it valid if the year field is already valid.\n  // If the era field disappears, remove it from the valid segments.\n  if (allSegments.era && validSegments.year && !validSegments.era) {\n    validSegments.era = true;\n    setValidSegments({...validSegments});\n  } else if (!allSegments.era && validSegments.era) {\n    delete validSegments.era;\n    setValidSegments({...validSegments});\n  }\n\n  let markValid = (part: Intl.DateTimeFormatPartTypes) => {\n    validSegments[part] = true;\n    if (part === 'year' && allSegments.era) {\n      validSegments.era = true;\n    }\n    setValidSegments({...validSegments});\n  };\n\n  let adjustSegment = (type: Intl.DateTimeFormatPartTypes, amount: number) => {\n    if (!validSegments[type]) {\n      markValid(type);\n      let validKeys = Object.keys(validSegments);\n      let allKeys = Object.keys(allSegments);\n      if (validKeys.length >= allKeys.length || (validKeys.length === allKeys.length - 1 && allSegments.dayPeriod && !validSegments.dayPeriod)) {\n        setValue(displayValue);\n      }\n    } else {\n      setValue(addSegment(displayValue, type, amount, resolvedOptions));\n    }\n  };\n\n  let builtinValidation = useMemo(() => getValidationResult(\n    value,\n    minValue,\n    maxValue,\n    isDateUnavailable,\n    formatOpts\n  ), [value, minValue, maxValue, isDateUnavailable, formatOpts]);\n\n  let validation = useFormValidationState({\n    ...props,\n    value,\n    builtinValidation\n  });\n\n  let isValueInvalid = validation.displayValidation.isInvalid;\n  let validationState: ValidationState = props.validationState || (isValueInvalid ? 'invalid' : null);\n\n  return {\n    ...validation,\n    value: calendarValue,\n    dateValue,\n    calendar,\n    setValue,\n    segments,\n    dateFormatter,\n    validationState,\n    isInvalid: isValueInvalid,\n    granularity,\n    maxGranularity: props.maxGranularity ?? 'year',\n    isDisabled,\n    isReadOnly,\n    isRequired,\n    increment(part) {\n      adjustSegment(part, 1);\n    },\n    decrement(part) {\n      adjustSegment(part, -1);\n    },\n    incrementPage(part) {\n      adjustSegment(part, PAGE_STEP[part] || 1);\n    },\n    decrementPage(part) {\n      adjustSegment(part, -(PAGE_STEP[part] || 1));\n    },\n    setSegment(part, v) {\n      markValid(part);\n      setValue(setSegment(displayValue, part, v, resolvedOptions));\n    },\n    confirmPlaceholder() {\n      if (props.isDisabled || props.isReadOnly) {\n        return;\n      }\n\n      // Confirm the placeholder if only the day period is not filled in.\n      let validKeys = Object.keys(validSegments);\n      let allKeys = Object.keys(allSegments);\n      if (validKeys.length === allKeys.length - 1 && allSegments.dayPeriod && !validSegments.dayPeriod) {\n        validSegments = {...allSegments};\n        setValidSegments(validSegments);\n        setValue(displayValue.copy());\n      }\n    },\n    clearSegment(part) {\n      delete validSegments[part];\n      clearedSegment.current = part;\n      setValidSegments({...validSegments});\n\n      let placeholder = createPlaceholderDate(props.placeholderValue, granularity, calendar, defaultTimeZone);\n      let value = displayValue;\n\n      // Reset day period to default without changing the hour.\n      if (part === 'dayPeriod' && 'hour' in displayValue && 'hour' in placeholder) {\n        let isPM = displayValue.hour >= 12;\n        let shouldBePM = placeholder.hour >= 12;\n        if (isPM && !shouldBePM) {\n          value = displayValue.set({hour: displayValue.hour - 12});\n        } else if (!isPM && shouldBePM) {\n          value = displayValue.set({hour: displayValue.hour + 12});\n        }\n      } else if (part in displayValue) {\n        value = displayValue.set({[part]: placeholder[part]});\n      }\n\n      setDate(null);\n      setValue(value);\n    },\n    formatValue(fieldOptions: FieldOptions) {\n      if (!calendarValue) {\n        return '';\n      }\n\n      let formatOptions = getFormatOptions(fieldOptions, formatOpts);\n      let formatter = new DateFormatter(locale, formatOptions);\n      return formatter.format(dateValue);\n    }\n  };\n}\n\nfunction getSegmentLimits(date: DateValue, type: string, options: Intl.ResolvedDateTimeFormatOptions) {\n  switch (type) {\n    case 'era': {\n      let eras = date.calendar.getEras();\n      return {\n        value: eras.indexOf(date.era),\n        minValue: 0,\n        maxValue: eras.length - 1\n      };\n    }\n    case 'year':\n      return {\n        value: date.year,\n        minValue: 1,\n        maxValue: date.calendar.getYearsInEra(date)\n      };\n    case 'month':\n      return {\n        value: date.month,\n        minValue: getMinimumMonthInYear(date),\n        maxValue: date.calendar.getMonthsInYear(date)\n      };\n    case 'day':\n      return {\n        value: date.day,\n        minValue: getMinimumDayInMonth(date),\n        maxValue: date.calendar.getDaysInMonth(date)\n      };\n  }\n\n  if ('hour' in date) {\n    switch (type) {\n      case 'dayPeriod':\n        return {\n          value: date.hour >= 12 ? 12 : 0,\n          minValue: 0,\n          maxValue: 12\n        };\n      case 'hour':\n        if (options.hour12) {\n          let isPM = date.hour >= 12;\n          return {\n            value: date.hour,\n            minValue: isPM ? 12 : 0,\n            maxValue: isPM ? 23 : 11\n          };\n        }\n\n        return {\n          value: date.hour,\n          minValue: 0,\n          maxValue: 23\n        };\n      case 'minute':\n        return {\n          value: date.minute,\n          minValue: 0,\n          maxValue: 59\n        };\n      case 'second':\n        return {\n          value: date.second,\n          minValue: 0,\n          maxValue: 59\n        };\n    }\n  }\n\n  return {};\n}\n\nfunction addSegment(value: DateValue, part: string, amount: number, options: Intl.ResolvedDateTimeFormatOptions) {\n  switch (part) {\n    case 'era':\n    case 'year':\n    case 'month':\n    case 'day':\n      return value.cycle(part, amount, {round: part === 'year'});\n  }\n\n  if ('hour' in value) {\n    switch (part) {\n      case 'dayPeriod': {\n        let hours = value.hour;\n        let isPM = hours >= 12;\n        return value.set({hour: isPM ? hours - 12 : hours + 12});\n      }\n      case 'hour':\n      case 'minute':\n      case 'second':\n        return value.cycle(part, amount, {\n          round: part !== 'hour',\n          hourCycle: options.hour12 ? 12 : 24\n        });\n    }\n  }\n}\n\nfunction setSegment(value: DateValue, part: string, segmentValue: number, options: Intl.ResolvedDateTimeFormatOptions) {\n  switch (part) {\n    case 'day':\n    case 'month':\n    case 'year':\n    case 'era':\n      return value.set({[part]: segmentValue});\n  }\n\n  if ('hour' in value) {\n    switch (part) {\n      case 'dayPeriod': {\n        let hours = value.hour;\n        let wasPM = hours >= 12;\n        let isPM = segmentValue >= 12;\n        if (isPM === wasPM) {\n          return value;\n        }\n        return value.set({hour: wasPM ? hours - 12 : hours + 12});\n      }\n      case 'hour':\n        // In 12 hour time, ensure that AM/PM does not change\n        if (options.hour12) {\n          let hours = value.hour;\n          let wasPM = hours >= 12;\n          if (!wasPM && segmentValue === 12) {\n            segmentValue = 0;\n          }\n          if (wasPM && segmentValue < 12) {\n            segmentValue += 12;\n          }\n        }\n        // fallthrough\n      case 'minute':\n      case 'second':\n        return value.set({[part]: segmentValue});\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}