{"ast":null,"code":"import { gridIds as $2140fb2337097f2d$export$552312adfd451dab } from \"./utils.mjs\";\nimport $dDeJM$intlStringsmodulejs from \"./intlStrings.mjs\";\nimport { TableKeyboardDelegate as $0ba3c81c7f1caedd$export$da43f8f5cb04028d } from \"./TableKeyboardDelegate.mjs\";\nimport { announce as $dDeJM$announce } from \"@react-aria/live-announcer\";\nimport { useGrid as $dDeJM$useGrid } from \"@react-aria/grid\";\nimport { useId as $dDeJM$useId, useDescription as $dDeJM$useDescription, useUpdateEffect as $dDeJM$useUpdateEffect, mergeProps as $dDeJM$mergeProps } from \"@react-aria/utils\";\nimport { useMemo as $dDeJM$useMemo } from \"react\";\nimport { tableNestedRows as $dDeJM$tableNestedRows } from \"@react-stately/flags\";\nimport { useCollator as $dDeJM$useCollator, useLocale as $dDeJM$useLocale, useLocalizedStringFormatter as $dDeJM$useLocalizedStringFormatter } from \"@react-aria/i18n\";\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $6e31608fbba75bab$export$25bceaac3c7e4dc7(props, state, ref) {\n  let {\n    keyboardDelegate: keyboardDelegate,\n    isVirtualized: isVirtualized,\n    layout: layout\n  } = props;\n  // By default, a KeyboardDelegate is provided which uses the DOM to query layout information (e.g. for page up/page down).\n  // When virtualized, the layout object will be passed in as a prop and override this.\n  let collator = (0, $dDeJM$useCollator)({\n    usage: 'search',\n    sensitivity: 'base'\n  });\n  let {\n    direction: direction\n  } = (0, $dDeJM$useLocale)();\n  let disabledBehavior = state.selectionManager.disabledBehavior;\n  let delegate = (0, $dDeJM$useMemo)(() => keyboardDelegate || new (0, $0ba3c81c7f1caedd$export$da43f8f5cb04028d)({\n    collection: state.collection,\n    disabledKeys: state.disabledKeys,\n    disabledBehavior: disabledBehavior,\n    ref: ref,\n    direction: direction,\n    collator: collator,\n    layout: layout\n  }), [keyboardDelegate, state.collection, state.disabledKeys, disabledBehavior, ref, direction, collator, layout]);\n  let id = (0, $dDeJM$useId)(props.id);\n  (0, $2140fb2337097f2d$export$552312adfd451dab).set(state, id);\n  let {\n    gridProps: gridProps\n  } = (0, $dDeJM$useGrid)({\n    ...props,\n    id: id,\n    keyboardDelegate: delegate\n  }, state, ref);\n  // Override to include header rows\n  if (isVirtualized) gridProps['aria-rowcount'] = state.collection.size + state.collection.headerRows.length;\n  if ((0, $dDeJM$tableNestedRows)() && 'expandedKeys' in state) gridProps.role = 'treegrid';\n  let {\n    column: column,\n    direction: sortDirection\n  } = state.sortDescriptor || {};\n  let stringFormatter = (0, $dDeJM$useLocalizedStringFormatter)((0, $parcel$interopDefault($dDeJM$intlStringsmodulejs)), '@react-aria/table');\n  let sortDescription = (0, $dDeJM$useMemo)(() => {\n    var _state_collection_columns_find;\n    let columnName = (_state_collection_columns_find = state.collection.columns.find(c => c.key === column)) === null || _state_collection_columns_find === void 0 ? void 0 : _state_collection_columns_find.textValue;\n    return sortDirection && column ? stringFormatter.format(`${sortDirection}Sort`, {\n      columnName: columnName\n    }) : undefined;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [sortDirection, column, state.collection.columns]);\n  let descriptionProps = (0, $dDeJM$useDescription)(sortDescription);\n  // Only announce after initial render, tabbing to the table will tell you the initial sort info already\n  (0, $dDeJM$useUpdateEffect)(() => {\n    (0, $dDeJM$announce)(sortDescription, 'assertive', 500);\n  }, [sortDescription]);\n  return {\n    gridProps: (0, $dDeJM$mergeProps)(gridProps, descriptionProps, {\n      // merge sort description with long press information\n      'aria-describedby': [descriptionProps['aria-describedby'], gridProps['aria-describedby']].filter(Boolean).join(' ')\n    })\n  };\n}\nexport { $6e31608fbba75bab$export$25bceaac3c7e4dc7 as useTable };","map":{"version":3,"mappings":";;;;;;;;;;;;AAAA;;;;;;;;;;;;AAuCO,SAASA,0CAAYC,KAAwB,EAAEC,KAAuC,EAAEC,GAA2B;EACxH,IAAI;IAAAC,kBACFA,gBAAgB;IAAAC,eAChBA,aAAa;IAAAC,QACbA;EAAM,CACP,GAAGL;EAEJ;EACA;EACA,IAAIM,WAAW,sBAAU,EAAE;IAACC,OAAO;IAAUC,aAAa;EAAM;EAChE,IAAI;IAAAC,WAACA;EAAS,CAAC,GAAG,oBAAQ;EAC1B,IAAIC,mBAAmBT,MAAMU,gBAAgB,CAACD,gBAAgB;EAC9D,IAAIE,WAAW,kBAAM,EAAE,MAAMT,oBAAoB,KAAI,4CAAoB,EAAE;IACzEU,YAAYZ,MAAMY,UAAU;IAC5BC,cAAcb,MAAMa,YAAY;sBAChCJ;SACAR;eACAO;cACAH;YACAD;EACF,IAAI,CAACF,kBAAkBF,MAAMY,UAAU,EAAEZ,MAAMa,YAAY,EAAEJ,kBAAkBR,KAAKO,WAAWH,UAAUD,OAAO;EAChH,IAAIU,KAAK,gBAAI,EAAEf,MAAMe,EAAE;EACvB,6CAAM,EAAEC,GAAG,CAACf,OAAOc;EAEnB,IAAI;IAAAE,WAACA;EAAS,CAAC,GAAG,kBAAM,EAAE;IACxB,GAAGjB,KAAK;QACRe;IACAZ,kBAAkBS;EACpB,GAAGX,OAAOC;EAEV;EACA,IAAIE,eACFa,SAAS,CAAC,gBAAgB,GAAGhB,MAAMY,UAAU,CAACK,IAAI,GAAGjB,MAAMY,UAAU,CAACM,UAAU,CAACC,MAAM;EAGzF,IAAI,0BAAc,OAAO,kBAAkBnB,OACzCgB,UAAUI,IAAI,GAAG;EAGnB,IAAI;IAAAC,QAACA,MAAM;IAAEb,WAAWc;EAAa,CAAC,GAAGtB,MAAMuB,cAAc,IAAI,CAAC;EAClE,IAAIC,kBAAkB,sCAA0B,GAAE,qDAAW,GAAG;EAChE,IAAIC,kBAAkB,kBAAM,EAAE;QACXC;IAAjB,IAAIC,cAAaD,uCAAMd,UAAU,CAACgB,OAAO,CAACC,IAAI,CAACC,KAAKA,EAAEC,GAAG,KAAKV,qBAA7CK,oFAAsDM,SAAS;IAChF,OAAOV,iBAAiBD,SAASG,gBAAgBS,MAAM,CAAC,GAAGX,mBAAmB,EAAE;kBAACK;IAAU,KAAKO;IAClG;EACA,GAAG,CAACZ,eAAeD,QAAQrB,MAAMY,UAAU,CAACgB,OAAO,CAAC;EAEpD,IAAIO,mBAAmB,yBAAa,EAAEV;EAEtC;EACA,0BAAc,EAAE;IACd,mBAAO,EAAEA,iBAAiB,aAAa;EACzC,GAAG,CAACA,gBAAgB;EAEpB,OAAO;IACLT,WAAW,qBAAS,EAClBA,WACAmB,kBACA;MACE;MACA,oBAAoB,CAACA,gBAAgB,CAAC,mBAAmB,EAAEnB,SAAS,CAAC,mBAAmB,CAAC,CAACoB,MAAM,CAACC,SAASC,IAAI,CAAC;IACjH;EAEJ;AACF","names":["$6e31608fbba75bab$export$25bceaac3c7e4dc7","props","state","ref","keyboardDelegate","isVirtualized","layout","collator","usage","sensitivity","direction","disabledBehavior","selectionManager","delegate","collection","disabledKeys","id","set","gridProps","size","headerRows","length","role","column","sortDirection","sortDescriptor","stringFormatter","sortDescription","_state_collection_columns_find","columnName","columns","find","c","key","textValue","format","undefined","descriptionProps","filter","Boolean","join"],"sources":["D:\\Like, for real projects\\React-Todo-List-V2\\node_modules\\@react-aria\\table\\dist\\packages\\@react-aria\\table\\src\\useTable.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {announce} from '@react-aria/live-announcer';\nimport {GridAria, GridProps, useGrid} from '@react-aria/grid';\nimport {gridIds} from './utils';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport {Layout} from '@react-stately/virtualizer';\nimport {mergeProps, useDescription, useId, useUpdateEffect} from '@react-aria/utils';\nimport {Node} from '@react-types/shared';\nimport {RefObject, useMemo} from 'react';\nimport {TableKeyboardDelegate} from './TableKeyboardDelegate';\nimport {tableNestedRows} from '@react-stately/flags';\nimport {TableState, TreeGridState} from '@react-stately/table';\nimport {useCollator, useLocale, useLocalizedStringFormatter} from '@react-aria/i18n';\n\nexport interface AriaTableProps<T> extends GridProps {\n  /** The layout object for the table. Computes what content is visible and how to position and style them. */\n  layout?: Layout<Node<T>>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a table component.\n * A table displays data in rows and columns and enables a user to navigate its contents via directional navigation keys,\n * and optionally supports row selection and sorting.\n * @param props - Props for the table.\n * @param state - State for the table, as returned by `useTableState`.\n * @param ref - The ref attached to the table element.\n */\nexport function useTable<T>(props: AriaTableProps<T>, state: TableState<T> | TreeGridState<T>, ref: RefObject<HTMLElement>): GridAria {\n  let {\n    keyboardDelegate,\n    isVirtualized,\n    layout\n  } = props;\n\n  // By default, a KeyboardDelegate is provided which uses the DOM to query layout information (e.g. for page up/page down).\n  // When virtualized, the layout object will be passed in as a prop and override this.\n  let collator = useCollator({usage: 'search', sensitivity: 'base'});\n  let {direction} = useLocale();\n  let disabledBehavior = state.selectionManager.disabledBehavior;\n  let delegate = useMemo(() => keyboardDelegate || new TableKeyboardDelegate({\n    collection: state.collection,\n    disabledKeys: state.disabledKeys,\n    disabledBehavior,\n    ref,\n    direction,\n    collator,\n    layout\n  }), [keyboardDelegate, state.collection, state.disabledKeys, disabledBehavior, ref, direction, collator, layout]);\n  let id = useId(props.id);\n  gridIds.set(state, id);\n\n  let {gridProps} = useGrid({\n    ...props,\n    id,\n    keyboardDelegate: delegate\n  }, state, ref);\n\n  // Override to include header rows\n  if (isVirtualized) {\n    gridProps['aria-rowcount'] = state.collection.size + state.collection.headerRows.length;\n  }\n\n  if (tableNestedRows() && 'expandedKeys' in state) {\n    gridProps.role = 'treegrid';\n  }\n\n  let {column, direction: sortDirection} = state.sortDescriptor || {};\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-aria/table');\n  let sortDescription = useMemo(() => {\n    let columnName = state.collection.columns.find(c => c.key === column)?.textValue;\n    return sortDirection && column ? stringFormatter.format(`${sortDirection}Sort`, {columnName}) : undefined;\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [sortDirection, column, state.collection.columns]);\n\n  let descriptionProps = useDescription(sortDescription);\n\n  // Only announce after initial render, tabbing to the table will tell you the initial sort info already\n  useUpdateEffect(() => {\n    announce(sortDescription, 'assertive', 500);\n  }, [sortDescription]);\n\n  return {\n    gridProps: mergeProps(\n      gridProps,\n      descriptionProps,\n      {\n        // merge sort description with long press information\n        'aria-describedby': [descriptionProps['aria-describedby'], gridProps['aria-describedby']].filter(Boolean).join(' ')\n      }\n    )\n  };\n}\n"]},"metadata":{},"sourceType":"module"}