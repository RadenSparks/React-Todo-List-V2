{"ast":null,"code":"import { Selection as $e40ea825a81a3709$export$52baac22726c72bf } from \"./Selection.mjs\";\nimport { compareNodeOrder as $jkhUT$compareNodeOrder, getFirstItem as $jkhUT$getFirstItem, getChildNodes as $jkhUT$getChildNodes } from \"@react-stately/collections\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nclass $d496c0a20b6e58ec$export$6c8a5aaad13c9852 {\n  /**\n  * The type of selection that is allowed in the collection.\n  */\n  get selectionMode() {\n    return this.state.selectionMode;\n  }\n  /**\n  * Whether the collection allows empty selection.\n  */\n  get disallowEmptySelection() {\n    return this.state.disallowEmptySelection;\n  }\n  /**\n  * The selection behavior for the collection.\n  */\n  get selectionBehavior() {\n    return this.state.selectionBehavior;\n  }\n  /**\n  * Sets the selection behavior for the collection.\n  */\n  setSelectionBehavior(selectionBehavior) {\n    this.state.setSelectionBehavior(selectionBehavior);\n  }\n  /**\n  * Whether the collection is currently focused.\n  */\n  get isFocused() {\n    return this.state.isFocused;\n  }\n  /**\n  * Sets whether the collection is focused.\n  */\n  setFocused(isFocused) {\n    this.state.setFocused(isFocused);\n  }\n  /**\n  * The current focused key in the collection.\n  */\n  get focusedKey() {\n    return this.state.focusedKey;\n  }\n  /** Whether the first or last child of the focused key should receive focus. */\n  get childFocusStrategy() {\n    return this.state.childFocusStrategy;\n  }\n  /**\n  * Sets the focused key.\n  */\n  setFocusedKey(key, childFocusStrategy) {\n    if (key == null || this.collection.getItem(key)) this.state.setFocusedKey(key, childFocusStrategy);\n  }\n  /**\n  * The currently selected keys in the collection.\n  */\n  get selectedKeys() {\n    return this.state.selectedKeys === 'all' ? new Set(this.getSelectAllKeys()) : this.state.selectedKeys;\n  }\n  /**\n  * The raw selection value for the collection.\n  * Either 'all' for select all, or a set of keys.\n  */\n  get rawSelection() {\n    return this.state.selectedKeys;\n  }\n  /**\n  * Returns whether a key is selected.\n  */\n  isSelected(key) {\n    if (this.state.selectionMode === 'none') return false;\n    key = this.getKey(key);\n    return this.state.selectedKeys === 'all' ? this.canSelectItem(key) : this.state.selectedKeys.has(key);\n  }\n  /**\n  * Whether the selection is empty.\n  */\n  get isEmpty() {\n    return this.state.selectedKeys !== 'all' && this.state.selectedKeys.size === 0;\n  }\n  /**\n  * Whether all items in the collection are selected.\n  */\n  get isSelectAll() {\n    if (this.isEmpty) return false;\n    if (this.state.selectedKeys === 'all') return true;\n    if (this._isSelectAll != null) return this._isSelectAll;\n    let allKeys = this.getSelectAllKeys();\n    let selectedKeys = this.state.selectedKeys;\n    this._isSelectAll = allKeys.every(k => selectedKeys.has(k));\n    return this._isSelectAll;\n  }\n  get firstSelectedKey() {\n    let first = null;\n    for (let key of this.state.selectedKeys) {\n      let item = this.collection.getItem(key);\n      if (!first || item && (0, $jkhUT$compareNodeOrder)(this.collection, item, first) < 0) first = item;\n    }\n    return first === null || first === void 0 ? void 0 : first.key;\n  }\n  get lastSelectedKey() {\n    let last = null;\n    for (let key of this.state.selectedKeys) {\n      let item = this.collection.getItem(key);\n      if (!last || item && (0, $jkhUT$compareNodeOrder)(this.collection, item, last) > 0) last = item;\n    }\n    return last === null || last === void 0 ? void 0 : last.key;\n  }\n  get disabledKeys() {\n    return this.state.disabledKeys;\n  }\n  get disabledBehavior() {\n    return this.state.disabledBehavior;\n  }\n  /**\n  * Extends the selection to the given key.\n  */\n  extendSelection(toKey) {\n    if (this.selectionMode === 'none') return;\n    if (this.selectionMode === 'single') {\n      this.replaceSelection(toKey);\n      return;\n    }\n    toKey = this.getKey(toKey);\n    let selection;\n    // Only select the one key if coming from a select all.\n    if (this.state.selectedKeys === 'all') selection = new (0, $e40ea825a81a3709$export$52baac22726c72bf)([toKey], toKey, toKey);else {\n      let selectedKeys = this.state.selectedKeys;\n      let anchorKey = selectedKeys.anchorKey || toKey;\n      selection = new (0, $e40ea825a81a3709$export$52baac22726c72bf)(selectedKeys, anchorKey, toKey);\n      for (let key of this.getKeyRange(anchorKey, selectedKeys.currentKey || toKey)) selection.delete(key);\n      for (let key of this.getKeyRange(toKey, anchorKey)) if (this.canSelectItem(key)) selection.add(key);\n    }\n    this.state.setSelectedKeys(selection);\n  }\n  getKeyRange(from, to) {\n    let fromItem = this.collection.getItem(from);\n    let toItem = this.collection.getItem(to);\n    if (fromItem && toItem) {\n      if ((0, $jkhUT$compareNodeOrder)(this.collection, fromItem, toItem) <= 0) return this.getKeyRangeInternal(from, to);\n      return this.getKeyRangeInternal(to, from);\n    }\n    return [];\n  }\n  getKeyRangeInternal(from, to) {\n    let keys = [];\n    let key = from;\n    while (key) {\n      let item = this.collection.getItem(key);\n      if (item && item.type === 'item' || item.type === 'cell' && this.allowsCellSelection) keys.push(key);\n      if (key === to) return keys;\n      key = this.collection.getKeyAfter(key);\n    }\n    return [];\n  }\n  getKey(key) {\n    let item = this.collection.getItem(key);\n    if (!item)\n      // ¯\\_(ツ)_/¯\n      return key;\n    // If cell selection is allowed, just return the key.\n    if (item.type === 'cell' && this.allowsCellSelection) return key;\n    // Find a parent item to select\n    while (item.type !== 'item' && item.parentKey != null) item = this.collection.getItem(item.parentKey);\n    if (!item || item.type !== 'item') return null;\n    return item.key;\n  }\n  /**\n  * Toggles whether the given key is selected.\n  */\n  toggleSelection(key) {\n    if (this.selectionMode === 'none') return;\n    if (this.selectionMode === 'single' && !this.isSelected(key)) {\n      this.replaceSelection(key);\n      return;\n    }\n    key = this.getKey(key);\n    if (key == null) return;\n    let keys = new (0, $e40ea825a81a3709$export$52baac22726c72bf)(this.state.selectedKeys === 'all' ? this.getSelectAllKeys() : this.state.selectedKeys);\n    if (keys.has(key)) keys.delete(key);else if (this.canSelectItem(key)) {\n      keys.add(key);\n      keys.anchorKey = key;\n      keys.currentKey = key;\n    }\n    if (this.disallowEmptySelection && keys.size === 0) return;\n    this.state.setSelectedKeys(keys);\n  }\n  /**\n  * Replaces the selection with only the given key.\n  */\n  replaceSelection(key) {\n    if (this.selectionMode === 'none') return;\n    key = this.getKey(key);\n    if (key == null) return;\n    let selection = this.canSelectItem(key) ? new (0, $e40ea825a81a3709$export$52baac22726c72bf)([key], key, key) : new (0, $e40ea825a81a3709$export$52baac22726c72bf)();\n    this.state.setSelectedKeys(selection);\n  }\n  /**\n  * Replaces the selection with the given keys.\n  */\n  setSelectedKeys(keys) {\n    if (this.selectionMode === 'none') return;\n    let selection = new (0, $e40ea825a81a3709$export$52baac22726c72bf)();\n    for (let key of keys) {\n      key = this.getKey(key);\n      if (key != null) {\n        selection.add(key);\n        if (this.selectionMode === 'single') break;\n      }\n    }\n    this.state.setSelectedKeys(selection);\n  }\n  getSelectAllKeys() {\n    let keys = [];\n    let addKeys = key => {\n      while (key != null) {\n        if (this.canSelectItem(key)) {\n          let item = this.collection.getItem(key);\n          if (item.type === 'item') keys.push(key);\n          // Add child keys. If cell selection is allowed, then include item children too.\n          if (item.hasChildNodes && (this.allowsCellSelection || item.type !== 'item')) addKeys((0, $jkhUT$getFirstItem)((0, $jkhUT$getChildNodes)(item, this.collection)).key);\n        }\n        key = this.collection.getKeyAfter(key);\n      }\n    };\n    addKeys(this.collection.getFirstKey());\n    return keys;\n  }\n  /**\n  * Selects all items in the collection.\n  */\n  selectAll() {\n    if (!this.isSelectAll && this.selectionMode === 'multiple') this.state.setSelectedKeys('all');\n  }\n  /**\n  * Removes all keys from the selection.\n  */\n  clearSelection() {\n    if (!this.disallowEmptySelection && (this.state.selectedKeys === 'all' || this.state.selectedKeys.size > 0)) this.state.setSelectedKeys(new (0, $e40ea825a81a3709$export$52baac22726c72bf)());\n  }\n  /**\n  * Toggles between select all and an empty selection.\n  */\n  toggleSelectAll() {\n    if (this.isSelectAll) this.clearSelection();else this.selectAll();\n  }\n  select(key, e) {\n    if (this.selectionMode === 'none') return;\n    if (this.selectionMode === 'single') {\n      if (this.isSelected(key) && !this.disallowEmptySelection) this.toggleSelection(key);else this.replaceSelection(key);\n    } else if (this.selectionBehavior === 'toggle' || e && (e.pointerType === 'touch' || e.pointerType === 'virtual'))\n      // if touch or virtual (VO) then we just want to toggle, otherwise it's impossible to multi select because they don't have modifier keys\n      this.toggleSelection(key);else this.replaceSelection(key);\n  }\n  /**\n  * Returns whether the current selection is equal to the given selection.\n  */\n  isSelectionEqual(selection) {\n    if (selection === this.state.selectedKeys) return true;\n    // Check if the set of keys match.\n    let selectedKeys = this.selectedKeys;\n    if (selection.size !== selectedKeys.size) return false;\n    for (let key of selection) {\n      if (!selectedKeys.has(key)) return false;\n    }\n    for (let key of selectedKeys) {\n      if (!selection.has(key)) return false;\n    }\n    return true;\n  }\n  canSelectItem(key) {\n    var _item_props;\n    if (this.state.selectionMode === 'none' || this.state.disabledKeys.has(key)) return false;\n    let item = this.collection.getItem(key);\n    if (!item || (item === null || item === void 0 ? void 0 : (_item_props = item.props) === null || _item_props === void 0 ? void 0 : _item_props.isDisabled) || item.type === 'cell' && !this.allowsCellSelection) return false;\n    return true;\n  }\n  isDisabled(key) {\n    var _this_collection_getItem_props, _this_collection_getItem;\n    return this.state.disabledBehavior === 'all' && (this.state.disabledKeys.has(key) || !!((_this_collection_getItem = this.collection.getItem(key)) === null || _this_collection_getItem === void 0 ? void 0 : (_this_collection_getItem_props = _this_collection_getItem.props) === null || _this_collection_getItem_props === void 0 ? void 0 : _this_collection_getItem_props.isDisabled));\n  }\n  isLink(key) {\n    var _this_collection_getItem_props, _this_collection_getItem;\n    return !!((_this_collection_getItem = this.collection.getItem(key)) === null || _this_collection_getItem === void 0 ? void 0 : (_this_collection_getItem_props = _this_collection_getItem.props) === null || _this_collection_getItem_props === void 0 ? void 0 : _this_collection_getItem_props.href);\n  }\n  getItemProps(key) {\n    var _this_collection_getItem;\n    return (_this_collection_getItem = this.collection.getItem(key)) === null || _this_collection_getItem === void 0 ? void 0 : _this_collection_getItem.props;\n  }\n  constructor(collection, state, options) {\n    this.collection = collection;\n    this.state = state;\n    var _options_allowsCellSelection;\n    this.allowsCellSelection = (_options_allowsCellSelection = options === null || options === void 0 ? void 0 : options.allowsCellSelection) !== null && _options_allowsCellSelection !== void 0 ? _options_allowsCellSelection : false;\n    this._isSelectAll = null;\n  }\n}\nexport { $d496c0a20b6e58ec$export$6c8a5aaad13c9852 as SelectionManager };","map":{"version":3,"mappings":";;;AAAA;;;;;;;;;;;;AAkCO,MAAMA;EAaX;;;EAGA,IAAIC,gBAA+B;IACjC,OAAO,IAAI,CAACC,KAAK,CAACD,aAAa;EACjC;EAEA;;;EAGA,IAAIE,yBAAkC;IACpC,OAAO,IAAI,CAACD,KAAK,CAACC,sBAAsB;EAC1C;EAEA;;;EAGA,IAAIC,oBAAuC;IACzC,OAAO,IAAI,CAACF,KAAK,CAACE,iBAAiB;EACrC;EAEA;;;EAGAC,qBAAqBD,iBAAoC,EAAE;IACzD,IAAI,CAACF,KAAK,CAACG,oBAAoB,CAACD;EAClC;EAEA;;;EAGA,IAAIE,YAAqB;IACvB,OAAO,IAAI,CAACJ,KAAK,CAACI,SAAS;EAC7B;EAEA;;;EAGAC,WAAWD,SAAkB,EAAE;IAC7B,IAAI,CAACJ,KAAK,CAACK,UAAU,CAACD;EACxB;EAEA;;;EAGA,IAAIE,aAAkB;IACpB,OAAO,IAAI,CAACN,KAAK,CAACM,UAAU;EAC9B;EAEA;EACA,IAAIC,qBAAoC;IACtC,OAAO,IAAI,CAACP,KAAK,CAACO,kBAAkB;EACtC;EAEA;;;EAGAC,cAAcC,GAAe,EAAEF,kBAAkC,EAAE;IACjE,IAAIE,OAAO,QAAQ,IAAI,CAACC,UAAU,CAACC,OAAO,CAACF,MACzC,IAAI,CAACT,KAAK,CAACQ,aAAa,CAACC,KAAKF;EAElC;EAEA;;;EAGA,IAAIK,eAAyB;IAC3B,OAAO,IAAI,CAACZ,KAAK,CAACY,YAAY,KAAK,QAC/B,IAAIC,IAAI,IAAI,CAACC,gBAAgB,MAC7B,IAAI,CAACd,KAAK,CAACY,YAAY;EAC7B;EAEA;;;;EAIA,IAAIG,eAA2B;IAC7B,OAAO,IAAI,CAACf,KAAK,CAACY,YAAY;EAChC;EAEA;;;EAGAI,WAAWP,GAAQ,EAAE;IACnB,IAAI,IAAI,CAACT,KAAK,CAACD,aAAa,KAAK,QAC/B,OAAO;IAGTU,MAAM,IAAI,CAACQ,MAAM,CAACR;IAClB,OAAO,IAAI,CAACT,KAAK,CAACY,YAAY,KAAK,QAC/B,IAAI,CAACM,aAAa,CAACT,OACnB,IAAI,CAACT,KAAK,CAACY,YAAY,CAACO,GAAG,CAACV;EAClC;EAEA;;;EAGA,IAAIW,UAAmB;IACrB,OAAO,IAAI,CAACpB,KAAK,CAACY,YAAY,KAAK,SAAS,IAAI,CAACZ,KAAK,CAACY,YAAY,CAACS,IAAI,KAAK;EAC/E;EAEA;;;EAGA,IAAIC,cAAuB;IACzB,IAAI,IAAI,CAACF,OAAO,EACd,OAAO;IAGT,IAAI,IAAI,CAACpB,KAAK,CAACY,YAAY,KAAK,OAC9B,OAAO;IAGT,IAAI,IAAI,CAACW,YAAY,IAAI,MACvB,OAAO,IAAI,CAACA,YAAY;IAG1B,IAAIC,UAAU,IAAI,CAACV,gBAAgB;IACnC,IAAIF,eAAe,IAAI,CAACZ,KAAK,CAACY,YAAY;IAC1C,IAAI,CAACW,YAAY,GAAGC,QAAQC,KAAK,CAACC,KAAKd,aAAaO,GAAG,CAACO;IACxD,OAAO,IAAI,CAACH,YAAY;EAC1B;EAEA,IAAII,mBAA+B;IACjC,IAAIC,QAA8B;IAClC,KAAK,IAAInB,OAAO,IAAI,CAACT,KAAK,CAACY,YAAY,EAAE;MACvC,IAAIiB,OAAO,IAAI,CAACnB,UAAU,CAACC,OAAO,CAACF;MACnC,IAAI,CAACmB,SAAUC,QAAQ,2BAAe,EAAE,IAAI,CAACnB,UAAU,EAAEmB,MAAMD,SAAS,GACtEA,QAAQC;IAEZ;IAEA,OAAOD,oDAAOnB,GAAG;EACnB;EAEA,IAAIqB,kBAA8B;IAChC,IAAIC,OAA6B;IACjC,KAAK,IAAItB,OAAO,IAAI,CAACT,KAAK,CAACY,YAAY,EAAE;MACvC,IAAIiB,OAAO,IAAI,CAACnB,UAAU,CAACC,OAAO,CAACF;MACnC,IAAI,CAACsB,QAASF,QAAQ,2BAAe,EAAE,IAAI,CAACnB,UAAU,EAAEmB,MAAME,QAAQ,GACpEA,OAAOF;IAEX;IAEA,OAAOE,iDAAMtB,GAAG;EAClB;EAEA,IAAIuB,eAAyB;IAC3B,OAAO,IAAI,CAAChC,KAAK,CAACgC,YAAY;EAChC;EAEA,IAAIC,mBAAqC;IACvC,OAAO,IAAI,CAACjC,KAAK,CAACiC,gBAAgB;EACpC;EAEA;;;EAGAC,gBAAgBC,KAAU,EAAE;IAC1B,IAAI,IAAI,CAACpC,aAAa,KAAK,QACzB;IAGF,IAAI,IAAI,CAACA,aAAa,KAAK,UAAU;MACnC,IAAI,CAACqC,gBAAgB,CAACD;MACtB;IACF;IAEAA,QAAQ,IAAI,CAAClB,MAAM,CAACkB;IAEpB,IAAIE;IAEJ;IACA,IAAI,IAAI,CAACrC,KAAK,CAACY,YAAY,KAAK,OAC9ByB,YAAY,KAAI,4CAAQ,EAAE,CAACF,MAAM,EAAEA,OAAOA,YACrC;MACL,IAAIvB,eAAe,IAAI,CAACZ,KAAK,CAACY,YAAY;MAC1C,IAAI0B,YAAY1B,aAAa0B,SAAS,IAAIH;MAC1CE,YAAY,KAAI,4CAAQ,EAAEzB,cAAc0B,WAAWH;MACnD,KAAK,IAAI1B,OAAO,IAAI,CAAC8B,WAAW,CAACD,WAAW1B,aAAa4B,UAAU,IAAIL,QACrEE,UAAUI,MAAM,CAAChC;MAGnB,KAAK,IAAIA,OAAO,IAAI,CAAC8B,WAAW,CAACJ,OAAOG,YACtC,IAAI,IAAI,CAACpB,aAAa,CAACT,MACrB4B,UAAUK,GAAG,CAACjC;IAGpB;IAEA,IAAI,CAACT,KAAK,CAAC2C,eAAe,CAACN;EAC7B;EAEQE,YAAYK,IAAS,EAAEC,EAAO,EAAE;IACtC,IAAIC,WAAW,IAAI,CAACpC,UAAU,CAACC,OAAO,CAACiC;IACvC,IAAIG,SAAS,IAAI,CAACrC,UAAU,CAACC,OAAO,CAACkC;IACrC,IAAIC,YAAYC,QAAQ;MACtB,IAAI,2BAAe,EAAE,IAAI,CAACrC,UAAU,EAAEoC,UAAUC,WAAW,GACzD,OAAO,IAAI,CAACC,mBAAmB,CAACJ,MAAMC;MAGxC,OAAO,IAAI,CAACG,mBAAmB,CAACH,IAAID;IACtC;IAEA,OAAO,EAAE;EACX;EAEQI,oBAAoBJ,IAAS,EAAEC,EAAO,EAAE;IAC9C,IAAII,OAAc,EAAE;IACpB,IAAIxC,MAAMmC;IACV,OAAOnC,KAAK;MACV,IAAIoB,OAAO,IAAI,CAACnB,UAAU,CAACC,OAAO,CAACF;MACnC,IAAIoB,QAAQA,KAAKqB,IAAI,KAAK,UAAWrB,KAAKqB,IAAI,KAAK,UAAU,IAAI,CAACC,mBAAmB,EACnFF,KAAKG,IAAI,CAAC3C;MAGZ,IAAIA,QAAQoC,IACV,OAAOI;MAGTxC,MAAM,IAAI,CAACC,UAAU,CAAC2C,WAAW,CAAC5C;IACpC;IAEA,OAAO,EAAE;EACX;EAEQQ,OAAOR,GAAQ,EAAE;IACvB,IAAIoB,OAAO,IAAI,CAACnB,UAAU,CAACC,OAAO,CAACF;IACnC,IAAI,CAACoB;MACH;MACA,OAAOpB;IAGT;IACA,IAAIoB,KAAKqB,IAAI,KAAK,UAAU,IAAI,CAACC,mBAAmB,EAClD,OAAO1C;IAGT;IACA,OAAOoB,KAAKqB,IAAI,KAAK,UAAUrB,KAAKyB,SAAS,IAAI,MAC/CzB,OAAO,IAAI,CAACnB,UAAU,CAACC,OAAO,CAACkB,KAAKyB,SAAS;IAG/C,IAAI,CAACzB,QAAQA,KAAKqB,IAAI,KAAK,QACzB,OAAO;IAGT,OAAOrB,KAAKpB,GAAG;EACjB;EAEA;;;EAGA8C,gBAAgB9C,GAAQ,EAAE;IACxB,IAAI,IAAI,CAACV,aAAa,KAAK,QACzB;IAGF,IAAI,IAAI,CAACA,aAAa,KAAK,YAAY,CAAC,IAAI,CAACiB,UAAU,CAACP,MAAM;MAC5D,IAAI,CAAC2B,gBAAgB,CAAC3B;MACtB;IACF;IAEAA,MAAM,IAAI,CAACQ,MAAM,CAACR;IAClB,IAAIA,OAAO,MACT;IAGF,IAAIwC,OAAO,KAAI,4CAAQ,EAAE,IAAI,CAACjD,KAAK,CAACY,YAAY,KAAK,QAAQ,IAAI,CAACE,gBAAgB,KAAK,IAAI,CAACd,KAAK,CAACY,YAAY;IAC9G,IAAIqC,KAAK9B,GAAG,CAACV,MACXwC,KAAKR,MAAM,CAAChC,UAGP,IAAI,IAAI,CAACS,aAAa,CAACT,MAAM;MAClCwC,KAAKP,GAAG,CAACjC;MACTwC,KAAKX,SAAS,GAAG7B;MACjBwC,KAAKT,UAAU,GAAG/B;IACpB;IAEA,IAAI,IAAI,CAACR,sBAAsB,IAAIgD,KAAK5B,IAAI,KAAK,GAC/C;IAGF,IAAI,CAACrB,KAAK,CAAC2C,eAAe,CAACM;EAC7B;EAEA;;;EAGAb,iBAAiB3B,GAAQ,EAAE;IACzB,IAAI,IAAI,CAACV,aAAa,KAAK,QACzB;IAGFU,MAAM,IAAI,CAACQ,MAAM,CAACR;IAClB,IAAIA,OAAO,MACT;IAGF,IAAI4B,YAAY,IAAI,CAACnB,aAAa,CAACT,OAC/B,KAAI,4CAAQ,EAAE,CAACA,IAAI,EAAEA,KAAKA,OAC1B,KAAI,4CAAQ;IAEhB,IAAI,CAACT,KAAK,CAAC2C,eAAe,CAACN;EAC7B;EAEA;;;EAGAM,gBAAgBM,IAAmB,EAAE;IACnC,IAAI,IAAI,CAAClD,aAAa,KAAK,QACzB;IAGF,IAAIsC,YAAY,KAAI,4CAAQ;IAC5B,KAAK,IAAI5B,OAAOwC,MAAM;MACpBxC,MAAM,IAAI,CAACQ,MAAM,CAACR;MAClB,IAAIA,OAAO,MAAM;QACf4B,UAAUK,GAAG,CAACjC;QACd,IAAI,IAAI,CAACV,aAAa,KAAK,UACzB;MAEJ;IACF;IAEA,IAAI,CAACC,KAAK,CAAC2C,eAAe,CAACN;EAC7B;EAEQvB,mBAAmB;IACzB,IAAImC,OAAc,EAAE;IACpB,IAAIO,UAAW/C;MACb,OAAOA,OAAO,MAAM;QAClB,IAAI,IAAI,CAACS,aAAa,CAACT,MAAM;UAC3B,IAAIoB,OAAO,IAAI,CAACnB,UAAU,CAACC,OAAO,CAACF;UACnC,IAAIoB,KAAKqB,IAAI,KAAK,QAChBD,KAAKG,IAAI,CAAC3C;UAGZ;UACA,IAAIoB,KAAK4B,aAAa,KAAK,IAAI,CAACN,mBAAmB,IAAItB,KAAKqB,IAAI,KAAK,MAAK,GACxEM,QAAQ,uBAAW,EAAE,wBAAY,EAAE3B,MAAM,IAAI,CAACnB,UAAU,GAAGD,GAAG;QAElE;QAEAA,MAAM,IAAI,CAACC,UAAU,CAAC2C,WAAW,CAAC5C;MACpC;IACF;IAEA+C,QAAQ,IAAI,CAAC9C,UAAU,CAACgD,WAAW;IACnC,OAAOT;EACT;EAEA;;;EAGAU,YAAY;IACV,IAAI,CAAC,IAAI,CAACrC,WAAW,IAAI,IAAI,CAACvB,aAAa,KAAK,YAC9C,IAAI,CAACC,KAAK,CAAC2C,eAAe,CAAC;EAE/B;EAEA;;;EAGAiB,iBAAiB;IACf,IAAI,CAAC,IAAI,CAAC3D,sBAAsB,KAAK,IAAI,CAACD,KAAK,CAACY,YAAY,KAAK,SAAS,IAAI,CAACZ,KAAK,CAACY,YAAY,CAACS,IAAI,GAAG,IACvG,IAAI,CAACrB,KAAK,CAAC2C,eAAe,CAAC,KAAI,4CAAQ;EAE3C;EAEA;;;EAGAkB,kBAAkB;IAChB,IAAI,IAAI,CAACvC,WAAW,EAClB,IAAI,CAACsC,cAAc,QAEnB,IAAI,CAACD,SAAS;EAElB;EAEAG,OAAOrD,GAAQ,EAAEsD,CAA8C,EAAE;IAC/D,IAAI,IAAI,CAAChE,aAAa,KAAK,QACzB;IAGF,IAAI,IAAI,CAACA,aAAa,KAAK;MACzB,IAAI,IAAI,CAACiB,UAAU,CAACP,QAAQ,CAAC,IAAI,CAACR,sBAAsB,EACtD,IAAI,CAACsD,eAAe,CAAC9C,UAErB,IAAI,CAAC2B,gBAAgB,CAAC3B;WAEnB,IAAI,IAAI,CAACP,iBAAiB,KAAK,YAAa6D,MAAMA,EAAEC,WAAW,KAAK,WAAWD,EAAEC,WAAW,KAAK,SAAQ;MAC9G;MACA,IAAI,CAACT,eAAe,CAAC9C,UAErB,IAAI,CAAC2B,gBAAgB,CAAC3B;EAE1B;EAEA;;;EAGAwD,iBAAiB5B,SAAmB,EAAE;IACpC,IAAIA,cAAc,IAAI,CAACrC,KAAK,CAACY,YAAY,EACvC,OAAO;IAGT;IACA,IAAIA,eAAe,IAAI,CAACA,YAAY;IACpC,IAAIyB,UAAUhB,IAAI,KAAKT,aAAaS,IAAI,EACtC,OAAO;IAGT,KAAK,IAAIZ,OAAO4B,WAAW;MACzB,IAAI,CAACzB,aAAaO,GAAG,CAACV,MACpB,OAAO;IAEX;IAEA,KAAK,IAAIA,OAAOG,cAAc;MAC5B,IAAI,CAACyB,UAAUlB,GAAG,CAACV,MACjB,OAAO;IAEX;IAEA,OAAO;EACT;EAEAS,cAAcT,GAAQ,EAAE;QAMTyD;IALb,IAAI,IAAI,CAAClE,KAAK,CAACD,aAAa,KAAK,UAAU,IAAI,CAACC,KAAK,CAACgC,YAAY,CAACb,GAAG,CAACV,MACrE,OAAO;IAGT,IAAIoB,OAAO,IAAI,CAACnB,UAAU,CAACC,OAAO,CAACF;IACnC,IAAI,CAACoB,SAAQA,gEAAMsC,KAAK,cAAXD,8CAAaE,UAAU,KAAKvC,KAAKqB,IAAI,KAAK,UAAU,CAAC,IAAI,CAACC,mBAAmB,EACxF,OAAO;IAGT,OAAO;EACT;EAEAiB,WAAW3D,GAAQ,EAAE;QACoE4D;IAAvF,OAAO,IAAI,CAACrE,KAAK,CAACiC,gBAAgB,KAAK,UAAU,IAAI,CAACjC,KAAK,CAACgC,YAAY,CAACb,GAAG,CAACV,QAAQ,CAAC,GAAC6D,+BAAI,CAAC5D,UAAU,CAACC,OAAO,CAACF,kBAAxB6D,0GAA8BH,KAAK,cAAnCE,oFAAqCD,UAAU,CAAD;EACvI;EAEAG,OAAO9D,GAAQ,EAAE;QACN4D;IAAT,OAAO,CAAC,GAACC,+BAAI,CAAC5D,UAAU,CAACC,OAAO,CAACF,kBAAxB6D,0GAA8BH,KAAK,cAAnCE,oFAAqCG,IAAI;EACpD;EAEAC,aAAahE,GAAQ,EAAE;QACd6D;IAAP,QAAOA,+BAAI,CAAC5D,UAAU,CAACC,OAAO,CAACF,kBAAxB6D,wEAA8BH,KAAK;EAC5C;EA3cAO,YAAYhE,UAAqC,EAAEV,KAA6B,EAAE2E,OAAiC,EAAE;IACnH,IAAI,CAACjE,UAAU,GAAGA;IAClB,IAAI,CAACV,KAAK,GAAGA;QACc4E;IAA3B,IAAI,CAACzB,mBAAmB,GAAG,0FAASA,mBAAmB,cAA5ByB,yEAAgC;IAC3D,IAAI,CAACrD,YAAY,GAAG;EACtB;AAucF","names":["$d496c0a20b6e58ec$export$6c8a5aaad13c9852","selectionMode","state","disallowEmptySelection","selectionBehavior","setSelectionBehavior","isFocused","setFocused","focusedKey","childFocusStrategy","setFocusedKey","key","collection","getItem","selectedKeys","Set","getSelectAllKeys","rawSelection","isSelected","getKey","canSelectItem","has","isEmpty","size","isSelectAll","_isSelectAll","allKeys","every","k","firstSelectedKey","first","item","lastSelectedKey","last","disabledKeys","disabledBehavior","extendSelection","toKey","replaceSelection","selection","anchorKey","getKeyRange","currentKey","delete","add","setSelectedKeys","from","to","fromItem","toItem","getKeyRangeInternal","keys","type","allowsCellSelection","push","getKeyAfter","parentKey","toggleSelection","addKeys","hasChildNodes","getFirstKey","selectAll","clearSelection","toggleSelectAll","select","e","pointerType","isSelectionEqual","_item_props","props","isDisabled","_this_collection_getItem_props","_this_collection_getItem","isLink","href","getItemProps","constructor","options","_options_allowsCellSelection"],"sources":["D:\\Like, for real projects\\React-Todo-List-V2\\node_modules\\@react-stately\\selection\\dist\\packages\\@react-stately\\selection\\src\\SelectionManager.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  Collection, DisabledBehavior,\n  FocusStrategy,\n  Selection as ISelection,\n  Key,\n  LongPressEvent,\n  Node,\n  PressEvent,\n  SelectionBehavior,\n  SelectionMode\n} from '@react-types/shared';\nimport {compareNodeOrder, getChildNodes, getFirstItem} from '@react-stately/collections';\nimport {MultipleSelectionManager, MultipleSelectionState} from './types';\nimport {Selection} from './Selection';\n\ninterface SelectionManagerOptions {\n  allowsCellSelection?: boolean\n}\n\n/**\n * An interface for reading and updating multiple selection state.\n */\nexport class SelectionManager implements MultipleSelectionManager {\n  private collection: Collection<Node<unknown>>;\n  private state: MultipleSelectionState;\n  private allowsCellSelection: boolean;\n  private _isSelectAll: boolean;\n\n  constructor(collection: Collection<Node<unknown>>, state: MultipleSelectionState, options?: SelectionManagerOptions) {\n    this.collection = collection;\n    this.state = state;\n    this.allowsCellSelection = options?.allowsCellSelection ?? false;\n    this._isSelectAll = null;\n  }\n\n  /**\n   * The type of selection that is allowed in the collection.\n   */\n  get selectionMode(): SelectionMode {\n    return this.state.selectionMode;\n  }\n\n  /**\n   * Whether the collection allows empty selection.\n   */\n  get disallowEmptySelection(): boolean {\n    return this.state.disallowEmptySelection;\n  }\n\n  /**\n   * The selection behavior for the collection.\n   */\n  get selectionBehavior(): SelectionBehavior {\n    return this.state.selectionBehavior;\n  }\n\n  /**\n   * Sets the selection behavior for the collection.\n   */\n  setSelectionBehavior(selectionBehavior: SelectionBehavior) {\n    this.state.setSelectionBehavior(selectionBehavior);\n  }\n\n  /**\n   * Whether the collection is currently focused.\n   */\n  get isFocused(): boolean {\n    return this.state.isFocused;\n  }\n\n  /**\n   * Sets whether the collection is focused.\n   */\n  setFocused(isFocused: boolean) {\n    this.state.setFocused(isFocused);\n  }\n\n  /**\n   * The current focused key in the collection.\n   */\n  get focusedKey(): Key {\n    return this.state.focusedKey;\n  }\n\n  /** Whether the first or last child of the focused key should receive focus. */\n  get childFocusStrategy(): FocusStrategy {\n    return this.state.childFocusStrategy;\n  }\n\n  /**\n   * Sets the focused key.\n   */\n  setFocusedKey(key: Key | null, childFocusStrategy?: FocusStrategy) {\n    if (key == null || this.collection.getItem(key)) {\n      this.state.setFocusedKey(key, childFocusStrategy);\n    }\n  }\n\n  /**\n   * The currently selected keys in the collection.\n   */\n  get selectedKeys(): Set<Key> {\n    return this.state.selectedKeys === 'all'\n      ? new Set(this.getSelectAllKeys())\n      : this.state.selectedKeys;\n  }\n\n  /**\n   * The raw selection value for the collection.\n   * Either 'all' for select all, or a set of keys.\n   */\n  get rawSelection(): ISelection {\n    return this.state.selectedKeys;\n  }\n\n  /**\n   * Returns whether a key is selected.\n   */\n  isSelected(key: Key) {\n    if (this.state.selectionMode === 'none') {\n      return false;\n    }\n\n    key = this.getKey(key);\n    return this.state.selectedKeys === 'all'\n      ? this.canSelectItem(key)\n      : this.state.selectedKeys.has(key);\n  }\n\n  /**\n   * Whether the selection is empty.\n   */\n  get isEmpty(): boolean {\n    return this.state.selectedKeys !== 'all' && this.state.selectedKeys.size === 0;\n  }\n\n  /**\n   * Whether all items in the collection are selected.\n   */\n  get isSelectAll(): boolean {\n    if (this.isEmpty) {\n      return false;\n    }\n\n    if (this.state.selectedKeys === 'all') {\n      return true;\n    }\n\n    if (this._isSelectAll != null) {\n      return this._isSelectAll;\n    }\n\n    let allKeys = this.getSelectAllKeys();\n    let selectedKeys = this.state.selectedKeys;\n    this._isSelectAll = allKeys.every(k => selectedKeys.has(k));\n    return this._isSelectAll;\n  }\n\n  get firstSelectedKey(): Key | null {\n    let first: Node<unknown> | null = null;\n    for (let key of this.state.selectedKeys) {\n      let item = this.collection.getItem(key);\n      if (!first || (item && compareNodeOrder(this.collection, item, first) < 0)) {\n        first = item;\n      }\n    }\n\n    return first?.key;\n  }\n\n  get lastSelectedKey(): Key | null {\n    let last: Node<unknown> | null = null;\n    for (let key of this.state.selectedKeys) {\n      let item = this.collection.getItem(key);\n      if (!last || (item && compareNodeOrder(this.collection, item, last) > 0)) {\n        last = item;\n      }\n    }\n\n    return last?.key;\n  }\n\n  get disabledKeys(): Set<Key> {\n    return this.state.disabledKeys;\n  }\n\n  get disabledBehavior(): DisabledBehavior {\n    return this.state.disabledBehavior;\n  }\n\n  /**\n   * Extends the selection to the given key.\n   */\n  extendSelection(toKey: Key) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    if (this.selectionMode === 'single') {\n      this.replaceSelection(toKey);\n      return;\n    }\n\n    toKey = this.getKey(toKey);\n\n    let selection: Selection;\n\n    // Only select the one key if coming from a select all.\n    if (this.state.selectedKeys === 'all') {\n      selection = new Selection([toKey], toKey, toKey);\n    } else {\n      let selectedKeys = this.state.selectedKeys as Selection;\n      let anchorKey = selectedKeys.anchorKey || toKey;\n      selection = new Selection(selectedKeys, anchorKey, toKey);\n      for (let key of this.getKeyRange(anchorKey, selectedKeys.currentKey || toKey)) {\n        selection.delete(key);\n      }\n\n      for (let key of this.getKeyRange(toKey, anchorKey)) {\n        if (this.canSelectItem(key)) {\n          selection.add(key);\n        }\n      }\n    }\n\n    this.state.setSelectedKeys(selection);\n  }\n\n  private getKeyRange(from: Key, to: Key) {\n    let fromItem = this.collection.getItem(from);\n    let toItem = this.collection.getItem(to);\n    if (fromItem && toItem) {\n      if (compareNodeOrder(this.collection, fromItem, toItem) <= 0) {\n        return this.getKeyRangeInternal(from, to);\n      }\n\n      return this.getKeyRangeInternal(to, from);\n    }\n\n    return [];\n  }\n\n  private getKeyRangeInternal(from: Key, to: Key) {\n    let keys: Key[] = [];\n    let key = from;\n    while (key) {\n      let item = this.collection.getItem(key);\n      if (item && item.type === 'item' || (item.type === 'cell' && this.allowsCellSelection)) {\n        keys.push(key);\n      }\n\n      if (key === to) {\n        return keys;\n      }\n\n      key = this.collection.getKeyAfter(key);\n    }\n\n    return [];\n  }\n\n  private getKey(key: Key) {\n    let item = this.collection.getItem(key);\n    if (!item) {\n      // ¯\\_(ツ)_/¯\n      return key;\n    }\n\n    // If cell selection is allowed, just return the key.\n    if (item.type === 'cell' && this.allowsCellSelection) {\n      return key;\n    }\n\n    // Find a parent item to select\n    while (item.type !== 'item' && item.parentKey != null) {\n      item = this.collection.getItem(item.parentKey);\n    }\n\n    if (!item || item.type !== 'item') {\n      return null;\n    }\n\n    return item.key;\n  }\n\n  /**\n   * Toggles whether the given key is selected.\n   */\n  toggleSelection(key: Key) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    if (this.selectionMode === 'single' && !this.isSelected(key)) {\n      this.replaceSelection(key);\n      return;\n    }\n\n    key = this.getKey(key);\n    if (key == null) {\n      return;\n    }\n\n    let keys = new Selection(this.state.selectedKeys === 'all' ? this.getSelectAllKeys() : this.state.selectedKeys);\n    if (keys.has(key)) {\n      keys.delete(key);\n      // TODO: move anchor to last selected key...\n      // Does `current` need to move here too?\n    } else if (this.canSelectItem(key)) {\n      keys.add(key);\n      keys.anchorKey = key;\n      keys.currentKey = key;\n    }\n\n    if (this.disallowEmptySelection && keys.size === 0) {\n      return;\n    }\n\n    this.state.setSelectedKeys(keys);\n  }\n\n  /**\n   * Replaces the selection with only the given key.\n   */\n  replaceSelection(key: Key) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    key = this.getKey(key);\n    if (key == null) {\n      return;\n    }\n\n    let selection = this.canSelectItem(key)\n      ? new Selection([key], key, key)\n      : new Selection();\n\n    this.state.setSelectedKeys(selection);\n  }\n\n  /**\n   * Replaces the selection with the given keys.\n   */\n  setSelectedKeys(keys: Iterable<Key>) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    let selection = new Selection();\n    for (let key of keys) {\n      key = this.getKey(key);\n      if (key != null) {\n        selection.add(key);\n        if (this.selectionMode === 'single') {\n          break;\n        }\n      }\n    }\n\n    this.state.setSelectedKeys(selection);\n  }\n\n  private getSelectAllKeys() {\n    let keys: Key[] = [];\n    let addKeys = (key: Key) => {\n      while (key != null) {\n        if (this.canSelectItem(key)) {\n          let item = this.collection.getItem(key);\n          if (item.type === 'item') {\n            keys.push(key);\n          }\n\n          // Add child keys. If cell selection is allowed, then include item children too.\n          if (item.hasChildNodes && (this.allowsCellSelection || item.type !== 'item')) {\n            addKeys(getFirstItem(getChildNodes(item, this.collection)).key);\n          }\n        }\n\n        key = this.collection.getKeyAfter(key);\n      }\n    };\n\n    addKeys(this.collection.getFirstKey());\n    return keys;\n  }\n\n  /**\n   * Selects all items in the collection.\n   */\n  selectAll() {\n    if (!this.isSelectAll && this.selectionMode === 'multiple') {\n      this.state.setSelectedKeys('all');\n    }\n  }\n\n  /**\n   * Removes all keys from the selection.\n   */\n  clearSelection() {\n    if (!this.disallowEmptySelection && (this.state.selectedKeys === 'all' || this.state.selectedKeys.size > 0)) {\n      this.state.setSelectedKeys(new Selection());\n    }\n  }\n\n  /**\n   * Toggles between select all and an empty selection.\n   */\n  toggleSelectAll() {\n    if (this.isSelectAll) {\n      this.clearSelection();\n    } else {\n      this.selectAll();\n    }\n  }\n\n  select(key: Key, e?: PressEvent | LongPressEvent | PointerEvent) {\n    if (this.selectionMode === 'none') {\n      return;\n    }\n\n    if (this.selectionMode === 'single') {\n      if (this.isSelected(key) && !this.disallowEmptySelection) {\n        this.toggleSelection(key);\n      } else {\n        this.replaceSelection(key);\n      }\n    } else if (this.selectionBehavior === 'toggle' || (e && (e.pointerType === 'touch' || e.pointerType === 'virtual'))) {\n      // if touch or virtual (VO) then we just want to toggle, otherwise it's impossible to multi select because they don't have modifier keys\n      this.toggleSelection(key);\n    } else {\n      this.replaceSelection(key);\n    }\n  }\n\n  /**\n   * Returns whether the current selection is equal to the given selection.\n   */\n  isSelectionEqual(selection: Set<Key>) {\n    if (selection === this.state.selectedKeys) {\n      return true;\n    }\n\n    // Check if the set of keys match.\n    let selectedKeys = this.selectedKeys;\n    if (selection.size !== selectedKeys.size) {\n      return false;\n    }\n\n    for (let key of selection) {\n      if (!selectedKeys.has(key)) {\n        return false;\n      }\n    }\n\n    for (let key of selectedKeys) {\n      if (!selection.has(key)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  canSelectItem(key: Key) {\n    if (this.state.selectionMode === 'none' || this.state.disabledKeys.has(key)) {\n      return false;\n    }\n\n    let item = this.collection.getItem(key);\n    if (!item || item?.props?.isDisabled || (item.type === 'cell' && !this.allowsCellSelection)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  isDisabled(key: Key) {\n    return this.state.disabledBehavior === 'all' && (this.state.disabledKeys.has(key) || !!this.collection.getItem(key)?.props?.isDisabled);\n  }\n\n  isLink(key: Key) {\n    return !!this.collection.getItem(key)?.props?.href;\n  }\n\n  getItemProps(key: Key) {\n    return this.collection.getItem(key)?.props;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}