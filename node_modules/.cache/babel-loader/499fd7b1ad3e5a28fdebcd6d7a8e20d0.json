{"ast":null,"code":"import $kh5JA$intlStringsmodulejs from \"./intlStrings.mjs\";\nimport { useDescription as $kh5JA$useDescription } from \"@react-aria/utils\";\nimport { useInteractionModality as $kh5JA$useInteractionModality } from \"@react-aria/interactions\";\nimport { useLocalizedStringFormatter as $kh5JA$useLocalizedStringFormatter } from \"@react-aria/i18n\";\nimport { useMemo as $kh5JA$useMemo } from \"react\";\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $5b9b5b5723db6ae1$export$be42ebdab07ae4c2(props) {\n  let stringFormatter = (0, $kh5JA$useLocalizedStringFormatter)((0, $parcel$interopDefault($kh5JA$intlStringsmodulejs)), '@react-aria/grid');\n  let modality = (0, $kh5JA$useInteractionModality)();\n  // null is the default if the user hasn't interacted with the table at all yet or the rest of the page\n  let shouldLongPress = (modality === 'pointer' || modality === 'virtual' || modality == null) && typeof window !== 'undefined' && 'ontouchstart' in window;\n  let interactionDescription = (0, $kh5JA$useMemo)(() => {\n    let selectionMode = props.selectionManager.selectionMode;\n    let selectionBehavior = props.selectionManager.selectionBehavior;\n    let message = undefined;\n    if (shouldLongPress) message = stringFormatter.format('longPressToSelect');\n    return selectionBehavior === 'replace' && selectionMode !== 'none' && props.hasItemActions ? message : undefined;\n  }, [props.selectionManager.selectionMode, props.selectionManager.selectionBehavior, props.hasItemActions, stringFormatter, shouldLongPress]);\n  let descriptionProps = (0, $kh5JA$useDescription)(interactionDescription);\n  return descriptionProps;\n}\nexport { $5b9b5b5723db6ae1$export$be42ebdab07ae4c2 as useHighlightSelectionDescription };","map":{"version":3,"mappings":";;;;;;;;AAAA;;;;;;;;;;;;AA8BO,SAASA,0CAAiCC,KAAyC;EACxF,IAAIC,kBAAkB,sCAA0B,GAAE,qDAAW,GAAG;EAChE,IAAIC,WAAW,iCAAqB;EACpC;EACA,IAAIC,kBAAkB,CAACD,aAAa,aAAaA,aAAa,aAAaA,YAAY,IAAG,KACrF,OAAOE,WAAW,eAAe,kBAAkBA;EAExD,IAAIC,yBAAyB,kBAAM,EAAE;IACnC,IAAIC,gBAAgBN,MAAMO,gBAAgB,CAACD,aAAa;IACxD,IAAIE,oBAAoBR,MAAMO,gBAAgB,CAACC,iBAAiB;IAEhE,IAAIC,UAAUC;IACd,IAAIP,iBACFM,UAAUR,gBAAgBU,MAAM,CAAC;IAGnC,OAAOH,sBAAsB,aAAaF,kBAAkB,UAAUN,MAAMY,cAAc,GAAGH,UAAUC;EACzG,GAAG,CAACV,MAAMO,gBAAgB,CAACD,aAAa,EAAEN,MAAMO,gBAAgB,CAACC,iBAAiB,EAAER,MAAMY,cAAc,EAAEX,iBAAiBE,gBAAgB;EAE3I,IAAIU,mBAAmB,yBAAa,EAAER;EACtC,OAAOQ;AACT","names":["$5b9b5b5723db6ae1$export$be42ebdab07ae4c2","props","stringFormatter","modality","shouldLongPress","window","interactionDescription","selectionMode","selectionManager","selectionBehavior","message","undefined","format","hasItemActions","descriptionProps"],"sources":["D:\\Like, for real projects\\React-Todo-List-V2\\node_modules\\@react-aria\\grid\\dist\\packages\\@react-aria\\grid\\src\\useHighlightSelectionDescription.ts"],"sourcesContent":["/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaLabelingProps} from '@react-types/shared';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport {MultipleSelectionManager} from '@react-stately/selection';\nimport {useDescription} from '@react-aria/utils';\nimport {useInteractionModality} from '@react-aria/interactions';\nimport {useLocalizedStringFormatter} from '@react-aria/i18n';\nimport {useMemo} from 'react';\n\nexport interface HighlightSelectionDescriptionProps {\n  selectionManager: MultipleSelectionManager,\n  hasItemActions?: boolean\n}\n\n/**\n * Computes the description for a grid selectable collection.\n * @param props\n */\nexport function useHighlightSelectionDescription(props: HighlightSelectionDescriptionProps): AriaLabelingProps {\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-aria/grid');\n  let modality = useInteractionModality();\n  // null is the default if the user hasn't interacted with the table at all yet or the rest of the page\n  let shouldLongPress = (modality === 'pointer' || modality === 'virtual' || modality == null)\n    && typeof window !== 'undefined' && 'ontouchstart' in window;\n\n  let interactionDescription = useMemo(() => {\n    let selectionMode = props.selectionManager.selectionMode;\n    let selectionBehavior = props.selectionManager.selectionBehavior;\n\n    let message = undefined;\n    if (shouldLongPress) {\n      message = stringFormatter.format('longPressToSelect');\n    }\n\n    return selectionBehavior === 'replace' && selectionMode !== 'none' && props.hasItemActions ? message : undefined;\n  }, [props.selectionManager.selectionMode, props.selectionManager.selectionBehavior, props.hasItemActions, stringFormatter, shouldLongPress]);\n\n  let descriptionProps = useDescription(interactionDescription);\n  return descriptionProps;\n}\n"]},"metadata":{},"sourceType":"module"}