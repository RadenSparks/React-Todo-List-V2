{"ast":null,"code":"import { filterDOMProps as $ieN2F$filterDOMProps, mergeProps as $ieN2F$mergeProps } from \"@react-aria/utils\";\nimport { useSelectableList as $ieN2F$useSelectableList } from \"@react-aria/selection\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nconst $d5336fe17ce95402$export$6f49b4016bfc8d56 = new WeakMap();\nfunction $d5336fe17ce95402$export$38eaa17faae8f579(props, state, ref) {\n  let {\n    shouldFocusWrap = true,\n    onKeyDown: onKeyDown,\n    onKeyUp: onKeyUp,\n    ...otherProps\n  } = props;\n  if (!props['aria-label'] && !props['aria-labelledby']) console.warn('An aria-label or aria-labelledby prop is required for accessibility.');\n  let domProps = (0, $ieN2F$filterDOMProps)(props, {\n    labelable: true\n  });\n  let {\n    listProps: listProps\n  } = (0, $ieN2F$useSelectableList)({\n    ...otherProps,\n    ref: ref,\n    selectionManager: state.selectionManager,\n    collection: state.collection,\n    disabledKeys: state.disabledKeys,\n    shouldFocusWrap: shouldFocusWrap,\n    linkBehavior: 'override'\n  });\n  $d5336fe17ce95402$export$6f49b4016bfc8d56.set(state, {\n    onClose: props.onClose,\n    onAction: props.onAction\n  });\n  return {\n    menuProps: (0, $ieN2F$mergeProps)(domProps, {\n      onKeyDown: onKeyDown,\n      onKeyUp: onKeyUp\n    }, {\n      role: 'menu',\n      ...listProps,\n      onKeyDown: e => {\n        // don't clear the menu selected keys if the user is presses escape since escape closes the menu\n        if (e.key !== 'Escape') listProps.onKeyDown(e);\n      }\n    })\n  };\n}\nexport { $d5336fe17ce95402$export$6f49b4016bfc8d56 as menuData, $d5336fe17ce95402$export$38eaa17faae8f579 as useMenu };","map":{"version":3,"mappings":";;;AAAA;;;;;;;;;;;;AAwCO,MAAMA,4CAAW,IAAIC;AAQrB,SAASC,0CAAWC,KAAyB,EAAEC,KAAmB,EAAEC,GAA2B;EACpG,IAAI;IACFC,kBAAkB;IAAAC,WAClBA,SAAS;IAAAC,SACTA,OAAO;IACP,GAAGC;EAAA,CACJ,GAAGN;EAEJ,IAAI,CAACA,KAAK,CAAC,aAAa,IAAI,CAACA,KAAK,CAAC,kBAAkB,EACnDO,QAAQC,IAAI,CAAC;EAGf,IAAIC,WAAW,yBAAa,EAAET,OAAO;IAACU,WAAW;EAAI;EACrD,IAAI;IAAAC,WAACA;EAAS,CAAC,GAAG,4BAAgB,EAAE;IAClC,GAAGL,UAAU;SACbJ;IACAU,kBAAkBX,MAAMW,gBAAgB;IACxCC,YAAYZ,MAAMY,UAAU;IAC5BC,cAAcb,MAAMa,YAAY;qBAChCX;IACAY,cAAc;EAChB;EAEAlB,0CAASmB,GAAG,CAACf,OAAO;IAClBgB,SAASjB,MAAMiB,OAAO;IACtBC,UAAUlB,MAAMkB;EAClB;EAEA,OAAO;IACLC,WAAW,qBAAS,EAAEV,UAAU;iBAACL;eAAWC;IAAO,GAAG;MACpDe,MAAM;MACN,GAAGT,SAAS;MACZP,WAAYiB;QACV;QACA,IAAIA,EAAEC,GAAG,KAAK,UACZX,UAAUP,SAAS,CAACiB;MAExB;IACF;EACF;AACF","names":["$d5336fe17ce95402$export$6f49b4016bfc8d56","WeakMap","$d5336fe17ce95402$export$38eaa17faae8f579","props","state","ref","shouldFocusWrap","onKeyDown","onKeyUp","otherProps","console","warn","domProps","labelable","listProps","selectionManager","collection","disabledKeys","linkBehavior","set","onClose","onAction","menuProps","role","e","key"],"sources":["D:\\Like, for real projects\\React-Todo-List-V2\\node_modules\\@react-aria\\menu\\dist\\packages\\@react-aria\\menu\\src\\useMenu.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaMenuProps} from '@react-types/menu';\nimport {DOMAttributes, Key, KeyboardDelegate, KeyboardEvents} from '@react-types/shared';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {RefObject} from 'react';\nimport {TreeState} from '@react-stately/tree';\nimport {useSelectableList} from '@react-aria/selection';\n\nexport interface MenuAria {\n  /** Props for the menu element. */\n  menuProps: DOMAttributes\n}\n\nexport interface AriaMenuOptions<T> extends Omit<AriaMenuProps<T>, 'children'>, KeyboardEvents {\n  /** Whether the menu uses virtual scrolling. */\n  isVirtualized?: boolean,\n\n  /**\n   * An optional keyboard delegate implementation for type to select,\n   * to override the default.\n   */\n  keyboardDelegate?: KeyboardDelegate\n}\n\ninterface MenuData {\n  onClose?: () => void,\n  onAction?: (key: Key) => void\n}\n\nexport const menuData = new WeakMap<TreeState<unknown>, MenuData>();\n\n/**\n * Provides the behavior and accessibility implementation for a menu component.\n * A menu displays a list of actions or options that a user can choose.\n * @param props - Props for the menu.\n * @param state - State for the menu, as returned by `useListState`.\n */\nexport function useMenu<T>(props: AriaMenuOptions<T>, state: TreeState<T>, ref: RefObject<HTMLElement>): MenuAria {\n  let {\n    shouldFocusWrap = true,\n    onKeyDown,\n    onKeyUp,\n    ...otherProps\n  } = props;\n\n  if (!props['aria-label'] && !props['aria-labelledby']) {\n    console.warn('An aria-label or aria-labelledby prop is required for accessibility.');\n  }\n\n  let domProps = filterDOMProps(props, {labelable: true});\n  let {listProps} = useSelectableList({\n    ...otherProps,\n    ref,\n    selectionManager: state.selectionManager,\n    collection: state.collection,\n    disabledKeys: state.disabledKeys,\n    shouldFocusWrap,\n    linkBehavior: 'override'\n  });\n\n  menuData.set(state, {\n    onClose: props.onClose,\n    onAction: props.onAction\n  });\n\n  return {\n    menuProps: mergeProps(domProps, {onKeyDown, onKeyUp}, {\n      role: 'menu',\n      ...listProps,\n      onKeyDown: (e) => {\n        // don't clear the menu selected keys if the user is presses escape since escape closes the menu\n        if (e.key !== 'Escape') {\n          listProps.onKeyDown(e);\n        }\n      }\n    })\n  };\n}\n"]},"metadata":{},"sourceType":"module"}