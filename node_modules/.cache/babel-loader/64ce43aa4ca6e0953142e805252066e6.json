{"ast":null,"code":"import { gridMap as $1af922eb41e03c8f$export$e6235c0d09b995d0 } from \"./utils.mjs\";\nimport { chain as $kA5if$chain } from \"@react-aria/utils\";\nimport { useSelectableItem as $kA5if$useSelectableItem } from \"@react-aria/selection\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $4159a7a9cbb0cc18$export$96357d5a73f686fa(props, state, ref) {\n  var _node_props, _node_props1;\n  let {\n    node: node,\n    isVirtualized: isVirtualized,\n    shouldSelectOnPressUp: shouldSelectOnPressUp,\n    onAction: onAction\n  } = props;\n  let {\n    actions: actions\n  } = (0, $1af922eb41e03c8f$export$e6235c0d09b995d0).get(state);\n  let onRowAction = actions.onRowAction ? () => actions.onRowAction(node.key) : onAction;\n  let {\n    itemProps: itemProps,\n    ...states\n  } = (0, $kA5if$useSelectableItem)({\n    selectionManager: state.selectionManager,\n    key: node.key,\n    ref: ref,\n    isVirtualized: isVirtualized,\n    shouldSelectOnPressUp: shouldSelectOnPressUp,\n    onAction: onRowAction || (node === null || node === void 0 ? void 0 : (_node_props = node.props) === null || _node_props === void 0 ? void 0 : _node_props.onAction) ? (0, $kA5if$chain)(node === null || node === void 0 ? void 0 : (_node_props1 = node.props) === null || _node_props1 === void 0 ? void 0 : _node_props1.onAction, onRowAction) : undefined,\n    isDisabled: state.collection.size === 0\n  });\n  let isSelected = state.selectionManager.isSelected(node.key);\n  let rowProps = {\n    role: 'row',\n    'aria-selected': state.selectionManager.selectionMode !== 'none' ? isSelected : undefined,\n    'aria-disabled': states.isDisabled || undefined,\n    ...itemProps\n  };\n  if (isVirtualized) rowProps['aria-rowindex'] = node.index + 1; // aria-rowindex is 1 based\n  return {\n    rowProps: rowProps,\n    ...states\n  };\n}\nexport { $4159a7a9cbb0cc18$export$96357d5a73f686fa as useGridRow };","map":{"version":3,"mappings":";;;;AAAA;;;;;;;;;;;;AA8CO,SAASA,0CAAsEC,KAAsB,EAAEC,KAAQ,EAAEC,GAAuC;MAgBlIC,aAA8BC;EAfzD,IAAI;IAAAC,MACFA,IAAI;IAAAC,eACJA,aAAa;IAAAC,uBACbA,qBAAqB;IAAAC,UACrBA;EAAQ,CACT,GAAGR;EAEJ,IAAI;IAAAS,SAACA;EAAO,CAAC,GAAG,6CAAM,EAAEC,GAAG,CAACT;EAC5B,IAAIU,cAAcF,QAAQE,WAAW,GAAG,MAAMF,QAAQE,WAAW,CAACN,KAAKO,GAAG,IAAIJ;EAC9E,IAAI;IAAAK,WAACA,SAAS;IAAE,GAAGC;EAAA,CAAO,GAAG,4BAAgB,EAAE;IAC7CC,kBAAkBd,MAAMc,gBAAgB;IACxCH,KAAKP,KAAKO,GAAG;SACbV;mBACAI;2BACAC;IACAC,UAAUG,gBAAeN,gEAAML,KAAK,cAAXG,8CAAaK,QAAQ,IAAG,gBAAI,EAAEH,iEAAML,KAAK,cAAXI,gDAAaI,QAAQ,EAAEG,eAAeK;IAC7FC,YAAYhB,MAAMiB,UAAU,CAACC,IAAI,KAAK;EACxC;EAEA,IAAIC,aAAanB,MAAMc,gBAAgB,CAACK,UAAU,CAACf,KAAKO,GAAG;EAE3D,IAAIS,WAA0B;IAC5BC,MAAM;IACN,iBAAiBrB,MAAMc,gBAAgB,CAACQ,aAAa,KAAK,SAASH,aAAaJ;IAChF,iBAAiBF,OAAOG,UAAU,IAAID;IACtC,GAAGH;EACL;EAEA,IAAIP,eACFe,QAAQ,CAAC,gBAAgB,GAAGhB,KAAKmB,KAAK,GAAG,GAAG;EAG9C,OAAO;cACLH;IACA,GAAGP;EACL;AACF","names":["$4159a7a9cbb0cc18$export$96357d5a73f686fa","props","state","ref","_node_props","_node_props1","node","isVirtualized","shouldSelectOnPressUp","onAction","actions","get","onRowAction","key","itemProps","states","selectionManager","undefined","isDisabled","collection","size","isSelected","rowProps","role","selectionMode","index"],"sources":["D:\\Like, for real projects\\React-Todo-List-V2\\node_modules\\@react-aria\\grid\\dist\\packages\\@react-aria\\grid\\src\\useGridRow.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {chain} from '@react-aria/utils';\nimport {DOMAttributes, FocusableElement, RefObject} from '@react-types/shared';\nimport {GridCollection, GridNode} from '@react-types/grid';\nimport {gridMap} from './utils';\nimport {GridState} from '@react-stately/grid';\nimport {SelectableItemStates, useSelectableItem} from '@react-aria/selection';\n\nexport interface GridRowProps<T> {\n  /** An object representing the grid row. Contains all the relevant information that makes up the grid row. */\n  node: GridNode<T>,\n  /** Whether the grid row is contained in a virtual scroller. */\n  isVirtualized?: boolean,\n  /** Whether selection should occur on press up instead of press down. */\n  shouldSelectOnPressUp?: boolean,\n  /**\n   * Handler that is called when a user performs an action on the row.\n   * Please use onCellAction at the collection level instead.\n   * @deprecated\n   **/\n  onAction?: () => void\n}\n\nexport interface GridRowAria extends SelectableItemStates {\n  /** Props for the grid row element. */\n  rowProps: DOMAttributes,\n  /** Whether the row is currently in a pressed state. */\n  isPressed: boolean\n}\n\n/**\n * Provides the behavior and accessibility implementation for a row in a grid.\n * @param props - Props for the row.\n * @param state - State of the parent grid, as returned by `useGridState`.\n */\nexport function useGridRow<T, C extends GridCollection<T>, S extends GridState<T, C>>(props: GridRowProps<T>, state: S, ref: RefObject<FocusableElement | null>): GridRowAria {\n  let {\n    node,\n    isVirtualized,\n    shouldSelectOnPressUp,\n    onAction\n  } = props;\n\n  let {actions} = gridMap.get(state);\n  let onRowAction = actions.onRowAction ? () => actions.onRowAction(node.key) : onAction;\n  let {itemProps, ...states} = useSelectableItem({\n    selectionManager: state.selectionManager,\n    key: node.key,\n    ref,\n    isVirtualized,\n    shouldSelectOnPressUp,\n    onAction: onRowAction || node?.props?.onAction ? chain(node?.props?.onAction, onRowAction) : undefined,\n    isDisabled: state.collection.size === 0\n  });\n\n  let isSelected = state.selectionManager.isSelected(node.key);\n\n  let rowProps: DOMAttributes = {\n    role: 'row',\n    'aria-selected': state.selectionManager.selectionMode !== 'none' ? isSelected : undefined,\n    'aria-disabled': states.isDisabled || undefined,\n    ...itemProps\n  };\n\n  if (isVirtualized) {\n    rowProps['aria-rowindex'] = node.index + 1; // aria-rowindex is 1 based\n  }\n\n  return {\n    rowProps,\n    ...states\n  };\n}\n"]},"metadata":{},"sourceType":"module"}