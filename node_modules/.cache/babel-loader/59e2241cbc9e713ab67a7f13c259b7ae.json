{"ast":null,"code":"var _jsxFileName = \"D:\\\\Like, for real projects\\\\React-Todo-List-V2\\\\src\\\\components\\\\ToDo.jsx\";\nimport React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCircleCheck, faPen, faTrashCan } from '@fortawesome/free-solid-svg-icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ToDo = _ref => {\n  let {\n    toDo,\n    markDone,\n    setUpdateData,\n    deleteTask\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: toDo && toDo.length > 0 ? toDo.sort((a, b) => a.id - b.id) // Sort tasks by their IDs in ascending order\n    .map((task, index) => {\n      // Format the createdAt timestamp into a readable string\n      const createdAt = new Date(task.createdAt).toLocaleString();\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col taskBg\",\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: task.status ? 'done' : '',\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"taskNumber\",\n            children: index + 1\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 19\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"taskText\",\n            children: task.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 19\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"taskCreatedAt\",\n            children: [\" (Created: \", createdAt, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 19\n          }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"taskPriority\",\n            children: [\" (Priority: \", task.priority, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 19\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"iconsWrap\",\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n            title: \"Completed / Not Completed\",\n            onClick: () => markDone(task.id) // Call markDone with task ID on click\n            ,\n            \"aria-label\": `Mark ${task.status ? 'not completed' : 'completed'}: ${task.title}`,\n            children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n              icon: faCircleCheck\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 31,\n              columnNumber: 21\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 19\n          }, this), !task.status &&\n          /*#__PURE__*/\n          // If task is not done, show edit icon\n          _jsxDEV(\"span\", {\n            title: \"Edit\",\n            onClick: () => setUpdateData(task) // Call setUpdateData with the task to edit\n            ,\n            \"aria-label\": `Edit task: ${task.title}`,\n            children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n              icon: faPen\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 23\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            title: \"Delete\",\n            onClick: () => deleteTask(task.id) // Call deleteTask with task ID on click\n            ,\n            \"aria-label\": `Delete task: ${task.title}`,\n            children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n              icon: faTrashCan\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 21\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 17\n        }, this)]\n      }, task.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 15\n      }, this);\n    }) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No tasks available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this) // Message when no tasks are present\n  }, void 0, false);\n};\n_c = ToDo;\nexport default ToDo; // Exports the ToDo component for use in other parts of the application\nvar _c;\n$RefreshReg$(_c, \"ToDo\");","map":{"version":3,"names":["React","FontAwesomeIcon","faCircleCheck","faPen","faTrashCan","jsxDEV","_jsxDEV","Fragment","_Fragment","ToDo","_ref","toDo","markDone","setUpdateData","deleteTask","children","length","sort","a","b","id","map","task","index","createdAt","Date","toLocaleString","className","status","fileName","_jsxFileName","lineNumber","columnNumber","title","priority","onClick","icon","_c","$RefreshReg$"],"sources":["D:/Like, for real projects/React-Todo-List-V2/src/components/ToDo.jsx"],"sourcesContent":["import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n  faCircleCheck, faPen, faTrashCan\r\n} from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst ToDo = ({ toDo, markDone, setUpdateData, deleteTask }) => {\r\n  return (\r\n    <>\r\n      {toDo && toDo.length > 0 ? (\r\n        toDo\r\n          .sort((a, b) => a.id - b.id) // Sort tasks by their IDs in ascending order\r\n          .map((task, index) => {\r\n            // Format the createdAt timestamp into a readable string\r\n            const createdAt = new Date(task.createdAt).toLocaleString();\r\n\r\n            return (\r\n              <div className=\"col taskBg\" key={task.id}> {/* Use task ID as the key */}\r\n                <div className={task.status ? 'done' : ''}> {/* Apply 'done' class if task is completed */}\r\n                  <span className=\"taskNumber\">{index + 1}</span> {/* Display task number */}\r\n                  <span className=\"taskText\">{task.title}</span> {/* Display task title */}\r\n                  <span className=\"taskCreatedAt\"> (Created: {createdAt})</span> {/* Display creation time */}\r\n                  <span className=\"taskPriority\"> (Priority: {task.priority})</span> {/* Display priority */}\r\n                </div>\r\n                <div className=\"iconsWrap\"> {/* Wrapper for action icons */}\r\n                  <span \r\n                    title=\"Completed / Not Completed\"\r\n                    onClick={() => markDone(task.id)} // Call markDone with task ID on click\r\n                    aria-label={`Mark ${task.status ? 'not completed' : 'completed'}: ${task.title}`}\r\n                  >\r\n                    <FontAwesomeIcon icon={faCircleCheck} /> {/* Check icon for marking task done */}\r\n                  </span>\r\n\r\n                  {!task.status && ( // If task is not done, show edit icon\r\n                    <span \r\n                      title=\"Edit\"\r\n                      onClick={() => setUpdateData(task)} // Call setUpdateData with the task to edit\r\n                      aria-label={`Edit task: ${task.title}`}\r\n                    >\r\n                      <FontAwesomeIcon icon={faPen} /> {/* Edit icon */}\r\n                    </span>\r\n                  )}\r\n\r\n                  <span \r\n                    title=\"Delete\"\r\n                    onClick={() => deleteTask(task.id)} // Call deleteTask with task ID on click\r\n                    aria-label={`Delete task: ${task.title}`}\r\n                  >\r\n                    <FontAwesomeIcon icon={faTrashCan} /> {/* Trash icon for deleting task */}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            );\r\n          })\r\n      ) : (\r\n        <div>No tasks available.</div> // Message when no tasks are present\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ToDo; // Exports the ToDo component for use in other parts of the application\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}