{"ast":null,"code":"var _jsxFileName = \"D:\\\\Like, for real projects\\\\React-Todo-List-V2\\\\src\\\\components\\\\ToDo.jsx\";\nimport React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCircleCheck, faPen, faTrashCan } from '@fortawesome/free-solid-svg-icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ToDo = _ref => {\n  let {\n    toDo,\n    markDone,\n    setUpdateData,\n    deleteTask\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: toDo && toDo // Check if toDo exists\n    .sort((a, b) => a.id > b.id ? 1 : -1) // Sort tasks by their IDs in ascending order\n    .map((task, index) => {\n      // Iterate over each task\n      // Format the createdAt timestamp into a readable string\n      const createdAt = new Date(task.createdAt).toLocaleString();\n      return /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col taskBg\",\n          children: [\" \", /*#__PURE__*/_jsxDEV(\"div\", {\n            className: task.status ? 'done' : '',\n            children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"taskNumber\",\n              children: index + 1\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 20,\n              columnNumber: 19\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"taskText\",\n              children: task.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 21,\n              columnNumber: 19\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"taskCreatedAt\",\n              children: [\" (Created: \", createdAt, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 22,\n              columnNumber: 19\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"taskPriority\",\n              children: [\" (Priority: \", task.priority, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 23,\n              columnNumber: 19\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 19,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"iconsWrap\",\n            children: [\" \", /*#__PURE__*/_jsxDEV(\"span\", {\n              title: \"Completed / Not Completed\",\n              onClick: () => markDone(task.id) // Call markDone with task ID on click\n              ,\n              children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                icon: faCircleCheck\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 29,\n                columnNumber: 21\n              }, this), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 26,\n              columnNumber: 19\n            }, this), task.status ? null :\n            /*#__PURE__*/\n            // If task is not done, show edit icon\n            _jsxDEV(\"span\", {\n              title: \"Edit\",\n              onClick: () => setUpdateData(task) // Call setUpdateData with the task to edit\n              ,\n              children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                icon: faPen\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 36,\n                columnNumber: 23\n              }, this), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 33,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              title: \"Delete\",\n              onClick: () => deleteTask(task.id) // Call deleteTask with task ID on click\n              ,\n              children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                icon: faTrashCan\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 43,\n                columnNumber: 21\n              }, this), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 15\n        }, this)]\n      }, task.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 13\n      }, this);\n    })\n  }, void 0, false);\n};\n_c = ToDo;\nexport default ToDo; // Exports the ToDo component for use in other parts of the application\nvar _c;\n$RefreshReg$(_c, \"ToDo\");","map":{"version":3,"names":["React","FontAwesomeIcon","faCircleCheck","faPen","faTrashCan","jsxDEV","_jsxDEV","Fragment","_Fragment","ToDo","_ref","toDo","markDone","setUpdateData","deleteTask","children","sort","a","b","id","map","task","index","createdAt","Date","toLocaleString","className","status","fileName","_jsxFileName","lineNumber","columnNumber","title","priority","onClick","icon","_c","$RefreshReg$"],"sources":["D:/Like, for real projects/React-Todo-List-V2/src/components/ToDo.jsx"],"sourcesContent":["import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n  faCircleCheck, faPen, faTrashCan\r\n} from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst ToDo = ({ toDo, markDone, setUpdateData, deleteTask }) => {\r\n  return (\r\n    <>\r\n      {toDo && toDo // Check if toDo exists\r\n        .sort((a, b) => a.id > b.id ? 1 : -1) // Sort tasks by their IDs in ascending order\r\n        .map((task, index) => { // Iterate over each task\r\n          // Format the createdAt timestamp into a readable string\r\n          const createdAt = new Date(task.createdAt).toLocaleString();\r\n\r\n          return (\r\n            <React.Fragment key={task.id}> {/* Use task ID as the key for each fragment */}\r\n              <div className=\"col taskBg\"> {/* Column for task background */}\r\n                <div className={task.status ? 'done' : ''}> {/* Apply 'done' class if task is completed */}\r\n                  <span className=\"taskNumber\">{index + 1}</span> {/* Display task number */}\r\n                  <span className=\"taskText\">{task.title}</span> {/* Display task title */}\r\n                  <span className=\"taskCreatedAt\"> (Created: {createdAt})</span> {/* Display creation time */}\r\n                  <span className=\"taskPriority\"> (Priority: {task.priority})</span> {/* Display priority */}\r\n                </div>\r\n                <div className=\"iconsWrap\"> {/* Wrapper for action icons */}\r\n                  <span title=\"Completed / Not Completed\"\r\n                    onClick={() => markDone(task.id)} // Call markDone with task ID on click\r\n                  >\r\n                    <FontAwesomeIcon icon={faCircleCheck} /> {/* Check icon for marking task done */}\r\n                  </span>\r\n\r\n                  {task.status ? null : ( // If task is not done, show edit icon\r\n                    <span title=\"Edit\"\r\n                      onClick={() => setUpdateData(task)} // Call setUpdateData with the task to edit\r\n                    >\r\n                      <FontAwesomeIcon icon={faPen} /> {/* Edit icon */}\r\n                    </span>\r\n                  )}\r\n\r\n                  <span title=\"Delete\"\r\n                    onClick={() => deleteTask(task.id)} // Call deleteTask with task ID on click\r\n                  >\r\n                    <FontAwesomeIcon icon={faTrashCan} /> {/* Trash icon for deleting task */}\r\n                  </span>\r\n                </div>\r\n              </div>\r\n            </React.Fragment>\r\n          );\r\n        })\r\n      }\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ToDo; // Exports the ToDo component for use in other parts of the application\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}