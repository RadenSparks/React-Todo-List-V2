{"ast":null,"code":"import { useOverlayTriggerState as $8bn9m$useOverlayTriggerState } from \"@react-stately/overlays\";\nimport { useState as $8bn9m$useState } from \"react\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $a28c903ee9ad8dc5$export$79fefeb1c2091ac3(props) {\n  let overlayTriggerState = (0, $8bn9m$useOverlayTriggerState)(props);\n  let [focusStrategy, setFocusStrategy] = (0, $8bn9m$useState)(null);\n  let [expandedKeysStack, setExpandedKeysStack] = (0, $8bn9m$useState)([]);\n  let closeAll = () => {\n    setExpandedKeysStack([]);\n    overlayTriggerState.close();\n  };\n  let openSubmenu = (triggerKey, level) => {\n    setExpandedKeysStack(oldStack => {\n      if (level > oldStack.length) return oldStack;\n      return [...oldStack.slice(0, level), triggerKey];\n    });\n  };\n  let closeSubmenu = (triggerKey, level) => {\n    setExpandedKeysStack(oldStack => {\n      let key = oldStack[level];\n      if (key === triggerKey) return oldStack.slice(0, level);else return oldStack;\n    });\n  };\n  return {\n    focusStrategy: focusStrategy,\n    ...overlayTriggerState,\n    open() {\n      let focusStrategy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      setFocusStrategy(focusStrategy);\n      overlayTriggerState.open();\n    },\n    toggle() {\n      let focusStrategy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      setFocusStrategy(focusStrategy);\n      overlayTriggerState.toggle();\n    },\n    close() {\n      closeAll();\n    },\n    expandedKeysStack: expandedKeysStack,\n    openSubmenu: openSubmenu,\n    closeSubmenu: closeSubmenu\n  };\n}\nexport { $a28c903ee9ad8dc5$export$79fefeb1c2091ac3 as useMenuTriggerState };","map":{"version":3,"mappings":";;;AAAA;;;;;;;;;;;;AAiDO,SAASA,0CAAoBC,KAAuB;EACzD,IAAIC,sBAAsB,iCAAqB,EAAED;EACjD,IAAI,CAACE,eAAeC,iBAAiB,GAAG,mBAAO,EAAiB;EAChE,IAAI,CAACC,mBAAmBC,qBAAqB,GAAG,mBAAO,EAAS,EAAE;EAElE,IAAIC,WAAWA;IACbD,qBAAqB,EAAE;IACvBJ,oBAAoBM,KAAK;EAC3B;EAEA,IAAIC,cAAcA,CAACC,YAAiBC;IAClCL,qBAAqBM;MACnB,IAAID,QAAQC,SAASC,MAAM,EACzB,OAAOD;MAGT,OAAO,IAAIA,SAASE,KAAK,CAAC,GAAGH,QAAQD,WAAW;IAClD;EACF;EAEA,IAAIK,eAAeA,CAACL,YAAiBC;IACnCL,qBAAqBM;MACnB,IAAII,MAAMJ,QAAQ,CAACD,MAAM;MACzB,IAAIK,QAAQN,YACV,OAAOE,SAASE,KAAK,CAAC,GAAGH,YAEzB,OAAOC;IAEX;EACF;EAEA,OAAO;mBACLT;IACA,GAAGD,mBAAmB;IACtBe,OAAwC;MAAA,IAAnCd,oFAA+B,IAAI;MACtCC,iBAAiBD;MACjBD,oBAAoBe,IAAI;IAC1B;IACAC,SAA0C;MAAA,IAAnCf,oFAA+B,IAAI;MACxCC,iBAAiBD;MACjBD,oBAAoBgB,MAAM;IAC5B;IACAV;MACED;IACF;uBACAF;iBACAI;kBACAM;EACF;AACF","names":["$a28c903ee9ad8dc5$export$79fefeb1c2091ac3","props","overlayTriggerState","focusStrategy","setFocusStrategy","expandedKeysStack","setExpandedKeysStack","closeAll","close","openSubmenu","triggerKey","level","oldStack","length","slice","closeSubmenu","key","open","toggle"],"sources":["D:\\Like, for real projects\\React-Todo-List-V2\\node_modules\\@react-stately\\menu\\dist\\packages\\@react-stately\\menu\\src\\useMenuTriggerState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusStrategy, Key} from '@react-types/shared';\nimport {MenuTriggerProps} from '@react-types/menu';\nimport {OverlayTriggerState, useOverlayTriggerState} from '@react-stately/overlays';\nimport {useState} from 'react';\n\nexport interface MenuTriggerState extends OverlayTriggerState {\n  /** Controls which item will be auto focused when the menu opens. */\n  readonly focusStrategy: FocusStrategy,\n\n  /** Opens the menu. */\n  open(focusStrategy?: FocusStrategy | null): void,\n\n  /** Toggles the menu. */\n  toggle(focusStrategy?: FocusStrategy | null): void\n}\n\nexport interface RootMenuTriggerState extends MenuTriggerState {\n  /** Opens a specific submenu tied to a specific menu item at a specific level. */\n  openSubmenu: (triggerKey: Key, level: number) => void,\n\n  /** Closes a specific submenu tied to a specific menu item at a specific level. */\n  closeSubmenu: (triggerKey: Key, level: number) => void,\n\n  /** An array of open submenu trigger keys within the menu tree.\n   * The index of key within array matches the submenu level in the tree.\n   */\n  expandedKeysStack: Key[],\n\n  /** Closes the menu and all submenus in the menu tree. */\n  close: () => void\n}\n\n/**\n * Manages state for a menu trigger. Tracks whether the menu is currently open,\n * and controls which item will receive focus when it opens. Also tracks the open submenus within\n * the menu tree via their trigger keys.\n */\nexport function useMenuTriggerState(props: MenuTriggerProps): RootMenuTriggerState  {\n  let overlayTriggerState = useOverlayTriggerState(props);\n  let [focusStrategy, setFocusStrategy] = useState<FocusStrategy>(null);\n  let [expandedKeysStack, setExpandedKeysStack] = useState<Key[]>([]);\n\n  let closeAll = () => {\n    setExpandedKeysStack([]);\n    overlayTriggerState.close();\n  };\n\n  let openSubmenu = (triggerKey: Key, level: number) => {\n    setExpandedKeysStack(oldStack => {\n      if (level > oldStack.length) {\n        return oldStack;\n      }\n\n      return [...oldStack.slice(0, level), triggerKey];\n    });\n  };\n\n  let closeSubmenu = (triggerKey: Key, level: number) => {\n    setExpandedKeysStack(oldStack => {\n      let key = oldStack[level];\n      if (key === triggerKey) {\n        return oldStack.slice(0, level);\n      } else {\n        return oldStack;\n      }\n    });\n  };\n\n  return {\n    focusStrategy,\n    ...overlayTriggerState,\n    open(focusStrategy: FocusStrategy = null) {\n      setFocusStrategy(focusStrategy);\n      overlayTriggerState.open();\n    },\n    toggle(focusStrategy: FocusStrategy = null) {\n      setFocusStrategy(focusStrategy);\n      overlayTriggerState.toggle();\n    },\n    close() {\n      closeAll();\n    },\n    expandedKeysStack,\n    openSubmenu,\n    closeSubmenu\n  };\n}\n"]},"metadata":{},"sourceType":"module"}