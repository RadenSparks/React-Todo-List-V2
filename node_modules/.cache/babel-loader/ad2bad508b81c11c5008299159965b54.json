{"ast":null,"code":"import { onCloseMap as $dd149f63282afbbf$export$f6211563215e3b37 } from \"./useCloseOnScroll.mjs\";\nimport { useEffect as $gMvIk$useEffect } from \"react\";\nimport { useId as $gMvIk$useId } from \"@react-aria/utils\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $628037886ba31236$export$f9d5c8beee7d008d(props, state, ref) {\n  let {\n    type: type\n  } = props;\n  let {\n    isOpen: isOpen\n  } = state;\n  // Backward compatibility. Share state close function with useOverlayPosition so it can close on scroll\n  // without forcing users to pass onClose.\n  (0, $gMvIk$useEffect)(() => {\n    if (ref && ref.current) (0, $dd149f63282afbbf$export$f6211563215e3b37).set(ref.current, state.close);\n  });\n  // Aria 1.1 supports multiple values for aria-haspopup other than just menus.\n  // https://www.w3.org/TR/wai-aria-1.1/#aria-haspopup\n  // However, we only add it for menus for now because screen readers often\n  // announce it as a menu even for other values.\n  let ariaHasPopup = undefined;\n  if (type === 'menu') ariaHasPopup = true;else if (type === 'listbox') ariaHasPopup = 'listbox';\n  let overlayId = (0, $gMvIk$useId)();\n  return {\n    triggerProps: {\n      'aria-haspopup': ariaHasPopup,\n      'aria-expanded': isOpen,\n      'aria-controls': isOpen ? overlayId : null,\n      onPress: state.toggle\n    },\n    overlayProps: {\n      id: overlayId\n    }\n  };\n}\nexport { $628037886ba31236$export$f9d5c8beee7d008d as useOverlayTrigger };","map":{"version":3,"mappings":";;;;AAAA;;;;;;;;;;;;AAoCO,SAASA,0CAAkBC,KAA0B,EAAEC,KAA0B,EAAEC,GAAwB;EAChH,IAAI;IAAAC,MAACA;EAAI,CAAC,GAAGH;EACb,IAAI;IAAAI,QAACA;EAAM,CAAC,GAAGH;EAEf;EACA;EACA,oBAAQ,EAAE;IACR,IAAIC,OAAOA,IAAIG,OAAO,EACpB,6CAAS,EAAEC,GAAG,CAACJ,IAAIG,OAAO,EAAEJ,MAAMM,KAAK;EAE3C;EAEA;EACA;EACA;EACA;EACA,IAAIC,eAAeC;EACnB,IAAIN,SAAS,QACXK,eAAe,UACV,IAAIL,SAAS,WAClBK,eAAe;EAGjB,IAAIE,YAAY,gBAAI;EACpB,OAAO;IACLC,cAAc;MACZ,iBAAiBH;MACjB,iBAAiBJ;MACjB,iBAAiBA,SAASM,YAAY;MACtCE,SAASX,MAAMY;IACjB;IACAC,cAAc;MACZC,IAAIL;IACN;EACF;AACF","names":["$628037886ba31236$export$f9d5c8beee7d008d","props","state","ref","type","isOpen","current","set","close","ariaHasPopup","undefined","overlayId","triggerProps","onPress","toggle","overlayProps","id"],"sources":["D:\\Like, for real projects\\React-Todo-List-V2\\node_modules\\@react-aria\\overlays\\dist\\packages\\@react-aria\\overlays\\src\\useOverlayTrigger.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaButtonProps} from '@react-types/button';\nimport {DOMProps} from '@react-types/shared';\nimport {onCloseMap} from './useCloseOnScroll';\nimport {OverlayTriggerState} from '@react-stately/overlays';\nimport {RefObject, useEffect} from 'react';\nimport {useId} from '@react-aria/utils';\n\nexport interface OverlayTriggerProps {\n  /** Type of overlay that is opened by the trigger. */\n  type: 'dialog' | 'menu' | 'listbox' | 'tree' | 'grid'\n}\n\nexport interface OverlayTriggerAria {\n  /** Props for the trigger element. */\n  triggerProps: AriaButtonProps,\n\n  /** Props for the overlay container element. */\n  overlayProps: DOMProps\n}\n\n/**\n * Handles the behavior and accessibility for an overlay trigger, e.g. a button\n * that opens a popover, menu, or other overlay that is positioned relative to the trigger.\n */\nexport function useOverlayTrigger(props: OverlayTriggerProps, state: OverlayTriggerState, ref?: RefObject<Element>): OverlayTriggerAria {\n  let {type} = props;\n  let {isOpen} = state;\n\n  // Backward compatibility. Share state close function with useOverlayPosition so it can close on scroll\n  // without forcing users to pass onClose.\n  useEffect(() => {\n    if (ref && ref.current) {\n      onCloseMap.set(ref.current, state.close);\n    }\n  });\n\n  // Aria 1.1 supports multiple values for aria-haspopup other than just menus.\n  // https://www.w3.org/TR/wai-aria-1.1/#aria-haspopup\n  // However, we only add it for menus for now because screen readers often\n  // announce it as a menu even for other values.\n  let ariaHasPopup = undefined;\n  if (type === 'menu') {\n    ariaHasPopup = true;\n  } else if (type === 'listbox') {\n    ariaHasPopup = 'listbox';\n  }\n\n  let overlayId = useId();\n  return {\n    triggerProps: {\n      'aria-haspopup': ariaHasPopup,\n      'aria-expanded': isOpen,\n      'aria-controls': isOpen ? overlayId : null,\n      onPress: state.toggle\n    },\n    overlayProps: {\n      id: overlayId\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}