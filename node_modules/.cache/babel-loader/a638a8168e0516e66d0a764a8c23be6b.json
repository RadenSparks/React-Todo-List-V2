{"ast":null,"code":"import { useMemo as $50cCT$useMemo, useRef as $50cCT$useRef, useEffect as $50cCT$useEffect } from \"react\";\nimport { useOverlayTriggerState as $50cCT$useOverlayTriggerState } from \"@react-stately/overlays\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nconst $8796f90736e175cb$var$TOOLTIP_DELAY = 1500; // this seems to be a 1.5 second delay, check with design\nconst $8796f90736e175cb$var$TOOLTIP_COOLDOWN = 500;\nlet $8796f90736e175cb$var$tooltips = {};\nlet $8796f90736e175cb$var$tooltipId = 0;\nlet $8796f90736e175cb$var$globalWarmedUp = false;\nlet $8796f90736e175cb$var$globalWarmUpTimeout = null;\nlet $8796f90736e175cb$var$globalCooldownTimeout = null;\nfunction $8796f90736e175cb$export$4d40659c25ecb50b() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let {\n    delay = $8796f90736e175cb$var$TOOLTIP_DELAY,\n    closeDelay = $8796f90736e175cb$var$TOOLTIP_COOLDOWN\n  } = props;\n  let {\n    isOpen: isOpen,\n    open: open,\n    close: close\n  } = (0, $50cCT$useOverlayTriggerState)(props);\n  let id = (0, $50cCT$useMemo)(() => `${++$8796f90736e175cb$var$tooltipId}`, []);\n  let closeTimeout = (0, $50cCT$useRef)();\n  let ensureTooltipEntry = () => {\n    $8796f90736e175cb$var$tooltips[id] = hideTooltip;\n  };\n  let closeOpenTooltips = () => {\n    for (let hideTooltipId in $8796f90736e175cb$var$tooltips) if (hideTooltipId !== id) {\n      $8796f90736e175cb$var$tooltips[hideTooltipId](true);\n      delete $8796f90736e175cb$var$tooltips[hideTooltipId];\n    }\n  };\n  let showTooltip = () => {\n    clearTimeout(closeTimeout.current);\n    closeTimeout.current = null;\n    closeOpenTooltips();\n    ensureTooltipEntry();\n    $8796f90736e175cb$var$globalWarmedUp = true;\n    open();\n    if ($8796f90736e175cb$var$globalWarmUpTimeout) {\n      clearTimeout($8796f90736e175cb$var$globalWarmUpTimeout);\n      $8796f90736e175cb$var$globalWarmUpTimeout = null;\n    }\n    if ($8796f90736e175cb$var$globalCooldownTimeout) {\n      clearTimeout($8796f90736e175cb$var$globalCooldownTimeout);\n      $8796f90736e175cb$var$globalCooldownTimeout = null;\n    }\n  };\n  let hideTooltip = immediate => {\n    if (immediate || closeDelay <= 0) {\n      clearTimeout(closeTimeout.current);\n      closeTimeout.current = null;\n      close();\n    } else if (!closeTimeout.current) closeTimeout.current = setTimeout(() => {\n      closeTimeout.current = null;\n      close();\n    }, closeDelay);\n    if ($8796f90736e175cb$var$globalWarmUpTimeout) {\n      clearTimeout($8796f90736e175cb$var$globalWarmUpTimeout);\n      $8796f90736e175cb$var$globalWarmUpTimeout = null;\n    }\n    if ($8796f90736e175cb$var$globalWarmedUp) {\n      if ($8796f90736e175cb$var$globalCooldownTimeout) clearTimeout($8796f90736e175cb$var$globalCooldownTimeout);\n      $8796f90736e175cb$var$globalCooldownTimeout = setTimeout(() => {\n        delete $8796f90736e175cb$var$tooltips[id];\n        $8796f90736e175cb$var$globalCooldownTimeout = null;\n        $8796f90736e175cb$var$globalWarmedUp = false;\n      }, Math.max($8796f90736e175cb$var$TOOLTIP_COOLDOWN, closeDelay));\n    }\n  };\n  let warmupTooltip = () => {\n    closeOpenTooltips();\n    ensureTooltipEntry();\n    if (!isOpen && !$8796f90736e175cb$var$globalWarmUpTimeout && !$8796f90736e175cb$var$globalWarmedUp) $8796f90736e175cb$var$globalWarmUpTimeout = setTimeout(() => {\n      $8796f90736e175cb$var$globalWarmUpTimeout = null;\n      $8796f90736e175cb$var$globalWarmedUp = true;\n      showTooltip();\n    }, delay);else if (!isOpen) showTooltip();\n  };\n  // eslint-disable-next-line arrow-body-style\n  (0, $50cCT$useEffect)(() => {\n    return () => {\n      clearTimeout(closeTimeout.current);\n      let tooltip = $8796f90736e175cb$var$tooltips[id];\n      if (tooltip) delete $8796f90736e175cb$var$tooltips[id];\n    };\n  }, [id]);\n  return {\n    isOpen: isOpen,\n    open: immediate => {\n      if (!immediate && delay > 0 && !closeTimeout.current) warmupTooltip();else showTooltip();\n    },\n    close: hideTooltip\n  };\n}\nexport { $8796f90736e175cb$export$4d40659c25ecb50b as useTooltipTriggerState };","map":{"version":3,"mappings":";;;AAAA;;;;;;;;;;;;AAgBA,MAAMA,sCAAgB,MAAM;AAC5B,MAAMC,yCAAmB;AAezB,IAAIC,iCAAW,CAAC;AAChB,IAAIC,kCAAY;AAChB,IAAIC,uCAAiB;AACrB,IAAIC,4CAAsB;AAC1B,IAAIC,8CAAwB;AAOrB,SAASC,4CAAsD;EAAA,IAA/BC,4EAA6B,CAAC,CAAC;EACpE,IAAI;IAACC,QAAQT;IAAeU,aAAaT;EAAA,CAAiB,GAAGO;EAC7D,IAAI;IAAAG,QAACA,MAAM;IAAAC,MAAEA,IAAI;IAAAC,OAAEA;EAAK,CAAC,GAAG,iCAAqB,EAAEL;EACnD,IAAIM,KAAK,kBAAM,EAAE,MAAM,GAAG,EAAEX,iCAAW,EAAE,EAAE;EAC3C,IAAIY,eAAe,iBAAK;EAExB,IAAIC,qBAAqBA;IACvBd,8BAAQ,CAACY,GAAG,GAAGG;EACjB;EAEA,IAAIC,oBAAoBA;IACtB,KAAK,IAAIC,iBAAiBjB,gCACxB,IAAIiB,kBAAkBL,IAAI;MACxBZ,8BAAQ,CAACiB,cAAc,CAAC;MACxB,OAAOjB,8BAAQ,CAACiB,cAAc;IAChC;EAEJ;EAEA,IAAIC,cAAcA;IAChBC,aAAaN,aAAaO,OAAO;IACjCP,aAAaO,OAAO,GAAG;IACvBJ;IACAF;IACAZ,uCAAiB;IACjBQ;IACA,IAAIP,2CAAqB;MACvBgB,aAAahB;MACbA,4CAAsB;IACxB;IACA,IAAIC,6CAAuB;MACzBe,aAAaf;MACbA,8CAAwB;IAC1B;EACF;EAEA,IAAIW,cAAeM;IACjB,IAAIA,aAAab,cAAc,GAAG;MAChCW,aAAaN,aAAaO,OAAO;MACjCP,aAAaO,OAAO,GAAG;MACvBT;IACF,OAAO,IAAI,CAACE,aAAaO,OAAO,EAC9BP,aAAaO,OAAO,GAAGE,WAAW;MAChCT,aAAaO,OAAO,GAAG;MACvBT;IACF,GAAGH;IAGL,IAAIL,2CAAqB;MACvBgB,aAAahB;MACbA,4CAAsB;IACxB;IACA,IAAID,sCAAgB;MAClB,IAAIE,6CACFe,aAAaf;MAEfA,8CAAwBkB,WAAW;QACjC,OAAOtB,8BAAQ,CAACY,GAAG;QACnBR,8CAAwB;QACxBF,uCAAiB;MACnB,GAAGqB,KAAKC,GAAG,CAACzB,wCAAkBS;IAChC;EACF;EAEA,IAAIiB,gBAAgBA;IAClBT;IACAF;IACA,IAAI,CAACL,UAAU,CAACN,6CAAuB,CAACD,sCACtCC,4CAAsBmB,WAAW;MAC/BnB,4CAAsB;MACtBD,uCAAiB;MACjBgB;IACF,GAAGX,YACE,IAAI,CAACE,QACVS;EAEJ;EAEA;EACA,oBAAQ,EAAE;IACR,OAAO;MACLC,aAAaN,aAAaO,OAAO;MACjC,IAAIM,UAAU1B,8BAAQ,CAACY,GAAG;MAC1B,IAAIc,SACF,OAAO1B,8BAAQ,CAACY,GAAG;IAEvB;EACF,GAAG,CAACA,GAAG;EAEP,OAAO;YACLH;IACAC,MAAOW;MACL,IAAI,CAACA,aAAad,QAAQ,KAAK,CAACM,aAAaO,OAAO,EAClDK,qBAEAP;IAEJ;IACAP,OAAOI;EACT;AACF","names":["$8796f90736e175cb$var$TOOLTIP_DELAY","$8796f90736e175cb$var$TOOLTIP_COOLDOWN","$8796f90736e175cb$var$tooltips","$8796f90736e175cb$var$tooltipId","$8796f90736e175cb$var$globalWarmedUp","$8796f90736e175cb$var$globalWarmUpTimeout","$8796f90736e175cb$var$globalCooldownTimeout","$8796f90736e175cb$export$4d40659c25ecb50b","props","delay","closeDelay","isOpen","open","close","id","closeTimeout","ensureTooltipEntry","hideTooltip","closeOpenTooltips","hideTooltipId","showTooltip","clearTimeout","current","immediate","setTimeout","Math","max","warmupTooltip","tooltip"],"sources":["D:\\Like, for real projects\\React-Todo-List-V2\\node_modules\\@react-stately\\tooltip\\dist\\packages\\@react-stately\\tooltip\\src\\useTooltipTriggerState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {TooltipTriggerProps} from '@react-types/tooltip';\nimport {useEffect, useMemo, useRef} from 'react';\nimport {useOverlayTriggerState} from '@react-stately/overlays';\n\nconst TOOLTIP_DELAY = 1500; // this seems to be a 1.5 second delay, check with design\nconst TOOLTIP_COOLDOWN = 500;\n\nexport interface TooltipTriggerState {\n  /** Whether the tooltip is currently showing. */\n  isOpen: boolean,\n  /**\n   * Shows the tooltip. By default, the tooltip becomes visible after a delay\n   * depending on a global warmup timer. The `immediate` option shows the\n   * tooltip immediately instead.\n   */\n  open(immediate?: boolean): void,\n  /** Hides the tooltip. */\n  close(immediate?: boolean): void\n}\n\nlet tooltips = {};\nlet tooltipId = 0;\nlet globalWarmedUp = false;\nlet globalWarmUpTimeout = null;\nlet globalCooldownTimeout = null;\n\n/**\n * Manages state for a tooltip trigger. Tracks whether the tooltip is open, and provides\n * methods to toggle this state. Ensures only one tooltip is open at a time and controls\n * the delay for showing a tooltip.\n */\nexport function useTooltipTriggerState(props: TooltipTriggerProps = {}): TooltipTriggerState {\n  let {delay = TOOLTIP_DELAY, closeDelay = TOOLTIP_COOLDOWN} = props;\n  let {isOpen, open, close} = useOverlayTriggerState(props);\n  let id = useMemo(() => `${++tooltipId}`, []);\n  let closeTimeout = useRef<ReturnType<typeof setTimeout>>();\n\n  let ensureTooltipEntry = () => {\n    tooltips[id] = hideTooltip;\n  };\n\n  let closeOpenTooltips = () => {\n    for (let hideTooltipId in tooltips) {\n      if (hideTooltipId !== id) {\n        tooltips[hideTooltipId](true);\n        delete tooltips[hideTooltipId];\n      }\n    }\n  };\n\n  let showTooltip = () => {\n    clearTimeout(closeTimeout.current);\n    closeTimeout.current = null;\n    closeOpenTooltips();\n    ensureTooltipEntry();\n    globalWarmedUp = true;\n    open();\n    if (globalWarmUpTimeout) {\n      clearTimeout(globalWarmUpTimeout);\n      globalWarmUpTimeout = null;\n    }\n    if (globalCooldownTimeout) {\n      clearTimeout(globalCooldownTimeout);\n      globalCooldownTimeout = null;\n    }\n  };\n\n  let hideTooltip = (immediate?: boolean) => {\n    if (immediate || closeDelay <= 0) {\n      clearTimeout(closeTimeout.current);\n      closeTimeout.current = null;\n      close();\n    } else if (!closeTimeout.current) {\n      closeTimeout.current = setTimeout(() => {\n        closeTimeout.current = null;\n        close();\n      }, closeDelay);\n    }\n\n    if (globalWarmUpTimeout) {\n      clearTimeout(globalWarmUpTimeout);\n      globalWarmUpTimeout = null;\n    }\n    if (globalWarmedUp) {\n      if (globalCooldownTimeout) {\n        clearTimeout(globalCooldownTimeout);\n      }\n      globalCooldownTimeout = setTimeout(() => {\n        delete tooltips[id];\n        globalCooldownTimeout = null;\n        globalWarmedUp = false;\n      }, Math.max(TOOLTIP_COOLDOWN, closeDelay));\n    }\n  };\n\n  let warmupTooltip = () => {\n    closeOpenTooltips();\n    ensureTooltipEntry();\n    if (!isOpen && !globalWarmUpTimeout && !globalWarmedUp) {\n      globalWarmUpTimeout = setTimeout(() => {\n        globalWarmUpTimeout = null;\n        globalWarmedUp = true;\n        showTooltip();\n      }, delay);\n    } else if (!isOpen) {\n      showTooltip();\n    }\n  };\n\n  // eslint-disable-next-line arrow-body-style\n  useEffect(() => {\n    return () => {\n      clearTimeout(closeTimeout.current);\n      let tooltip = tooltips[id];\n      if (tooltip) {\n        delete tooltips[id];\n      }\n    };\n  }, [id]);\n\n  return {\n    isOpen,\n    open: (immediate) => {\n      if (!immediate && delay > 0 && !closeTimeout.current) {\n        warmupTooltip();\n      } else {\n        showTooltip();\n      }\n    },\n    close: hideTooltip\n  };\n}\n"]},"metadata":{},"sourceType":"module"}