{"ast":null,"code":"import { useState as $7exkJ$useState, useMemo as $7exkJ$useMemo, useCallback as $7exkJ$useCallback } from \"react\";\n\n/*\n * Copyright 2023 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nfunction $e5614764aa47eb35$export$cfc51cf86138bf98(props, state) {\n  let {\n    triggerKey: triggerKey\n  } = props;\n  let {\n    expandedKeysStack: expandedKeysStack,\n    openSubmenu: openSubmenu,\n    closeSubmenu: closeSubmenu,\n    close: closeAll\n  } = state;\n  let [submenuLevel] = (0, $7exkJ$useState)(expandedKeysStack === null || expandedKeysStack === void 0 ? void 0 : expandedKeysStack.length);\n  let isOpen = (0, $7exkJ$useMemo)(() => expandedKeysStack[submenuLevel] === triggerKey, [expandedKeysStack, triggerKey, submenuLevel]);\n  let [focusStrategy, setFocusStrategy] = (0, $7exkJ$useState)(null);\n  let open = (0, $7exkJ$useCallback)(function () {\n    let focusStrategy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    setFocusStrategy(focusStrategy);\n    openSubmenu(triggerKey, submenuLevel);\n  }, [openSubmenu, submenuLevel, triggerKey]);\n  let close = (0, $7exkJ$useCallback)(() => {\n    setFocusStrategy(null);\n    closeSubmenu(triggerKey, submenuLevel);\n  }, [closeSubmenu, submenuLevel, triggerKey]);\n  let toggle = (0, $7exkJ$useCallback)(function () {\n    let focusStrategy = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    setFocusStrategy(focusStrategy);\n    if (isOpen) close();else open(focusStrategy);\n  }, [close, open, isOpen]);\n  return (0, $7exkJ$useMemo)(() => ({\n    focusStrategy: focusStrategy,\n    isOpen: isOpen,\n    open: open,\n    close: close,\n    closeAll: closeAll,\n    submenuLevel: submenuLevel,\n    // TODO: Placeholders that aren't used but give us parity with OverlayTriggerState so we can use this in Popover. Refactor if we update Popover via\n    // https://github.com/adobe/react-spectrum/pull/4976#discussion_r1336472863\n    setOpen: () => {},\n    toggle: toggle\n  }), [isOpen, open, close, closeAll, focusStrategy, toggle, submenuLevel]);\n}\nexport { $e5614764aa47eb35$export$cfc51cf86138bf98 as useSubmenuTriggerState };","map":{"version":3,"mappings":";;AAAA;;;;;;;;;;;AA6CO,SAASA,0CAAuBC,KAA0B,EAAEC,KAA2B;EAC5F,IAAI;IAAAC,YAACA;EAAU,CAAC,GAAGF;EACnB,IAAI;IAAAG,mBAACA,iBAAiB;IAAAC,aAAEA,WAAW;IAAAC,cAAEA,YAAY;IAAEC,OAAOC;EAAQ,CAAC,GAAGN;EACtE,IAAI,CAACO,aAAa,GAAG,mBAAO,EAAEL,wFAAmBM,MAAM;EACvD,IAAIC,SAAS,kBAAM,EAAE,MAAMP,iBAAiB,CAACK,aAAa,KAAKN,YAAY,CAACC,mBAAmBD,YAAYM,aAAa;EACxH,IAAI,CAACG,eAAeC,iBAAiB,GAAG,mBAAO,EAAiB;EAEhE,IAAIC,OAAO,sBAAU,EAAE,YAAoC;IAAA,IAAnCF,oFAA+B,IAAI;IACzDC,iBAAiBD;IACjBP,YAAYF,YAAYM;EAC1B,GAAG,CAACJ,aAAaI,cAAcN,WAAW;EAE1C,IAAII,QAAQ,sBAAU,EAAE;IACtBM,iBAAiB;IACjBP,aAAaH,YAAYM;EAC3B,GAAG,CAACH,cAAcG,cAAcN,WAAW;EAE3C,IAAIY,SAAS,sBAAU,EAAE,YAAoC;IAAA,IAAnCH,oFAA+B,IAAI;IAC3DC,iBAAiBD;IACjB,IAAID,QACFJ,aAEAO,KAAKF;EAET,GAAG,CAACL,OAAOO,MAAMH,OAAO;EAExB,OAAO,kBAAM,EAAE,OAAO;mBACpBC;YACAD;UACAG;WACAP;cACAC;kBACAC;IACA;IACA;IACAO,SAASA,OAAO;YAChBD;EACF,IAAI,CAACJ,QAAQG,MAAMP,OAAOC,UAAUI,eAAeG,QAAQN,aAAa;AAC1E","names":["$e5614764aa47eb35$export$cfc51cf86138bf98","props","state","triggerKey","expandedKeysStack","openSubmenu","closeSubmenu","close","closeAll","submenuLevel","length","isOpen","focusStrategy","setFocusStrategy","open","toggle","setOpen"],"sources":["D:\\Like, for real projects\\React-Todo-List-V2\\node_modules\\@react-stately\\menu\\dist\\packages\\@react-stately\\menu\\src\\useSubmenuTriggerState.ts"],"sourcesContent":["/*\n * Copyright 2023 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusStrategy, Key} from '@react-types/shared';\nimport type {OverlayTriggerState} from '@react-stately/overlays';\nimport {RootMenuTriggerState} from './useMenuTriggerState';\nimport {useCallback, useMemo, useState} from 'react';\n\nexport interface SubmenuTriggerProps {\n  /** Key of the trigger item. */\n  triggerKey: Key\n}\n\nexport interface SubmenuTriggerState extends OverlayTriggerState {\n  /** Whether the submenu is currently open. */\n  isOpen: boolean,\n  /** Controls which item will be auto focused when the submenu opens. */\n  focusStrategy: FocusStrategy | null,\n  /** Opens the submenu. */\n  open: (focusStrategy?: FocusStrategy | null) => void,\n  /** Closes the submenu. */\n  close: () => void,\n  /** Closes all menus and submenus in the menu tree. */\n  closeAll: () => void,\n  /** The level of the submenu. */\n  submenuLevel: number,\n  /** Toggles the submenu. */\n  toggle: (focusStrategy?: FocusStrategy | null) => void,\n  /** @private */\n  setOpen: () => void\n}\n\n/**\n * Manages state for a submenu trigger. Tracks whether the submenu is currently open, the level of the submenu, and\n * controls which item will receive focus when it opens.\n */\nexport function useSubmenuTriggerState(props: SubmenuTriggerProps, state: RootMenuTriggerState): SubmenuTriggerState  {\n  let {triggerKey} = props;\n  let {expandedKeysStack, openSubmenu, closeSubmenu, close: closeAll} = state;\n  let [submenuLevel] = useState(expandedKeysStack?.length);\n  let isOpen = useMemo(() => expandedKeysStack[submenuLevel] === triggerKey, [expandedKeysStack, triggerKey, submenuLevel]);\n  let [focusStrategy, setFocusStrategy] = useState<FocusStrategy>(null);\n\n  let open = useCallback((focusStrategy: FocusStrategy = null) => {\n    setFocusStrategy(focusStrategy);\n    openSubmenu(triggerKey, submenuLevel);\n  }, [openSubmenu, submenuLevel, triggerKey]);\n\n  let close = useCallback(() => {\n    setFocusStrategy(null);\n    closeSubmenu(triggerKey, submenuLevel);\n  }, [closeSubmenu, submenuLevel, triggerKey]);\n\n  let toggle = useCallback((focusStrategy: FocusStrategy = null) => {\n    setFocusStrategy(focusStrategy);\n    if (isOpen) {\n      close();\n    } else {\n      open(focusStrategy);\n    }\n  }, [close, open, isOpen]);\n\n  return useMemo(() => ({\n    focusStrategy,\n    isOpen,\n    open,\n    close,\n    closeAll,\n    submenuLevel,\n    // TODO: Placeholders that aren't used but give us parity with OverlayTriggerState so we can use this in Popover. Refactor if we update Popover via\n    // https://github.com/adobe/react-spectrum/pull/4976#discussion_r1336472863\n    setOpen: () => {},\n    toggle\n  }), [isOpen, open, close, closeAll, focusStrategy, toggle, submenuLevel]);\n}\n"]},"metadata":{},"sourceType":"module"}