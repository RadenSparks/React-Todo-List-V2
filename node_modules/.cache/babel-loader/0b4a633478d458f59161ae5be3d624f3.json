{"ast":null,"code":"import { useTextField as $2d73ec29415bd339$export$712718f7aec83d5 } from \"./useTextField.mjs\";\nimport { useEffectEvent as $jyGKS$useEffectEvent, mergeProps as $jyGKS$mergeProps } from \"@react-aria/utils\";\nimport { useEffect as $jyGKS$useEffect, useRef as $jyGKS$useRef } from \"react\";\n\n/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $d841c8010a73d545$var$supportsNativeBeforeInputEvent() {\n  return typeof window !== 'undefined' && window.InputEvent &&\n  // @ts-ignore\n  typeof InputEvent.prototype.getTargetRanges === 'function';\n}\nfunction $d841c8010a73d545$export$4f384c9210e583c3(props, state, inputRef) {\n  // All browsers implement the 'beforeinput' event natively except Firefox\n  // (currently behind a flag as of Firefox 84). React's polyfill does not\n  // run in all cases that the native event fires, e.g. when deleting text.\n  // Use the native event if available so that we can prevent invalid deletions.\n  // We do not attempt to polyfill this in Firefox since it would be very complicated,\n  // the benefit of doing so is fairly minor, and it's going to be natively supported soon.\n  let onBeforeInputFallback = (0, $jyGKS$useEffectEvent)(e => {\n    let input = inputRef.current;\n    // Compute the next value of the input if the event is allowed to proceed.\n    // See https://www.w3.org/TR/input-events-2/#interface-InputEvent-Attributes for a full list of input types.\n    let nextValue;\n    switch (e.inputType) {\n      case 'historyUndo':\n      case 'historyRedo':\n        // Explicitly allow undo/redo. e.data is null in this case, but there's no need to validate,\n        // because presumably the input would have already been validated previously.\n        return;\n      case 'insertLineBreak':\n        // Explicitly allow \"insertLineBreak\" event, to allow onSubmit for \"enter\" key. e.data is null in this case.\n        return;\n      case 'deleteContent':\n      case 'deleteByCut':\n      case 'deleteByDrag':\n        nextValue = input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd);\n        break;\n      case 'deleteContentForward':\n        // This is potentially incorrect, since the browser may actually delete more than a single UTF-16\n        // character. In reality, a full Unicode grapheme cluster consisting of multiple UTF-16 characters\n        // or code points may be deleted. However, in our currently supported locales, there are no such cases.\n        // If we support additional locales in the future, this may need to change.\n        nextValue = input.selectionEnd === input.selectionStart ? input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd + 1) : input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd);\n        break;\n      case 'deleteContentBackward':\n        nextValue = input.selectionEnd === input.selectionStart ? input.value.slice(0, input.selectionStart - 1) + input.value.slice(input.selectionStart) : input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd);\n        break;\n      case 'deleteSoftLineBackward':\n      case 'deleteHardLineBackward':\n        nextValue = input.value.slice(input.selectionStart);\n        break;\n      default:\n        if (e.data != null) nextValue = input.value.slice(0, input.selectionStart) + e.data + input.value.slice(input.selectionEnd);\n        break;\n    }\n    // If we did not compute a value, or the new value is invalid, prevent the event\n    // so that the browser does not update the input text, move the selection, or add to\n    // the undo/redo stack.\n    if (nextValue == null || !state.validate(nextValue)) e.preventDefault();\n  });\n  (0, $jyGKS$useEffect)(() => {\n    if (!$d841c8010a73d545$var$supportsNativeBeforeInputEvent()) return;\n    let input = inputRef.current;\n    input.addEventListener('beforeinput', onBeforeInputFallback, false);\n    return () => {\n      input.removeEventListener('beforeinput', onBeforeInputFallback, false);\n    };\n  }, [inputRef, onBeforeInputFallback]);\n  let onBeforeInput = !$d841c8010a73d545$var$supportsNativeBeforeInputEvent() ? e => {\n    let nextValue = e.target.value.slice(0, e.target.selectionStart) + e.data + e.target.value.slice(e.target.selectionEnd);\n    if (!state.validate(nextValue)) e.preventDefault();\n  } : null;\n  let {\n    labelProps: labelProps,\n    inputProps: textFieldProps,\n    descriptionProps: descriptionProps,\n    errorMessageProps: errorMessageProps,\n    ...validation\n  } = (0, $2d73ec29415bd339$export$712718f7aec83d5)(props, inputRef);\n  let compositionStartState = (0, $jyGKS$useRef)(null);\n  return {\n    inputProps: (0, $jyGKS$mergeProps)(textFieldProps, {\n      onBeforeInput: onBeforeInput,\n      onCompositionStart() {\n        // Chrome does not implement Input Events Level 2, which specifies the insertFromComposition\n        // and deleteByComposition inputType values for the beforeinput event. These are meant to occur\n        // at the end of a composition (e.g. Pinyin IME, Android auto correct, etc.), and crucially, are\n        // cancelable. The insertCompositionText and deleteCompositionText input types are not cancelable,\n        // nor would we want to cancel them because the input from the user is incomplete at that point.\n        // In Safari, insertFromComposition/deleteFromComposition will fire, however, allowing us to cancel\n        // the final composition result if it is invalid. As a fallback for Chrome and Firefox, which either\n        // don't support Input Events Level 2, or beforeinput at all, we store the state of the input when\n        // the compositionstart event fires, and undo the changes in compositionend (below) if it is invalid.\n        // Unfortunately, this messes up the undo/redo stack, but until insertFromComposition/deleteByComposition\n        // are implemented, there is no other way to prevent composed input.\n        // See https://bugs.chromium.org/p/chromium/issues/detail?id=1022204\n        let {\n          value: value,\n          selectionStart: selectionStart,\n          selectionEnd: selectionEnd\n        } = inputRef.current;\n        compositionStartState.current = {\n          value: value,\n          selectionStart: selectionStart,\n          selectionEnd: selectionEnd\n        };\n      },\n      onCompositionEnd() {\n        if (!state.validate(inputRef.current.value)) {\n          // Restore the input value in the DOM immediately so we can synchronously update the selection position.\n          // But also update the value in React state as well so it is correct for future updates.\n          let {\n            value: value,\n            selectionStart: selectionStart,\n            selectionEnd: selectionEnd\n          } = compositionStartState.current;\n          inputRef.current.value = value;\n          inputRef.current.setSelectionRange(selectionStart, selectionEnd);\n          state.setInputValue(value);\n        }\n      }\n    }),\n    labelProps: labelProps,\n    descriptionProps: descriptionProps,\n    errorMessageProps: errorMessageProps,\n    ...validation\n  };\n}\nexport { $d841c8010a73d545$export$4f384c9210e583c3 as useFormattedTextField };","map":{"version":3,"mappings":"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","names":["$d841c8010a73d545$var$supportsNativeBeforeInputEvent","window","InputEvent","prototype","getTargetRanges","$d841c8010a73d545$export$4f384c9210e583c3","props","state","inputRef","onBeforeInputFallback","e","input","current","nextValue","inputType","value","slice","selectionStart","selectionEnd","data","validate","preventDefault","addEventListener","removeEventListener","onBeforeInput","target","labelProps","inputProps","textFieldProps","descriptionProps","errorMessageProps","validation","compositionStartState","onCompositionStart","onCompositionEnd","setSelectionRange","setInputValue"],"sources":["D:\\Like, for real projects\\React-Todo-List-V2\\node_modules\\@react-aria\\textfield\\dist\\packages\\@react-aria\\textfield\\src\\useFormattedTextField.ts"],"sourcesContent":["/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaTextFieldProps} from '@react-types/textfield';\nimport {mergeProps, useEffectEvent} from '@react-aria/utils';\nimport {RefObject, useEffect, useRef} from 'react';\nimport {TextFieldAria, useTextField} from './useTextField';\n\ninterface FormattedTextFieldState {\n  validate: (val: string) => boolean,\n  setInputValue: (val: string) => void\n}\n\n\nfunction supportsNativeBeforeInputEvent() {\n  return typeof window !== 'undefined' &&\n    window.InputEvent &&\n    // @ts-ignore\n    typeof InputEvent.prototype.getTargetRanges === 'function';\n}\n\nexport function useFormattedTextField(props: AriaTextFieldProps, state: FormattedTextFieldState, inputRef: RefObject<HTMLInputElement>): TextFieldAria {\n  // All browsers implement the 'beforeinput' event natively except Firefox\n  // (currently behind a flag as of Firefox 84). React's polyfill does not\n  // run in all cases that the native event fires, e.g. when deleting text.\n  // Use the native event if available so that we can prevent invalid deletions.\n  // We do not attempt to polyfill this in Firefox since it would be very complicated,\n  // the benefit of doing so is fairly minor, and it's going to be natively supported soon.\n  let onBeforeInputFallback = useEffectEvent((e: InputEvent) => {\n    let input = inputRef.current;\n\n    // Compute the next value of the input if the event is allowed to proceed.\n    // See https://www.w3.org/TR/input-events-2/#interface-InputEvent-Attributes for a full list of input types.\n    let nextValue: string;\n    switch (e.inputType) {\n      case 'historyUndo':\n      case 'historyRedo':\n        // Explicitly allow undo/redo. e.data is null in this case, but there's no need to validate,\n        // because presumably the input would have already been validated previously.\n        return;\n      case 'insertLineBreak':\n        // Explicitly allow \"insertLineBreak\" event, to allow onSubmit for \"enter\" key. e.data is null in this case.\n        return;\n      case 'deleteContent':\n      case 'deleteByCut':\n      case 'deleteByDrag':\n        nextValue = input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd);\n        break;\n      case 'deleteContentForward':\n        // This is potentially incorrect, since the browser may actually delete more than a single UTF-16\n        // character. In reality, a full Unicode grapheme cluster consisting of multiple UTF-16 characters\n        // or code points may be deleted. However, in our currently supported locales, there are no such cases.\n        // If we support additional locales in the future, this may need to change.\n        nextValue = input.selectionEnd === input.selectionStart\n          ? input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd + 1)\n          : input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd);\n        break;\n      case 'deleteContentBackward':\n        nextValue = input.selectionEnd === input.selectionStart\n          ? input.value.slice(0, input.selectionStart - 1) + input.value.slice(input.selectionStart)\n          : input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd);\n        break;\n      case 'deleteSoftLineBackward':\n      case 'deleteHardLineBackward':\n        nextValue = input.value.slice(input.selectionStart);\n        break;\n      default:\n        if (e.data != null) {\n          nextValue =\n            input.value.slice(0, input.selectionStart) +\n            e.data +\n            input.value.slice(input.selectionEnd);\n        }\n        break;\n    }\n\n    // If we did not compute a value, or the new value is invalid, prevent the event\n    // so that the browser does not update the input text, move the selection, or add to\n    // the undo/redo stack.\n    if (nextValue == null || !state.validate(nextValue)) {\n      e.preventDefault();\n    }\n  });\n\n  useEffect(() => {\n    if (!supportsNativeBeforeInputEvent()) {\n      return;\n    }\n\n    let input = inputRef.current;\n    input.addEventListener('beforeinput', onBeforeInputFallback, false);\n    return () => {\n      input.removeEventListener('beforeinput', onBeforeInputFallback, false);\n    };\n  }, [inputRef, onBeforeInputFallback]);\n\n  let onBeforeInput = !supportsNativeBeforeInputEvent()\n    ? e => {\n      let nextValue =\n        e.target.value.slice(0, e.target.selectionStart) +\n        e.data +\n        e.target.value.slice(e.target.selectionEnd);\n\n      if (!state.validate(nextValue)) {\n        e.preventDefault();\n      }\n    }\n    : null;\n\n  let {labelProps, inputProps: textFieldProps, descriptionProps, errorMessageProps, ...validation} = useTextField(props, inputRef);\n\n  let compositionStartState = useRef(null);\n  return {\n    inputProps: mergeProps(\n      textFieldProps,\n      {\n        onBeforeInput,\n        onCompositionStart() {\n          // Chrome does not implement Input Events Level 2, which specifies the insertFromComposition\n          // and deleteByComposition inputType values for the beforeinput event. These are meant to occur\n          // at the end of a composition (e.g. Pinyin IME, Android auto correct, etc.), and crucially, are\n          // cancelable. The insertCompositionText and deleteCompositionText input types are not cancelable,\n          // nor would we want to cancel them because the input from the user is incomplete at that point.\n          // In Safari, insertFromComposition/deleteFromComposition will fire, however, allowing us to cancel\n          // the final composition result if it is invalid. As a fallback for Chrome and Firefox, which either\n          // don't support Input Events Level 2, or beforeinput at all, we store the state of the input when\n          // the compositionstart event fires, and undo the changes in compositionend (below) if it is invalid.\n          // Unfortunately, this messes up the undo/redo stack, but until insertFromComposition/deleteByComposition\n          // are implemented, there is no other way to prevent composed input.\n          // See https://bugs.chromium.org/p/chromium/issues/detail?id=1022204\n          let {value, selectionStart, selectionEnd} = inputRef.current;\n          compositionStartState.current = {value, selectionStart, selectionEnd};\n        },\n        onCompositionEnd() {\n          if (!state.validate(inputRef.current.value)) {\n            // Restore the input value in the DOM immediately so we can synchronously update the selection position.\n            // But also update the value in React state as well so it is correct for future updates.\n            let {value, selectionStart, selectionEnd} = compositionStartState.current;\n            inputRef.current.value = value;\n            inputRef.current.setSelectionRange(selectionStart, selectionEnd);\n            state.setInputValue(value);\n          }\n        }\n      }\n    ),\n    labelProps,\n    descriptionProps,\n    errorMessageProps,\n    ...validation\n  };\n}\n"]},"metadata":{},"sourceType":"module"}