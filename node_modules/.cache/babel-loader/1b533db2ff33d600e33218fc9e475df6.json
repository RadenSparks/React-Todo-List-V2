{"ast":null,"code":"import { calculatePosition as $edcf132a9284368a$export$b3ceb0cbf1056d98 } from \"./calculatePosition.mjs\";\nimport { useCloseOnScroll as $dd149f63282afbbf$export$18fc8428861184da } from \"./useCloseOnScroll.mjs\";\nimport { useState as $39EOa$useState, useRef as $39EOa$useRef, useEffect as $39EOa$useEffect, useCallback as $39EOa$useCallback } from \"react\";\nimport { useLayoutEffect as $39EOa$useLayoutEffect, useResizeObserver as $39EOa$useResizeObserver } from \"@react-aria/utils\";\nimport { useLocale as $39EOa$useLocale } from \"@react-aria/i18n\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// @ts-ignore\nlet $2a41e45df1593e64$var$visualViewport = typeof document !== 'undefined' && window.visualViewport;\nfunction $2a41e45df1593e64$export$d39e1813b3bdd0e1(props) {\n  let {\n    direction: direction\n  } = (0, $39EOa$useLocale)();\n  let {\n    arrowSize = 0,\n    targetRef: targetRef,\n    overlayRef: overlayRef,\n    scrollRef = overlayRef,\n    placement = 'bottom',\n    containerPadding = 12,\n    shouldFlip = true,\n    boundaryElement = typeof document !== 'undefined' ? document.body : null,\n    offset = 0,\n    crossOffset = 0,\n    shouldUpdatePosition = true,\n    isOpen = true,\n    onClose: onClose,\n    maxHeight: maxHeight,\n    arrowBoundaryOffset = 0\n  } = props;\n  let [position, setPosition] = (0, $39EOa$useState)({\n    position: {},\n    arrowOffsetLeft: undefined,\n    arrowOffsetTop: undefined,\n    maxHeight: undefined,\n    placement: undefined\n  });\n  let deps = [shouldUpdatePosition, placement, overlayRef.current, targetRef.current, scrollRef.current, containerPadding, shouldFlip, boundaryElement, offset, crossOffset, isOpen, direction, maxHeight, arrowBoundaryOffset, arrowSize];\n  // Note, the position freezing breaks if body sizes itself dynamicly with the visual viewport but that might\n  // just be a non-realistic use case\n  // Upon opening a overlay, record the current visual viewport scale so we can freeze the overlay styles\n  let lastScale = (0, $39EOa$useRef)($2a41e45df1593e64$var$visualViewport === null || $2a41e45df1593e64$var$visualViewport === void 0 ? void 0 : $2a41e45df1593e64$var$visualViewport.scale);\n  (0, $39EOa$useEffect)(() => {\n    if (isOpen) lastScale.current = $2a41e45df1593e64$var$visualViewport === null || $2a41e45df1593e64$var$visualViewport === void 0 ? void 0 : $2a41e45df1593e64$var$visualViewport.scale;\n  }, [isOpen]);\n  let updatePosition = (0, $39EOa$useCallback)(() => {\n    if (shouldUpdatePosition === false || !isOpen || !overlayRef.current || !targetRef.current || !scrollRef.current || !boundaryElement) return;\n    if (($2a41e45df1593e64$var$visualViewport === null || $2a41e45df1593e64$var$visualViewport === void 0 ? void 0 : $2a41e45df1593e64$var$visualViewport.scale) !== lastScale.current) return;\n    // Always reset the overlay's previous max height if not defined by the user so that we can compensate for\n    // RAC collections populating after a second render and properly set a correct max height + positioning when it populates.\n    let overlay = overlayRef.current;\n    if (!maxHeight && overlayRef.current) {\n      var _window_visualViewport;\n      overlay.style.top = '0px';\n      overlay.style.bottom = '';\n      var _window_visualViewport_height;\n      overlay.style.maxHeight = ((_window_visualViewport_height = (_window_visualViewport = window.visualViewport) === null || _window_visualViewport === void 0 ? void 0 : _window_visualViewport.height) !== null && _window_visualViewport_height !== void 0 ? _window_visualViewport_height : window.innerHeight) + 'px';\n    }\n    let position = (0, $edcf132a9284368a$export$b3ceb0cbf1056d98)({\n      placement: $2a41e45df1593e64$var$translateRTL(placement, direction),\n      overlayNode: overlayRef.current,\n      targetNode: targetRef.current,\n      scrollNode: scrollRef.current,\n      padding: containerPadding,\n      shouldFlip: shouldFlip,\n      boundaryElement: boundaryElement,\n      offset: offset,\n      crossOffset: crossOffset,\n      maxHeight: maxHeight,\n      arrowSize: arrowSize,\n      arrowBoundaryOffset: arrowBoundaryOffset\n    });\n    // Modify overlay styles directly so positioning happens immediately without the need of a second render\n    // This is so we don't have to delay autoFocus scrolling or delay applying preventScroll for popovers\n    overlay.style.top = '';\n    overlay.style.bottom = '';\n    Object.keys(position.position).forEach(key => overlay.style[key] = position.position[key] + 'px');\n    overlay.style.maxHeight = position.maxHeight != null ? position.maxHeight + 'px' : undefined;\n    // Trigger a set state for a second render anyway for arrow positioning\n    setPosition(position);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n  // Update position when anything changes\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  (0, $39EOa$useLayoutEffect)(updatePosition, deps);\n  // Update position on window resize\n  $2a41e45df1593e64$var$useResize(updatePosition);\n  // Update position when the overlay changes size (might need to flip).\n  (0, $39EOa$useResizeObserver)({\n    ref: overlayRef,\n    onResize: updatePosition\n  });\n  // Reposition the overlay and do not close on scroll while the visual viewport is resizing.\n  // This will ensure that overlays adjust their positioning when the iOS virtual keyboard appears.\n  let isResizing = (0, $39EOa$useRef)(false);\n  (0, $39EOa$useLayoutEffect)(() => {\n    let timeout;\n    let onResize = () => {\n      isResizing.current = true;\n      clearTimeout(timeout);\n      timeout = setTimeout(() => {\n        isResizing.current = false;\n      }, 500);\n      updatePosition();\n    };\n    // Only reposition the overlay if a scroll event happens immediately as a result of resize (aka the virtual keyboard has appears)\n    // We don't want to reposition the overlay if the user has pinch zoomed in and is scrolling the viewport around.\n    let onScroll = () => {\n      if (isResizing.current) onResize();\n    };\n    $2a41e45df1593e64$var$visualViewport === null || $2a41e45df1593e64$var$visualViewport === void 0 ? void 0 : $2a41e45df1593e64$var$visualViewport.addEventListener('resize', onResize);\n    $2a41e45df1593e64$var$visualViewport === null || $2a41e45df1593e64$var$visualViewport === void 0 ? void 0 : $2a41e45df1593e64$var$visualViewport.addEventListener('scroll', onScroll);\n    return () => {\n      $2a41e45df1593e64$var$visualViewport === null || $2a41e45df1593e64$var$visualViewport === void 0 ? void 0 : $2a41e45df1593e64$var$visualViewport.removeEventListener('resize', onResize);\n      $2a41e45df1593e64$var$visualViewport === null || $2a41e45df1593e64$var$visualViewport === void 0 ? void 0 : $2a41e45df1593e64$var$visualViewport.removeEventListener('scroll', onScroll);\n    };\n  }, [updatePosition]);\n  let close = (0, $39EOa$useCallback)(() => {\n    if (!isResizing.current) onClose();\n  }, [onClose, isResizing]);\n  // When scrolling a parent scrollable region of the trigger (other than the body),\n  // we hide the popover. Otherwise, its position would be incorrect.\n  (0, $dd149f63282afbbf$export$18fc8428861184da)({\n    triggerRef: targetRef,\n    isOpen: isOpen,\n    onClose: onClose && close\n  });\n  return {\n    overlayProps: {\n      style: {\n        position: 'absolute',\n        zIndex: 100000,\n        ...position.position,\n        maxHeight: position.maxHeight\n      }\n    },\n    placement: position.placement,\n    arrowProps: {\n      'aria-hidden': 'true',\n      role: 'presentation',\n      style: {\n        left: position.arrowOffsetLeft,\n        top: position.arrowOffsetTop\n      }\n    },\n    updatePosition: updatePosition\n  };\n}\nfunction $2a41e45df1593e64$var$useResize(onResize) {\n  (0, $39EOa$useLayoutEffect)(() => {\n    window.addEventListener('resize', onResize, false);\n    return () => {\n      window.removeEventListener('resize', onResize, false);\n    };\n  }, [onResize]);\n}\nfunction $2a41e45df1593e64$var$translateRTL(position, direction) {\n  if (direction === 'rtl') return position.replace('start', 'right').replace('end', 'left');\n  return position.replace('start', 'left').replace('end', 'right');\n}\nexport { $2a41e45df1593e64$export$d39e1813b3bdd0e1 as useOverlayPosition };","map":{"version":3,"mappings":"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","names":["$2a41e45df1593e64$var$visualViewport","document","window","visualViewport","$2a41e45df1593e64$export$d39e1813b3bdd0e1","props","direction","arrowSize","targetRef","overlayRef","scrollRef","placement","containerPadding","shouldFlip","boundaryElement","body","offset","crossOffset","shouldUpdatePosition","isOpen","onClose","maxHeight","arrowBoundaryOffset","position","setPosition","arrowOffsetLeft","undefined","arrowOffsetTop","deps","current","lastScale","scale","updatePosition","overlay","_window_visualViewport","style","top","bottom","_window_visualViewport_height","height","innerHeight","$2a41e45df1593e64$var$translateRTL","overlayNode","targetNode","scrollNode","padding","Object","keys","forEach","key","$2a41e45df1593e64$var$useResize","ref","onResize","isResizing","timeout","clearTimeout","setTimeout","onScroll","addEventListener","removeEventListener","close","triggerRef","overlayProps","zIndex","arrowProps","role","left","replace"],"sources":["D:\\Like, for real projects\\React-Todo-List-V2\\node_modules\\@react-aria\\overlays\\dist\\packages\\@react-aria\\overlays\\src\\useOverlayPosition.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {calculatePosition, PositionResult} from './calculatePosition';\nimport {DOMAttributes} from '@react-types/shared';\nimport {Placement, PlacementAxis, PositionProps} from '@react-types/overlays';\nimport {RefObject, useCallback, useEffect, useRef, useState} from 'react';\nimport {useCloseOnScroll} from './useCloseOnScroll';\nimport {useLayoutEffect, useResizeObserver} from '@react-aria/utils';\nimport {useLocale} from '@react-aria/i18n';\n\nexport interface AriaPositionProps extends PositionProps {\n  /**\n   * Cross size of the overlay arrow in pixels.\n   * @default 0\n   */\n  arrowSize?: number,\n  /**\n   * Element that that serves as the positioning boundary.\n   * @default document.body\n   */\n  boundaryElement?: Element,\n  /**\n   * The ref for the element which the overlay positions itself with respect to.\n   */\n  targetRef: RefObject<Element>,\n  /**\n   * The ref for the overlay element.\n   */\n  overlayRef: RefObject<Element>,\n  /**\n   * A ref for the scrollable region within the overlay.\n   * @default overlayRef\n   */\n  scrollRef?: RefObject<Element>,\n  /**\n   * Whether the overlay should update its position automatically.\n   * @default true\n   */\n  shouldUpdatePosition?: boolean,\n  /** Handler that is called when the overlay should close. */\n  onClose?: () => void,\n  /**\n   * The maxHeight specified for the overlay element.\n   * By default, it will take all space up to the current viewport height.\n   */\n  maxHeight?: number,\n  /**\n   * The minimum distance the arrow's edge should be from the edge of the overlay element.\n   * @default 0\n   */\n  arrowBoundaryOffset?: number\n}\n\nexport interface PositionAria {\n  /** Props for the overlay container element. */\n  overlayProps: DOMAttributes,\n  /** Props for the overlay tip arrow if any. */\n  arrowProps: DOMAttributes,\n  /** Placement of the overlay with respect to the overlay trigger. */\n  placement: PlacementAxis,\n  /** Updates the position of the overlay. */\n  updatePosition(): void\n}\n\n// @ts-ignore\nlet visualViewport = typeof document !== 'undefined' && window.visualViewport;\n\n/**\n * Handles positioning overlays like popovers and menus relative to a trigger\n * element, and updating the position when the window resizes.\n */\nexport function useOverlayPosition(props: AriaPositionProps): PositionAria {\n  let {direction} = useLocale();\n  let {\n    arrowSize = 0,\n    targetRef,\n    overlayRef,\n    scrollRef = overlayRef,\n    placement = 'bottom' as Placement,\n    containerPadding = 12,\n    shouldFlip = true,\n    boundaryElement = typeof document !== 'undefined' ? document.body : null,\n    offset = 0,\n    crossOffset = 0,\n    shouldUpdatePosition = true,\n    isOpen = true,\n    onClose,\n    maxHeight,\n    arrowBoundaryOffset = 0\n  } = props;\n  let [position, setPosition] = useState<PositionResult>({\n    position: {},\n    arrowOffsetLeft: undefined,\n    arrowOffsetTop: undefined,\n    maxHeight: undefined,\n    placement: undefined\n  });\n\n  let deps = [\n    shouldUpdatePosition,\n    placement,\n    overlayRef.current,\n    targetRef.current,\n    scrollRef.current,\n    containerPadding,\n    shouldFlip,\n    boundaryElement,\n    offset,\n    crossOffset,\n    isOpen,\n    direction,\n    maxHeight,\n    arrowBoundaryOffset,\n    arrowSize\n  ];\n\n  // Note, the position freezing breaks if body sizes itself dynamicly with the visual viewport but that might\n  // just be a non-realistic use case\n  // Upon opening a overlay, record the current visual viewport scale so we can freeze the overlay styles\n  let lastScale = useRef(visualViewport?.scale);\n  useEffect(() => {\n    if (isOpen) {\n      lastScale.current = visualViewport?.scale;\n    }\n  }, [isOpen]);\n\n  let updatePosition = useCallback(() => {\n    if (shouldUpdatePosition === false || !isOpen || !overlayRef.current || !targetRef.current || !scrollRef.current || !boundaryElement) {\n      return;\n    }\n\n    if (visualViewport?.scale !== lastScale.current) {\n      return;\n    }\n\n    // Always reset the overlay's previous max height if not defined by the user so that we can compensate for\n    // RAC collections populating after a second render and properly set a correct max height + positioning when it populates.\n    let overlay = (overlayRef.current as HTMLElement);\n    if (!maxHeight && overlayRef.current) {\n      overlay.style.top = '0px';\n      overlay.style.bottom = '';\n      overlay.style.maxHeight = (window.visualViewport?.height ?? window.innerHeight) + 'px';\n    }\n\n    let position = calculatePosition({\n      placement: translateRTL(placement, direction),\n      overlayNode: overlayRef.current,\n      targetNode: targetRef.current,\n      scrollNode: scrollRef.current,\n      padding: containerPadding,\n      shouldFlip,\n      boundaryElement,\n      offset,\n      crossOffset,\n      maxHeight,\n      arrowSize,\n      arrowBoundaryOffset\n    });\n\n    // Modify overlay styles directly so positioning happens immediately without the need of a second render\n    // This is so we don't have to delay autoFocus scrolling or delay applying preventScroll for popovers\n    overlay.style.top = '';\n    overlay.style.bottom = '';\n    Object.keys(position.position).forEach(key => overlay.style[key] = position.position[key] + 'px');\n    overlay.style.maxHeight = position.maxHeight != null ?  position.maxHeight + 'px' : undefined;\n\n    // Trigger a set state for a second render anyway for arrow positioning\n    setPosition(position);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n\n  // Update position when anything changes\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useLayoutEffect(updatePosition, deps);\n\n  // Update position on window resize\n  useResize(updatePosition);\n\n  // Update position when the overlay changes size (might need to flip).\n  useResizeObserver({\n    ref: overlayRef,\n    onResize: updatePosition\n  });\n\n  // Reposition the overlay and do not close on scroll while the visual viewport is resizing.\n  // This will ensure that overlays adjust their positioning when the iOS virtual keyboard appears.\n  let isResizing = useRef(false);\n  useLayoutEffect(() => {\n    let timeout: ReturnType<typeof setTimeout>;\n    let onResize = () => {\n      isResizing.current = true;\n      clearTimeout(timeout);\n\n      timeout = setTimeout(() => {\n        isResizing.current = false;\n      }, 500);\n\n      updatePosition();\n    };\n\n    // Only reposition the overlay if a scroll event happens immediately as a result of resize (aka the virtual keyboard has appears)\n    // We don't want to reposition the overlay if the user has pinch zoomed in and is scrolling the viewport around.\n    let onScroll = () => {\n      if (isResizing.current) {\n        onResize();\n      }\n    };\n\n    visualViewport?.addEventListener('resize', onResize);\n    visualViewport?.addEventListener('scroll', onScroll);\n    return () => {\n      visualViewport?.removeEventListener('resize', onResize);\n      visualViewport?.removeEventListener('scroll', onScroll);\n    };\n  }, [updatePosition]);\n\n  let close = useCallback(() => {\n    if (!isResizing.current) {\n      onClose();\n    }\n  }, [onClose, isResizing]);\n\n  // When scrolling a parent scrollable region of the trigger (other than the body),\n  // we hide the popover. Otherwise, its position would be incorrect.\n  useCloseOnScroll({\n    triggerRef: targetRef,\n    isOpen,\n    onClose: onClose && close\n  });\n\n  return {\n    overlayProps: {\n      style: {\n        position: 'absolute',\n        zIndex: 100000, // should match the z-index in ModalTrigger\n        ...position.position,\n        maxHeight: position.maxHeight\n      }\n    },\n    placement: position.placement,\n    arrowProps: {\n      'aria-hidden': 'true',\n      role: 'presentation',\n      style: {\n        left: position.arrowOffsetLeft,\n        top: position.arrowOffsetTop\n      }\n    },\n    updatePosition\n  };\n}\n\nfunction useResize(onResize) {\n  useLayoutEffect(() => {\n    window.addEventListener('resize', onResize, false);\n    return () => {\n      window.removeEventListener('resize', onResize, false);\n    };\n  }, [onResize]);\n}\n\nfunction translateRTL(position, direction) {\n  if (direction === 'rtl') {\n    return position.replace('start', 'right').replace('end', 'left');\n  }\n  return position.replace('start', 'left').replace('end', 'right');\n}\n"]},"metadata":{},"sourceType":"module"}