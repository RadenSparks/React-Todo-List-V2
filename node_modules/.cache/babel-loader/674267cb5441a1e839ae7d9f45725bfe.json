{"ast":null,"code":"import { mergeProps as $7JYt2$mergeProps } from \"@react-aria/utils\";\nimport $7JYt2$react, { useState as $7JYt2$useState, useMemo as $7JYt2$useMemo } from \"react\";\nimport { useFocusWithin as $7JYt2$useFocusWithin } from \"@react-aria/interactions\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nconst $5c3e21d68f1c4674$var$styles = {\n  border: 0,\n  clip: 'rect(0 0 0 0)',\n  clipPath: 'inset(50%)',\n  height: '1px',\n  margin: '-1px',\n  overflow: 'hidden',\n  padding: 0,\n  position: 'absolute',\n  width: '1px',\n  whiteSpace: 'nowrap'\n};\nfunction $5c3e21d68f1c4674$export$a966af930f325cab() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let {\n    style: style,\n    isFocusable: isFocusable\n  } = props;\n  let [isFocused, setFocused] = (0, $7JYt2$useState)(false);\n  let {\n    focusWithinProps: focusWithinProps\n  } = (0, $7JYt2$useFocusWithin)({\n    isDisabled: !isFocusable,\n    onFocusWithinChange: val => setFocused(val)\n  });\n  // If focused, don't hide the element.\n  let combinedStyles = (0, $7JYt2$useMemo)(() => {\n    if (isFocused) return style;else if (style) return {\n      ...$5c3e21d68f1c4674$var$styles,\n      ...style\n    };else return $5c3e21d68f1c4674$var$styles;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isFocused]);\n  return {\n    visuallyHiddenProps: {\n      ...focusWithinProps,\n      style: combinedStyles\n    }\n  };\n}\nfunction $5c3e21d68f1c4674$export$439d29a4e110a164(props) {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  let {\n    children: children,\n    elementType: Element = 'div',\n    isFocusable: isFocusable,\n    style: style,\n    ...otherProps\n  } = props;\n  let {\n    visuallyHiddenProps: visuallyHiddenProps\n  } = $5c3e21d68f1c4674$export$a966af930f325cab(props);\n  return /*#__PURE__*/(0, $7JYt2$react).createElement(Element, (0, $7JYt2$mergeProps)(otherProps, visuallyHiddenProps), children);\n}\nexport { $5c3e21d68f1c4674$export$a966af930f325cab as useVisuallyHidden, $5c3e21d68f1c4674$export$439d29a4e110a164 as VisuallyHidden };","map":{"version":3,"mappings":";;;;AAAA;;;;;;;;;;;;AA+BA,MAAMA,+BAAwB;EAC5BC,QAAQ;EACRC,MAAM;EACNC,UAAU;EACVC,QAAQ;EACRC,QAAQ;EACRC,UAAU;EACVC,SAAS;EACTC,UAAU;EACVC,OAAO;EACPC,YAAY;AACd;AAUO,SAASC,4CAAiD;EAAA,IAA/BC,4EAA6B,CAAC,CAAC;EAC/D,IAAI;IAAAC,OACFA,KAAK;IAAAC,aACLA;EAAW,CACZ,GAAGF;EAEJ,IAAI,CAACG,WAAWC,WAAW,GAAG,mBAAO,EAAE;EACvC,IAAI;IAAAC,kBAACA;EAAgB,CAAC,GAAG,yBAAa,EAAE;IACtCC,YAAY,CAACJ;IACbK,qBAAsBC,OAAQJ,WAAWI;EAC3C;EAEA;EACA,IAAIC,iBAAiB,kBAAM,EAAE;IAC3B,IAAIN,WACF,OAAOF,WACF,IAAIA,OACT,OAAO;MAAC,GAAGb,4BAAM;MAAE,GAAGa;IAAK,OAE3B,OAAOb;IAEX;EACA,GAAG,CAACe,UAAU;EAEd,OAAO;IACLO,qBAAqB;MACnB,GAAGL,gBAAgB;MACnBJ,OAAOQ;IACT;EACF;AACF;AAMO,SAASE,0CAAeX,KAA0B;EACvD;EACA,IAAI;IAAAY,UAACA,QAAQ;IAAEC,aAAaC,UAAU,KAAK;IAAAZ,aAAEA,WAAW;IAAAD,OAAEA,KAAK;IAAE,GAAGc;EAAA,CAAW,GAAGf;EAClF,IAAI;IAAAU,qBAACA;EAAmB,CAAC,GAAGX,0CAAkBC;EAE9C,oBACE,gCAACc,SAAY,qBAAS,EAAEC,YAAYL,sBACjCE;AAGP","names":["$5c3e21d68f1c4674$var$styles","border","clip","clipPath","height","margin","overflow","padding","position","width","whiteSpace","$5c3e21d68f1c4674$export$a966af930f325cab","props","style","isFocusable","isFocused","setFocused","focusWithinProps","isDisabled","onFocusWithinChange","val","combinedStyles","visuallyHiddenProps","$5c3e21d68f1c4674$export$439d29a4e110a164","children","elementType","Element","otherProps"],"sources":["D:\\Like, for real projects\\React-Todo-List-V2\\node_modules\\@react-aria\\visually-hidden\\dist\\packages\\@react-aria\\visually-hidden\\src\\VisuallyHidden.tsx"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes} from '@react-types/shared';\nimport {mergeProps} from '@react-aria/utils';\nimport React, {CSSProperties, JSXElementConstructor, ReactNode, useMemo, useState} from 'react';\nimport {useFocusWithin} from '@react-aria/interactions';\n\nexport interface VisuallyHiddenProps extends DOMAttributes {\n  /** The content to visually hide. */\n  children?: ReactNode,\n\n  /**\n   * The element type for the container.\n   * @default 'div'\n   */\n  elementType?: string | JSXElementConstructor<any>,\n\n  /** Whether the element should become visible on focus, for example skip links. */\n  isFocusable?: boolean\n}\n\nconst styles: CSSProperties = {\n  border: 0,\n  clip: 'rect(0 0 0 0)',\n  clipPath: 'inset(50%)',\n  height: '1px',\n  margin: '-1px',\n  overflow: 'hidden',\n  padding: 0,\n  position: 'absolute',\n  width: '1px',\n  whiteSpace: 'nowrap'\n};\n\nexport interface VisuallyHiddenAria {\n  visuallyHiddenProps: DOMAttributes\n}\n\n/**\n * Provides props for an element that hides its children visually\n * but keeps content visible to assistive technology.\n */\nexport function useVisuallyHidden(props: VisuallyHiddenProps = {}): VisuallyHiddenAria {\n  let {\n    style,\n    isFocusable\n  } = props;\n\n  let [isFocused, setFocused] = useState(false);\n  let {focusWithinProps} = useFocusWithin({\n    isDisabled: !isFocusable,\n    onFocusWithinChange: (val) => setFocused(val)\n  });\n\n  // If focused, don't hide the element.\n  let combinedStyles = useMemo(() => {\n    if (isFocused) {\n      return style;\n    } else if (style) {\n      return {...styles, ...style};\n    } else {\n      return styles;\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isFocused]);\n\n  return {\n    visuallyHiddenProps: {\n      ...focusWithinProps,\n      style: combinedStyles\n    }\n  };\n}\n\n/**\n * VisuallyHidden hides its children visually, while keeping content visible\n * to screen readers.\n */\nexport function VisuallyHidden(props: VisuallyHiddenProps) {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  let {children, elementType: Element = 'div', isFocusable, style, ...otherProps} = props;\n  let {visuallyHiddenProps} = useVisuallyHidden(props);\n\n  return (\n    <Element {...mergeProps(otherProps, visuallyHiddenProps)}>\n      {children}\n    </Element>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}