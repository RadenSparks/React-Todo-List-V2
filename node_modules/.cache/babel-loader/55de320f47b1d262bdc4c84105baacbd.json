{"ast":null,"code":"import $fzaAv$react from \"react\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nclass $eb2240fc39a57fa5$export$bf788dd355e3a401 {\n  build(props, context) {\n    this.context = context;\n    return $eb2240fc39a57fa5$var$iterable(() => this.iterateCollection(props));\n  }\n  *iterateCollection(props) {\n    let {\n      children: children,\n      items: items\n    } = props;\n    if (typeof children === 'function') {\n      if (!items) throw new Error('props.children was a function but props.items is missing');\n      for (let item of props.items) yield* this.getFullNode({\n        value: item\n      }, {\n        renderer: children\n      });\n    } else {\n      let items = [];\n      (0, $fzaAv$react).Children.forEach(children, child => {\n        items.push(child);\n      });\n      let index = 0;\n      for (let item of items) {\n        let nodes = this.getFullNode({\n          element: item,\n          index: index\n        }, {});\n        for (let node of nodes) {\n          index++;\n          yield node;\n        }\n      }\n    }\n  }\n  getKey(item, partialNode, state, parentKey) {\n    if (item.key != null) return item.key;\n    if (partialNode.type === 'cell' && partialNode.key != null) return `${parentKey}${partialNode.key}`;\n    let v = partialNode.value;\n    if (v != null) {\n      var _v_key;\n      let key = (_v_key = v.key) !== null && _v_key !== void 0 ? _v_key : v.id;\n      if (key == null) throw new Error('No key found for item');\n      return key;\n    }\n    return parentKey ? `${parentKey}.${partialNode.index}` : `$.${partialNode.index}`;\n  }\n  getChildState(state, partialNode) {\n    return {\n      renderer: partialNode.renderer || state.renderer\n    };\n  }\n  *getFullNode(partialNode, state, parentKey, parentNode) {\n    // If there's a value instead of an element on the node, and a parent renderer function is available,\n    // use it to render an element for the value.\n    let element = partialNode.element;\n    if (!element && partialNode.value && state && state.renderer) {\n      let cached = this.cache.get(partialNode.value);\n      if (cached && (!cached.shouldInvalidate || !cached.shouldInvalidate(this.context))) {\n        cached.index = partialNode.index;\n        cached.parentKey = parentNode ? parentNode.key : null;\n        yield cached;\n        return;\n      }\n      element = state.renderer(partialNode.value);\n    }\n    // If there's an element with a getCollectionNode function on its type, then it's a supported component.\n    // Call this function to get a partial node, and recursively build a full node from there.\n    if ((0, $fzaAv$react).isValidElement(element)) {\n      let type = element.type;\n      if (typeof type !== 'function' && typeof type.getCollectionNode !== 'function') {\n        let name = typeof element.type === 'function' ? element.type.name : element.type;\n        throw new Error(`Unknown element <${name}> in collection.`);\n      }\n      let childNodes = type.getCollectionNode(element.props, this.context);\n      let index = partialNode.index;\n      let result = childNodes.next();\n      while (!result.done && result.value) {\n        let childNode = result.value;\n        partialNode.index = index;\n        let nodeKey = childNode.key;\n        if (!nodeKey) nodeKey = childNode.element ? null : this.getKey(element, partialNode, state, parentKey);\n        let nodes = this.getFullNode({\n          ...childNode,\n          key: nodeKey,\n          index: index,\n          wrapper: $eb2240fc39a57fa5$var$compose(partialNode.wrapper, childNode.wrapper)\n        }, this.getChildState(state, childNode), parentKey ? `${parentKey}${element.key}` : element.key, parentNode);\n        let children = [...nodes];\n        for (let node of children) {\n          // Cache the node based on its value\n          node.value = childNode.value || partialNode.value;\n          if (node.value) this.cache.set(node.value, node);\n          // The partial node may have specified a type for the child in order to specify a constraint.\n          // Verify that the full node that was built recursively matches this type.\n          if (partialNode.type && node.type !== partialNode.type) throw new Error(`Unsupported type <${$eb2240fc39a57fa5$var$capitalize(node.type)}> in <${$eb2240fc39a57fa5$var$capitalize(parentNode.type)}>. Only <${$eb2240fc39a57fa5$var$capitalize(partialNode.type)}> is supported.`);\n          index++;\n          yield node;\n        }\n        result = childNodes.next(children);\n      }\n      return;\n    }\n    // Ignore invalid elements\n    if (partialNode.key == null) return;\n    // Create full node\n    let builder = this;\n    let node = {\n      type: partialNode.type,\n      props: partialNode.props,\n      key: partialNode.key,\n      parentKey: parentNode ? parentNode.key : null,\n      value: partialNode.value,\n      level: parentNode ? parentNode.level + 1 : 0,\n      index: partialNode.index,\n      rendered: partialNode.rendered,\n      textValue: partialNode.textValue,\n      'aria-label': partialNode['aria-label'],\n      wrapper: partialNode.wrapper,\n      shouldInvalidate: partialNode.shouldInvalidate,\n      hasChildNodes: partialNode.hasChildNodes,\n      childNodes: $eb2240fc39a57fa5$var$iterable(function* () {\n        if (!partialNode.hasChildNodes) return;\n        let index = 0;\n        for (let child of partialNode.childNodes()) {\n          // Ensure child keys are globally unique by prepending the parent node's key\n          if (child.key != null)\n            // TODO: Remove this line entirely and enforce that users always provide unique keys.\n            // Currently this line will have issues when a parent has a key `a` and a child with key `bc`\n            // but another parent has key `ab` and its child has a key `c`. The combined keys would result in both\n            // children having a key of `abc`.\n            child.key = `${node.key}${child.key}`;\n          child.index = index;\n          let nodes = builder.getFullNode(child, builder.getChildState(state, child), node.key, node);\n          for (let node of nodes) {\n            index++;\n            yield node;\n          }\n        }\n      })\n    };\n    yield node;\n  }\n  constructor() {\n    this.cache = new WeakMap();\n  }\n}\n// Wraps an iterator function as an iterable object, and caches the results.\nfunction $eb2240fc39a57fa5$var$iterable(iterator) {\n  let cache = [];\n  let iterable = null;\n  return {\n    *[Symbol.iterator]() {\n      for (let item of cache) yield item;\n      if (!iterable) iterable = iterator();\n      for (let item of iterable) {\n        cache.push(item);\n        yield item;\n      }\n    }\n  };\n}\nfunction $eb2240fc39a57fa5$var$compose(outer, inner) {\n  if (outer && inner) return element => outer(inner(element));\n  if (outer) return outer;\n  if (inner) return inner;\n}\nfunction $eb2240fc39a57fa5$var$capitalize(str) {\n  return str[0].toUpperCase() + str.slice(1);\n}\nexport { $eb2240fc39a57fa5$export$bf788dd355e3a401 as CollectionBuilder };","map":{"version":3,"mappings":"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","names":["$eb2240fc39a57fa5$export$bf788dd355e3a401","build","props","context","$eb2240fc39a57fa5$var$iterable","iterateCollection","children","items","Error","item","getFullNode","value","renderer","Children","forEach","child","push","index","nodes","element","node","getKey","partialNode","state","parentKey","key","type","v","_v_key","id","getChildState","parentNode","cached","cache","get","shouldInvalidate","isValidElement","getCollectionNode","name","childNodes","result","next","done","childNode","nodeKey","wrapper","$eb2240fc39a57fa5$var$compose","set","$eb2240fc39a57fa5$var$capitalize","builder","level","rendered","textValue","hasChildNodes","WeakMap","iterator","iterable","Symbol","outer","inner","str","toUpperCase","slice"],"sources":["D:\\Like, for real projects\\React-Todo-List-V2\\node_modules\\@react-stately\\selection\\node_modules\\@react-stately\\collections\\dist\\packages\\@react-stately\\collections\\src\\CollectionBuilder.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CollectionBase, CollectionElement, Key, Node} from '@react-types/shared';\nimport {PartialNode} from './types';\nimport React, {ReactElement} from 'react';\n\ninterface CollectionBuilderState {\n  renderer?: (value: any) => ReactElement\n}\n\nexport class CollectionBuilder<T extends object> {\n  private context?: unknown;\n  private cache: WeakMap<T, Node<T>> = new WeakMap();\n\n  build(props: CollectionBase<T>, context?: unknown) {\n    this.context = context;\n    return iterable(() => this.iterateCollection(props));\n  }\n\n  private *iterateCollection(props: CollectionBase<T>) {\n    let {children, items} = props;\n\n    if (typeof children === 'function') {\n      if (!items) {\n        throw new Error('props.children was a function but props.items is missing');\n      }\n\n      for (let item of props.items) {\n        yield* this.getFullNode({\n          value: item\n        }, {renderer: children});\n      }\n    } else {\n      let items: CollectionElement<T>[] = [];\n      React.Children.forEach(children, child => {\n        items.push(child);\n      });\n\n      let index = 0;\n      for (let item of items) {\n        let nodes = this.getFullNode({\n          element: item,\n          index: index\n        }, {});\n\n        for (let node of nodes) {\n          index++;\n          yield node;\n        }\n      }\n    }\n  }\n\n  private getKey(item: CollectionElement<T>, partialNode: PartialNode<T>, state: CollectionBuilderState, parentKey?: Key): Key {\n    if (item.key != null) {\n      return item.key;\n    }\n\n    if (partialNode.type === 'cell' && partialNode.key != null) {\n      return `${parentKey}${partialNode.key}`;\n    }\n\n    let v = partialNode.value as any;\n    if (v != null) {\n      let key = v.key ?? v.id;\n      if (key == null) {\n        throw new Error('No key found for item');\n      }\n\n      return key;\n    }\n\n    return parentKey ? `${parentKey}.${partialNode.index}` : `$.${partialNode.index}`;\n  }\n\n  private getChildState(state: CollectionBuilderState, partialNode: PartialNode<T>) {\n    return {\n      renderer: partialNode.renderer || state.renderer\n    };\n  }\n\n  private *getFullNode(partialNode: PartialNode<T>, state: CollectionBuilderState, parentKey?: Key, parentNode?: Node<T>): Generator<Node<T>> {\n    // If there's a value instead of an element on the node, and a parent renderer function is available,\n    // use it to render an element for the value.\n    let element = partialNode.element;\n    if (!element && partialNode.value && state && state.renderer) {\n      let cached = this.cache.get(partialNode.value);\n      if (cached && (!cached.shouldInvalidate || !cached.shouldInvalidate(this.context))) {\n        cached.index = partialNode.index;\n        cached.parentKey = parentNode ? parentNode.key : null;\n        yield cached;\n        return;\n      }\n\n      element = state.renderer(partialNode.value);\n    }\n\n    // If there's an element with a getCollectionNode function on its type, then it's a supported component.\n    // Call this function to get a partial node, and recursively build a full node from there.\n    if (React.isValidElement(element)) {\n      let type = element.type as any;\n      if (typeof type !== 'function' && typeof type.getCollectionNode !== 'function') {\n        let name = typeof element.type === 'function' ? element.type.name : element.type;\n        throw new Error(`Unknown element <${name}> in collection.`);\n      }\n\n      let childNodes = type.getCollectionNode(element.props, this.context) as Generator<PartialNode<T>, void, Node<T>[]>;\n      let index = partialNode.index;\n      let result = childNodes.next();\n      while (!result.done && result.value) {\n        let childNode = result.value;\n\n        partialNode.index = index;\n\n        let nodeKey = childNode.key;\n        if (!nodeKey) {\n          nodeKey = childNode.element ? null : this.getKey(element as CollectionElement<T>, partialNode, state, parentKey);\n        }\n\n        let nodes = this.getFullNode({\n          ...childNode,\n          key: nodeKey,\n          index,\n          wrapper: compose(partialNode.wrapper, childNode.wrapper)\n        }, this.getChildState(state, childNode), parentKey ? `${parentKey}${element.key}` : element.key, parentNode);\n\n        let children = [...nodes];\n        for (let node of children) {\n          // Cache the node based on its value\n          node.value = childNode.value || partialNode.value;\n          if (node.value) {\n            this.cache.set(node.value, node);\n          }\n\n          // The partial node may have specified a type for the child in order to specify a constraint.\n          // Verify that the full node that was built recursively matches this type.\n          if (partialNode.type && node.type !== partialNode.type) {\n            throw new Error(`Unsupported type <${capitalize(node.type)}> in <${capitalize(parentNode.type)}>. Only <${capitalize(partialNode.type)}> is supported.`);\n          }\n\n          index++;\n          yield node;\n        }\n\n        result = childNodes.next(children);\n      }\n\n      return;\n    }\n\n    // Ignore invalid elements\n    if (partialNode.key == null) {\n      return;\n    }\n\n    // Create full node\n    let builder = this;\n    let node: Node<T> = {\n      type: partialNode.type,\n      props: partialNode.props,\n      key: partialNode.key,\n      parentKey: parentNode ? parentNode.key : null,\n      value: partialNode.value,\n      level: parentNode ? parentNode.level + 1 : 0,\n      index: partialNode.index,\n      rendered: partialNode.rendered,\n      textValue: partialNode.textValue,\n      'aria-label': partialNode['aria-label'],\n      wrapper: partialNode.wrapper,\n      shouldInvalidate: partialNode.shouldInvalidate,\n      hasChildNodes: partialNode.hasChildNodes,\n      childNodes: iterable(function *() {\n        if (!partialNode.hasChildNodes) {\n          return;\n        }\n\n        let index = 0;\n        for (let child of partialNode.childNodes()) {\n          // Ensure child keys are globally unique by prepending the parent node's key\n          if (child.key != null) {\n            // TODO: Remove this line entirely and enforce that users always provide unique keys.\n            // Currently this line will have issues when a parent has a key `a` and a child with key `bc`\n            // but another parent has key `ab` and its child has a key `c`. The combined keys would result in both\n            // children having a key of `abc`.\n            child.key = `${node.key}${child.key}`;\n          }\n\n          child.index = index;\n          let nodes = builder.getFullNode(child, builder.getChildState(state, child), node.key, node);\n          for (let node of nodes) {\n            index++;\n            yield node;\n          }\n        }\n      })\n    };\n\n    yield node;\n  }\n}\n\n// Wraps an iterator function as an iterable object, and caches the results.\nfunction iterable<T>(iterator: () => IterableIterator<Node<T>>): Iterable<Node<T>> {\n  let cache = [];\n  let iterable = null;\n  return {\n    *[Symbol.iterator]() {\n      for (let item of cache) {\n        yield item;\n      }\n\n      if (!iterable) {\n        iterable = iterator();\n      }\n\n      for (let item of iterable) {\n        cache.push(item);\n        yield item;\n      }\n    }\n  };\n}\n\ntype Wrapper = (element: ReactElement) => ReactElement;\nfunction compose(outer: Wrapper | void, inner: Wrapper | void): Wrapper {\n  if (outer && inner) {\n    return (element) => outer(inner(element));\n  }\n\n  if (outer) {\n    return outer;\n  }\n\n  if (inner) {\n    return inner;\n  }\n}\n\nfunction capitalize(str: string) {\n  return str[0].toUpperCase() + str.slice(1);\n}\n"]},"metadata":{},"sourceType":"module"}