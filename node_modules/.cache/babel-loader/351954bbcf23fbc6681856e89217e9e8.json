{"ast":null,"code":"import { mergeProps as $bvdLj$mergeProps, filterDOMProps as $bvdLj$filterDOMProps, useFormReset as $bvdLj$useFormReset } from \"@react-aria/utils\";\nimport { useFocusable as $bvdLj$useFocusable } from \"@react-aria/focus\";\nimport { usePress as $bvdLj$usePress } from \"@react-aria/interactions\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $d2c8e2b0480f3f34$export$cbe85ee05b554577(props, state, ref) {\n  let {\n    isDisabled = false,\n    isReadOnly = false,\n    value: value,\n    name: name,\n    children: children,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby,\n    validationState = 'valid',\n    isInvalid: isInvalid\n  } = props;\n  let onChange = e => {\n    // since we spread props on label, onChange will end up there as well as in here.\n    // so we have to stop propagation at the lowest level that we care about\n    e.stopPropagation();\n    state.setSelected(e.target.checked);\n  };\n  let hasChildren = children != null;\n  let hasAriaLabel = ariaLabel != null || ariaLabelledby != null;\n  if (!hasChildren && !hasAriaLabel) console.warn('If you do not provide children, you must specify an aria-label for accessibility');\n  // This handles focusing the input on pointer down, which Safari does not do by default.\n  let {\n    pressProps: pressProps,\n    isPressed: isPressed\n  } = (0, $bvdLj$usePress)({\n    isDisabled: isDisabled\n  });\n  // iOS does not toggle checkboxes if you drag off and back onto the label, so handle it ourselves.\n  let {\n    pressProps: labelProps,\n    isPressed: isLabelPressed\n  } = (0, $bvdLj$usePress)({\n    isDisabled: isDisabled || isReadOnly,\n    onPress() {\n      state.toggle();\n    }\n  });\n  let {\n    focusableProps: focusableProps\n  } = (0, $bvdLj$useFocusable)(props, ref);\n  let interactions = (0, $bvdLj$mergeProps)(pressProps, focusableProps);\n  let domProps = (0, $bvdLj$filterDOMProps)(props, {\n    labelable: true\n  });\n  (0, $bvdLj$useFormReset)(ref, state.isSelected, state.setSelected);\n  return {\n    labelProps: (0, $bvdLj$mergeProps)(labelProps, {\n      onClick: e => e.preventDefault()\n    }),\n    inputProps: (0, $bvdLj$mergeProps)(domProps, {\n      'aria-invalid': isInvalid || validationState === 'invalid' || undefined,\n      'aria-errormessage': props['aria-errormessage'],\n      'aria-controls': props['aria-controls'],\n      'aria-readonly': isReadOnly || undefined,\n      onChange: onChange,\n      disabled: isDisabled,\n      ...(value == null ? {} : {\n        value: value\n      }),\n      name: name,\n      type: 'checkbox',\n      ...interactions\n    }),\n    isSelected: state.isSelected,\n    isPressed: isPressed || isLabelPressed,\n    isDisabled: isDisabled,\n    isReadOnly: isReadOnly,\n    isInvalid: isInvalid || validationState === 'invalid'\n  };\n}\nexport { $d2c8e2b0480f3f34$export$cbe85ee05b554577 as useToggle };","map":{"version":3,"mappings":";;;;AAAA;;;;;;;;;;;;AAwCO,SAASA,0CAAUC,KAAsB,EAAEC,KAAkB,EAAEC,GAAuC;EAC3G,IAAI;IACFC,aAAa;IACbC,aAAa;IAAAC,OACbA,KAAK;IAAAC,MACLA,IAAI;IAAAC,UACJA,QAAQ;IACR,cAAcC,SAAS;IACvB,mBAAmBC,cAAc;IACjCC,kBAAkB;IAAAC,WAClBA;EAAS,CACV,GAAGX;EAEJ,IAAIY,WAAYC;IACd;IACA;IACAA,EAAEC,eAAe;IACjBb,MAAMc,WAAW,CAACF,EAAEG,MAAM,CAACC,OAAO;EACpC;EAEA,IAAIC,cAAcX,YAAY;EAC9B,IAAIY,eAAeX,aAAa,QAAQC,kBAAkB;EAC1D,IAAI,CAACS,eAAe,CAACC,cACnBC,QAAQC,IAAI,CAAC;EAGf;EACA,IAAI;IAAAC,YAACA,UAAU;IAAAC,WAAEA;EAAS,CAAC,GAAG,mBAAO,EAAE;gBACrCpB;EACF;EAEA;EACA,IAAI;IAACmB,YAAYE,UAAU;IAAED,WAAWE;EAAc,CAAC,GAAG,mBAAO,EAAE;IACjEtB,YAAYA,cAAcC;IAC1BsB;MACEzB,MAAM0B,MAAM;IACd;EACF;EAEA,IAAI;IAAAC,gBAACA;EAAc,CAAC,GAAG,uBAAW,EAAE5B,OAAOE;EAC3C,IAAI2B,eAAe,qBAAS,EAAEP,YAAYM;EAC1C,IAAIE,WAAW,yBAAa,EAAE9B,OAAO;IAAC+B,WAAW;EAAI;EAErD,uBAAW,EAAE7B,KAAKD,MAAM+B,UAAU,EAAE/B,MAAMc,WAAW;EAErD,OAAO;IACLS,YAAY,qBAAS,EAAEA,YAAY;MAACS,SAASpB,KAAKA,EAAEqB,cAAc;IAAE;IACpEC,YAAY,qBAAS,EAAEL,UAAU;MAC/B,gBAAgBnB,aAAaD,oBAAoB,aAAa0B;MAC9D,qBAAqBpC,KAAK,CAAC,oBAAoB;MAC/C,iBAAiBA,KAAK,CAAC,gBAAgB;MACvC,iBAAiBI,cAAcgC;gBAC/BxB;MACAyB,UAAUlC;MACV,IAAIE,SAAS,OAAO,CAAC,IAAI;eAACA;MAAK,CAAC;YAChCC;MACAgC,MAAM;MACN,GAAGT;IACL;IACAG,YAAY/B,MAAM+B,UAAU;IAC5BT,WAAWA,aAAaE;gBACxBtB;gBACAC;IACAO,WAAWA,aAAaD,oBAAoB;EAC9C;AACF","names":["$d2c8e2b0480f3f34$export$cbe85ee05b554577","props","state","ref","isDisabled","isReadOnly","value","name","children","ariaLabel","ariaLabelledby","validationState","isInvalid","onChange","e","stopPropagation","setSelected","target","checked","hasChildren","hasAriaLabel","console","warn","pressProps","isPressed","labelProps","isLabelPressed","onPress","toggle","focusableProps","interactions","domProps","labelable","isSelected","onClick","preventDefault","inputProps","undefined","disabled","type"],"sources":["D:\\Like, for real projects\\React-Todo-List-V2\\node_modules\\@react-aria\\toggle\\dist\\packages\\@react-aria\\toggle\\src\\useToggle.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaToggleProps} from '@react-types/checkbox';\nimport {filterDOMProps, mergeProps, useFormReset} from '@react-aria/utils';\nimport {InputHTMLAttributes, LabelHTMLAttributes} from 'react';\nimport {RefObject} from '@react-types/shared';\nimport {ToggleState} from '@react-stately/toggle';\nimport {useFocusable} from '@react-aria/focus';\nimport {usePress} from '@react-aria/interactions';\n\nexport interface ToggleAria {\n  /** Props to be spread on the label element. */\n  labelProps: LabelHTMLAttributes<HTMLLabelElement>,\n  /** Props to be spread on the input element. */\n  inputProps: InputHTMLAttributes<HTMLInputElement>,\n  /** Whether the toggle is selected. */\n  isSelected: boolean,\n  /** Whether the toggle is in a pressed state. */\n  isPressed: boolean,\n  /** Whether the toggle is disabled. */\n  isDisabled: boolean,\n  /** Whether the toggle is read only. */\n  isReadOnly: boolean,\n  /** Whether the toggle is invalid. */\n  isInvalid: boolean\n}\n\n/**\n * Handles interactions for toggle elements, e.g. Checkboxes and Switches.\n */\nexport function useToggle(props: AriaToggleProps, state: ToggleState, ref: RefObject<HTMLInputElement | null>): ToggleAria {\n  let {\n    isDisabled = false,\n    isReadOnly = false,\n    value,\n    name,\n    children,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby,\n    validationState = 'valid',\n    isInvalid\n  } = props;\n\n  let onChange = (e) => {\n    // since we spread props on label, onChange will end up there as well as in here.\n    // so we have to stop propagation at the lowest level that we care about\n    e.stopPropagation();\n    state.setSelected(e.target.checked);\n  };\n\n  let hasChildren = children != null;\n  let hasAriaLabel = ariaLabel != null || ariaLabelledby != null;\n  if (!hasChildren && !hasAriaLabel) {\n    console.warn('If you do not provide children, you must specify an aria-label for accessibility');\n  }\n\n  // This handles focusing the input on pointer down, which Safari does not do by default.\n  let {pressProps, isPressed} = usePress({\n    isDisabled\n  });\n\n  // iOS does not toggle checkboxes if you drag off and back onto the label, so handle it ourselves.\n  let {pressProps: labelProps, isPressed: isLabelPressed} = usePress({\n    isDisabled: isDisabled || isReadOnly,\n    onPress() {\n      state.toggle();\n    }\n  });\n\n  let {focusableProps} = useFocusable(props, ref);\n  let interactions = mergeProps(pressProps, focusableProps);\n  let domProps = filterDOMProps(props, {labelable: true});\n\n  useFormReset(ref, state.isSelected, state.setSelected);\n\n  return {\n    labelProps: mergeProps(labelProps, {onClick: e => e.preventDefault()}),\n    inputProps: mergeProps(domProps, {\n      'aria-invalid': isInvalid || validationState === 'invalid' || undefined,\n      'aria-errormessage': props['aria-errormessage'],\n      'aria-controls': props['aria-controls'],\n      'aria-readonly': isReadOnly || undefined,\n      onChange,\n      disabled: isDisabled,\n      ...(value == null ? {} : {value}),\n      name,\n      type: 'checkbox',\n      ...interactions\n    }),\n    isSelected: state.isSelected,\n    isPressed: isPressed || isLabelPressed,\n    isDisabled,\n    isReadOnly,\n    isInvalid: isInvalid || validationState === 'invalid'\n  };\n}\n"]},"metadata":{},"sourceType":"module"}