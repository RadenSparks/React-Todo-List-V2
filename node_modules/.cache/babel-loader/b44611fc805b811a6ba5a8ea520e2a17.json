{"ast":null,"code":"import { useListState as $e72dd72e1c76a225$export$2f645645f7bca764 } from \"./useListState.mjs\";\nimport { useControlledState as $eBozH$useControlledState } from \"@react-stately/utils\";\nimport { useMemo as $eBozH$useMemo } from \"react\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $a0d645289fe9b86b$export$e7f05e985daf4b5f(props) {\n  var _props_defaultSelectedKey;\n  let [selectedKey, setSelectedKey] = (0, $eBozH$useControlledState)(props.selectedKey, (_props_defaultSelectedKey = props.defaultSelectedKey) !== null && _props_defaultSelectedKey !== void 0 ? _props_defaultSelectedKey : null, props.onSelectionChange);\n  let selectedKeys = (0, $eBozH$useMemo)(() => selectedKey != null ? [selectedKey] : [], [selectedKey]);\n  let {\n    collection: collection,\n    disabledKeys: disabledKeys,\n    selectionManager: selectionManager\n  } = (0, $e72dd72e1c76a225$export$2f645645f7bca764)({\n    ...props,\n    selectionMode: 'single',\n    disallowEmptySelection: true,\n    allowDuplicateSelectionEvents: true,\n    selectedKeys: selectedKeys,\n    onSelectionChange: keys => {\n      var _keys_values_next_value;\n      let key = (_keys_values_next_value = keys.values().next().value) !== null && _keys_values_next_value !== void 0 ? _keys_values_next_value : null;\n      // Always fire onSelectionChange, even if the key is the same\n      // as the current key (useControlledState does not).\n      if (key === selectedKey && props.onSelectionChange) props.onSelectionChange(key);\n      setSelectedKey(key);\n    }\n  });\n  let selectedItem = selectedKey != null ? collection.getItem(selectedKey) : null;\n  return {\n    collection: collection,\n    disabledKeys: disabledKeys,\n    selectionManager: selectionManager,\n    selectedKey: selectedKey,\n    setSelectedKey: setSelectedKey,\n    selectedItem: selectedItem\n  };\n}\nexport { $a0d645289fe9b86b$export$e7f05e985daf4b5f as useSingleSelectListState };","map":{"version":3,"mappings":";;;;AAAA;;;;;;;;;;;;AAuCO,SAASA,0CAA2CC,KAA+B;MACdC;EAA1E,IAAI,CAACC,aAAaC,eAAe,GAAG,6BAAiB,EAAEH,MAAME,WAAW,EAAE,mCAAME,kBAAkB,cAAxBH,mEAA4B,MAAMD,MAAMK,iBAAiB;EACnI,IAAIC,eAAe,kBAAM,EAAE,MAAMJ,eAAe,OAAO,CAACA,YAAY,GAAG,EAAE,EAAE,CAACA,YAAY;EACxF,IAAI;IAAAK,YAACA,UAAU;IAAAC,cAAEA,YAAY;IAAAC,kBAAEA;EAAgB,CAAC,GAAG,6CAAW,EAAE;IAC9D,GAAGT,KAAK;IACRU,eAAe;IACfC,wBAAwB;IACxBC,+BAA+B;kBAC/BN;IACAD,mBAAoBQ;UACRC;MAAV,IAAIC,MAAM,gCAAKC,MAAM,GAAGC,IAAI,GAAGC,KAAK,cAA1BJ,+DAA8B;MAExC;MACA;MACA,IAAIC,QAAQb,eAAeF,MAAMK,iBAAiB,EAChDL,MAAMK,iBAAiB,CAACU;MAG1BZ,eAAeY;IACjB;EACF;EAEA,IAAII,eAAejB,eAAe,OAC9BK,WAAWa,OAAO,CAAClB,eACnB;EAEJ,OAAO;gBACLK;kBACAC;sBACAC;iBACAP;oBACAC;kBACAgB;EACF;AACF","names":["$a0d645289fe9b86b$export$e7f05e985daf4b5f","props","_props_defaultSelectedKey","selectedKey","setSelectedKey","defaultSelectedKey","onSelectionChange","selectedKeys","collection","disabledKeys","selectionManager","selectionMode","disallowEmptySelection","allowDuplicateSelectionEvents","keys","_keys_values_next_value","key","values","next","value","selectedItem","getItem"],"sources":["D:\\Like, for real projects\\React-Todo-List-V2\\node_modules\\@react-stately\\list\\dist\\packages\\@react-stately\\list\\src\\useSingleSelectListState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CollectionStateBase, Key, Node, SingleSelection} from '@react-types/shared';\nimport {ListState, useListState} from './useListState';\nimport {useControlledState} from '@react-stately/utils';\nimport {useMemo} from 'react';\n\nexport interface SingleSelectListProps<T> extends CollectionStateBase<T>, Omit<SingleSelection, 'disallowEmptySelection'> {\n  /** Filter function to generate a filtered list of nodes. */\n  filter?: (nodes: Iterable<Node<T>>) => Iterable<Node<T>>,\n  /** @private */\n  suppressTextValueWarning?: boolean\n}\n\nexport interface SingleSelectListState<T> extends ListState<T> {\n  /** The key for the currently selected item. */\n  readonly selectedKey: Key,\n\n  /** Sets the selected key. */\n  setSelectedKey(key: Key | null): void,\n\n  /** The value of the currently selected item. */\n  readonly selectedItem: Node<T>\n}\n\n/**\n * Provides state management for list-like components with single selection.\n * Handles building a collection of items from props, and manages selection state.\n */\nexport function useSingleSelectListState<T extends object>(props: SingleSelectListProps<T>): SingleSelectListState<T>  {\n  let [selectedKey, setSelectedKey] = useControlledState(props.selectedKey, props.defaultSelectedKey ?? null, props.onSelectionChange);\n  let selectedKeys = useMemo(() => selectedKey != null ? [selectedKey] : [], [selectedKey]);\n  let {collection, disabledKeys, selectionManager} = useListState({\n    ...props,\n    selectionMode: 'single',\n    disallowEmptySelection: true,\n    allowDuplicateSelectionEvents: true,\n    selectedKeys,\n    onSelectionChange: (keys: Set<Key>) => {\n      let key = keys.values().next().value ?? null;\n\n      // Always fire onSelectionChange, even if the key is the same\n      // as the current key (useControlledState does not).\n      if (key === selectedKey && props.onSelectionChange) {\n        props.onSelectionChange(key);\n      }\n\n      setSelectedKey(key);\n    }\n  });\n\n  let selectedItem = selectedKey != null\n    ? collection.getItem(selectedKey)\n    : null;\n\n  return {\n    collection,\n    disabledKeys,\n    selectionManager,\n    selectedKey,\n    setSelectedKey,\n    selectedItem\n  };\n}\n"]},"metadata":{},"sourceType":"module"}