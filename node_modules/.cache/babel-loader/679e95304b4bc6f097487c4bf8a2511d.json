{"ast":null,"code":"/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */class $16805b1b18093c5f$export$de3fdf6493c353d {\n  *[Symbol.iterator]() {\n    yield* [...this.rows];\n  }\n  get size() {\n    return [...this.rows].length;\n  }\n  getKeys() {\n    return this.keyMap.keys();\n  }\n  getKeyBefore(key) {\n    let node = this.keyMap.get(key);\n    return node ? node.prevKey : null;\n  }\n  getKeyAfter(key) {\n    let node = this.keyMap.get(key);\n    return node ? node.nextKey : null;\n  }\n  getFirstKey() {\n    var _;\n    return (_ = [...this.rows][0]) === null || _ === void 0 ? void 0 : _.key;\n  }\n  getLastKey() {\n    var _rows_;\n    let rows = [...this.rows];\n    return (_rows_ = rows[rows.length - 1]) === null || _rows_ === void 0 ? void 0 : _rows_.key;\n  }\n  getItem(key) {\n    return this.keyMap.get(key);\n  }\n  at(idx) {\n    const keys = [...this.getKeys()];\n    return this.getItem(keys[idx]);\n  }\n  getChildren(key) {\n    let node = this.keyMap.get(key);\n    return (node === null || node === void 0 ? void 0 : node.childNodes) || [];\n  }\n  constructor(opts) {\n    this.keyMap = new Map();\n    this.keyMap = new Map();\n    this.columnCount = opts === null || opts === void 0 ? void 0 : opts.columnCount;\n    this.rows = [];\n    let visit = node => {\n      // If the node is the same object as the previous node for the same key,\n      // we can skip this node and its children. We always visit columns though,\n      // because we depend on order to build the columns array.\n      let prevNode = this.keyMap.get(node.key);\n      if (opts.visitNode) node = opts.visitNode(node);\n      this.keyMap.set(node.key, node);\n      let childKeys = new Set();\n      let last;\n      for (let child of node.childNodes) {\n        if (child.type === 'cell' && child.parentKey == null)\n          // if child is a cell parent key isn't already established by the collection, match child node to parent row\n          child.parentKey = node.key;\n        childKeys.add(child.key);\n        if (last) {\n          last.nextKey = child.key;\n          child.prevKey = last.key;\n        } else child.prevKey = null;\n        visit(child);\n        last = child;\n      }\n      if (last) last.nextKey = null;\n      // Remove deleted nodes and their children from the key map\n      if (prevNode) {\n        for (let child of prevNode.childNodes) if (!childKeys.has(child.key)) remove(child);\n      }\n    };\n    let remove = node => {\n      this.keyMap.delete(node.key);\n      for (let child of node.childNodes) if (this.keyMap.get(child.key) === child) remove(child);\n    };\n    let last;\n    opts.items.forEach((node, i) => {\n      let rowNode = {\n        level: 0,\n        key: 'row-' + i,\n        type: 'row',\n        value: undefined,\n        hasChildNodes: true,\n        childNodes: [...node.childNodes],\n        rendered: undefined,\n        textValue: undefined,\n        ...node\n      };\n      if (last) {\n        last.nextKey = rowNode.key;\n        rowNode.prevKey = last.key;\n      } else rowNode.prevKey = null;\n      this.rows.push(rowNode);\n      visit(rowNode);\n      last = rowNode;\n    });\n    if (last) last.nextKey = null;\n  }\n}\nexport { $16805b1b18093c5f$export$de3fdf6493c353d as GridCollection };","map":{"version":3,"mappings":"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","names":["$16805b1b18093c5f$export$de3fdf6493c353d","Symbol","iterator","rows","size","length","getKeys","keyMap","keys","getKeyBefore","key","node","get","prevKey","getKeyAfter","nextKey","getFirstKey","_","getLastKey","_rows_","getItem","at","idx","getChildren","childNodes","constructor","opts","Map","columnCount","visit","prevNode","visitNode","set","childKeys","Set","last","child","type","parentKey","add","has","remove","delete","items","forEach","i","rowNode","level","value","undefined","hasChildNodes","rendered","textValue","push"],"sources":["D:\\Like, for real projects\\React-Todo-List-V2\\node_modules\\@react-stately\\grid\\dist\\packages\\@react-stately\\grid\\src\\GridCollection.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {GridNode, GridRow, GridCollection as IGridCollection} from '@react-types/grid';\nimport {Key} from '@react-types/shared';\n\ninterface GridCollectionOptions<T> {\n  columnCount: number,\n  items: GridRow<T>[],\n  visitNode?: (cell: GridNode<T>) => GridNode<T>\n}\n\nexport class GridCollection<T> implements IGridCollection<T> {\n  keyMap: Map<Key, GridNode<T>> = new Map();\n  columnCount: number;\n  rows: GridNode<T>[];\n\n  constructor(opts?: GridCollectionOptions<T>) {\n    this.keyMap = new Map();\n    this.columnCount = opts?.columnCount;\n    this.rows = [];\n\n    let visit = (node: GridNode<T>) => {\n      // If the node is the same object as the previous node for the same key,\n      // we can skip this node and its children. We always visit columns though,\n      // because we depend on order to build the columns array.\n      let prevNode = this.keyMap.get(node.key);\n      if (opts.visitNode) {\n        node = opts.visitNode(node);\n      }\n\n      this.keyMap.set(node.key, node);\n\n      let childKeys = new Set();\n      let last: GridNode<T>;\n      for (let child of node.childNodes) {\n        if (child.type === 'cell' && child.parentKey == null) {\n          // if child is a cell parent key isn't already established by the collection, match child node to parent row\n          child.parentKey = node.key;\n        }\n        childKeys.add(child.key);\n\n        if (last) {\n          last.nextKey = child.key;\n          child.prevKey = last.key;\n        } else {\n          child.prevKey = null;\n        }\n\n        visit(child);\n        last = child;\n      }\n\n      if (last) {\n        last.nextKey = null;\n      }\n\n      // Remove deleted nodes and their children from the key map\n      if (prevNode) {\n        for (let child of prevNode.childNodes) {\n          if (!childKeys.has(child.key)) {\n            remove(child);\n          }\n        }\n      }\n    };\n\n    let remove = (node: GridNode<T>) => {\n      this.keyMap.delete(node.key);\n      for (let child of node.childNodes) {\n        if (this.keyMap.get(child.key) === child) {\n          remove(child);\n        }\n      }\n    };\n\n    let last: GridNode<T>;\n    opts.items.forEach((node, i) => {\n      let rowNode = {\n        level: 0,\n        key: 'row-' + i,\n        type: 'row',\n        value: undefined,\n        hasChildNodes: true,\n        childNodes: [...node.childNodes],\n        rendered: undefined,\n        textValue: undefined,\n        ...node\n      } as GridNode<T>;\n\n      if (last) {\n        last.nextKey = rowNode.key;\n        rowNode.prevKey = last.key;\n      } else {\n        rowNode.prevKey = null;\n      }\n\n      this.rows.push(rowNode);\n      visit(rowNode);\n\n      last = rowNode;\n    });\n\n    if (last) {\n      last.nextKey = null;\n    }\n  }\n\n  *[Symbol.iterator]() {\n    yield* [...this.rows];\n  }\n\n  get size() {\n    return [...this.rows].length;\n  }\n\n  getKeys() {\n    return this.keyMap.keys();\n  }\n\n  getKeyBefore(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.prevKey : null;\n  }\n\n  getKeyAfter(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.nextKey : null;\n  }\n\n  getFirstKey() {\n    return [...this.rows][0]?.key;\n  }\n\n  getLastKey() {\n    let rows = [...this.rows];\n    return rows[rows.length - 1]?.key;\n  }\n\n  getItem(key: Key) {\n    return this.keyMap.get(key);\n  }\n\n  at(idx: number) {\n    const keys = [...this.getKeys()];\n    return this.getItem(keys[idx]);\n  }\n\n  getChildren(key: Key): Iterable<GridNode<T>> {\n    let node = this.keyMap.get(key);\n    return node?.childNodes || [];\n  }\n}\n"]},"metadata":{},"sourceType":"module"}