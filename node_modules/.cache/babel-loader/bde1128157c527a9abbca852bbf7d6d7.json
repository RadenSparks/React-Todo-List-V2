{"ast":null,"code":"import { radioGroupData as $884aeceb3d67f00f$export$37b65e5b5444d35c } from \"./utils.mjs\";\nimport { mergeProps as $5jJ3f$mergeProps, filterDOMProps as $5jJ3f$filterDOMProps, useFormReset as $5jJ3f$useFormReset } from \"@react-aria/utils\";\nimport { useFocusable as $5jJ3f$useFocusable } from \"@react-aria/focus\";\nimport { useFormValidation as $5jJ3f$useFormValidation } from \"@react-aria/form\";\nimport { usePress as $5jJ3f$usePress } from \"@react-aria/interactions\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $0d5c49892c1215da$export$37b0961d2f4751e2(props, state, ref) {\n  let {\n    value: value,\n    children: children,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby\n  } = props;\n  const isDisabled = props.isDisabled || state.isDisabled;\n  let hasChildren = children != null;\n  let hasAriaLabel = ariaLabel != null || ariaLabelledby != null;\n  if (!hasChildren && !hasAriaLabel) console.warn('If you do not provide children, you must specify an aria-label for accessibility');\n  let checked = state.selectedValue === value;\n  let onChange = e => {\n    e.stopPropagation();\n    state.setSelectedValue(value);\n  };\n  let {\n    pressProps: pressProps,\n    isPressed: isPressed\n  } = (0, $5jJ3f$usePress)({\n    isDisabled: isDisabled\n  });\n  // iOS does not toggle radios if you drag off and back onto the label, so handle it ourselves.\n  let {\n    pressProps: labelProps,\n    isPressed: isLabelPressed\n  } = (0, $5jJ3f$usePress)({\n    isDisabled: isDisabled,\n    onPress() {\n      state.setSelectedValue(value);\n    }\n  });\n  let {\n    focusableProps: focusableProps\n  } = (0, $5jJ3f$useFocusable)((0, $5jJ3f$mergeProps)(props, {\n    onFocus: () => state.setLastFocusedValue(value)\n  }), ref);\n  let interactions = (0, $5jJ3f$mergeProps)(pressProps, focusableProps);\n  let domProps = (0, $5jJ3f$filterDOMProps)(props, {\n    labelable: true\n  });\n  let tabIndex = -1;\n  if (state.selectedValue != null) {\n    if (state.selectedValue === value) tabIndex = 0;\n  } else if (state.lastFocusedValue === value || state.lastFocusedValue == null) tabIndex = 0;\n  if (isDisabled) tabIndex = undefined;\n  let {\n    name: name,\n    descriptionId: descriptionId,\n    errorMessageId: errorMessageId,\n    validationBehavior: validationBehavior\n  } = (0, $884aeceb3d67f00f$export$37b65e5b5444d35c).get(state);\n  (0, $5jJ3f$useFormReset)(ref, state.selectedValue, state.setSelectedValue);\n  (0, $5jJ3f$useFormValidation)({\n    validationBehavior: validationBehavior\n  }, state, ref);\n  return {\n    labelProps: (0, $5jJ3f$mergeProps)(labelProps, {\n      onClick: e => e.preventDefault()\n    }),\n    inputProps: (0, $5jJ3f$mergeProps)(domProps, {\n      ...interactions,\n      type: 'radio',\n      name: name,\n      tabIndex: tabIndex,\n      disabled: isDisabled,\n      required: state.isRequired && validationBehavior === 'native',\n      checked: checked,\n      value: value,\n      onChange: onChange,\n      'aria-describedby': [props['aria-describedby'], state.isInvalid ? errorMessageId : null, descriptionId].filter(Boolean).join(' ') || undefined\n    }),\n    isDisabled: isDisabled,\n    isSelected: checked,\n    isPressed: isPressed || isLabelPressed\n  };\n}\nexport { $0d5c49892c1215da$export$37b0961d2f4751e2 as useRadio };","map":{"version":3,"mappings":";;;;;;AAAA;;;;;;;;;;;;AAyCO,SAASA,0CAASC,KAAqB,EAAEC,KAAsB,EAAEC,GAAgC;EACtG,IAAI;IAAAC,OACFA,KAAK;IAAAC,UACLA,QAAQ;IACR,cAAcC,SAAS;IACvB,mBAAmBC;EAAc,CAClC,GAAGN;EAEJ,MAAMO,aAAaP,MAAMO,UAAU,IAAIN,MAAMM,UAAU;EAEvD,IAAIC,cAAcJ,YAAY;EAC9B,IAAIK,eAAeJ,aAAa,QAAQC,kBAAkB;EAC1D,IAAI,CAACE,eAAe,CAACC,cACnBC,QAAQC,IAAI,CAAC;EAGf,IAAIC,UAAUX,MAAMY,aAAa,KAAKV;EAEtC,IAAIW,WAAYC;IACdA,EAAEC,eAAe;IACjBf,MAAMgB,gBAAgB,CAACd;EACzB;EAEA,IAAI;IAAAe,YAACA,UAAU;IAAAC,WAAEA;EAAS,CAAC,GAAG,mBAAO,EAAE;gBACrCZ;EACF;EAEA;EACA,IAAI;IAACW,YAAYE,UAAU;IAAED,WAAWE;EAAc,CAAC,GAAG,mBAAO,EAAE;gBACjEd;IACAe;MACErB,MAAMgB,gBAAgB,CAACd;IACzB;EACF;EAEA,IAAI;IAAAoB,gBAACA;EAAc,CAAC,GAAG,uBAAW,EAAE,qBAAS,EAAEvB,OAAO;IACpDwB,SAASA,MAAMvB,MAAMwB,mBAAmB,CAACtB;EAC3C,IAAID;EACJ,IAAIwB,eAAe,qBAAS,EAAER,YAAYK;EAC1C,IAAII,WAAW,yBAAa,EAAE3B,OAAO;IAAC4B,WAAW;EAAI;EACrD,IAAIC,WAA+B;EACnC,IAAI5B,MAAMY,aAAa,IAAI,MACzB;IAAA,IAAIZ,MAAMY,aAAa,KAAKV,OAC1B0B,WAAW;EACb,OACK,IAAI5B,MAAM6B,gBAAgB,KAAK3B,SAASF,MAAM6B,gBAAgB,IAAI,MACvED,WAAW;EAEb,IAAItB,YACFsB,WAAWE;EAGb,IAAI;IAAAC,MAACA,IAAI;IAAAC,eAAEA,aAAa;IAAAC,gBAAEA,cAAc;IAAAC,oBAAEA;EAAkB,CAAC,GAAG,6CAAa,EAAEC,GAAG,CAACnC;EACnF,uBAAW,EAAEC,KAAKD,MAAMY,aAAa,EAAEZ,MAAMgB,gBAAgB;EAC7D,4BAAgB,EAAE;wBAACkB;EAAkB,GAAGlC,OAAOC;EAE/C,OAAO;IACLkB,YAAY,qBAAS,EAAEA,YAAY;MAACiB,SAAStB,KAAKA,EAAEuB,cAAc;IAAE;IACpEC,YAAY,qBAAS,EAAEZ,UAAU;MAC/B,GAAGD,YAAY;MACfc,MAAM;YACNR;gBACAH;MACAY,UAAUlC;MACVmC,UAAUzC,MAAM0C,UAAU,IAAIR,uBAAuB;eACrDvB;aACAT;gBACAW;MACA,oBAAoB,CAClBd,KAAK,CAAC,mBAAmB,EACzBC,MAAM2C,SAAS,GAAGV,iBAAiB,MACnCD,cACD,CAACY,MAAM,CAACC,SAASC,IAAI,CAAC,QAAQhB;IACjC;gBACAxB;IACAyC,YAAYpC;IACZO,WAAWA,aAAaE;EAC1B;AACF","names":["$0d5c49892c1215da$export$37b0961d2f4751e2","props","state","ref","value","children","ariaLabel","ariaLabelledby","isDisabled","hasChildren","hasAriaLabel","console","warn","checked","selectedValue","onChange","e","stopPropagation","setSelectedValue","pressProps","isPressed","labelProps","isLabelPressed","onPress","focusableProps","onFocus","setLastFocusedValue","interactions","domProps","labelable","tabIndex","lastFocusedValue","undefined","name","descriptionId","errorMessageId","validationBehavior","get","onClick","preventDefault","inputProps","type","disabled","required","isRequired","isInvalid","filter","Boolean","join","isSelected"],"sources":["D:\\Like, for real projects\\React-Todo-List-V2\\node_modules\\@react-aria\\radio\\dist\\packages\\@react-aria\\radio\\src\\useRadio.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaRadioProps} from '@react-types/radio';\nimport {filterDOMProps, mergeProps, useFormReset} from '@react-aria/utils';\nimport {InputHTMLAttributes, LabelHTMLAttributes, RefObject} from 'react';\nimport {radioGroupData} from './utils';\nimport {RadioGroupState} from '@react-stately/radio';\nimport {useFocusable} from '@react-aria/focus';\nimport {useFormValidation} from '@react-aria/form';\nimport {usePress} from '@react-aria/interactions';\n\nexport interface RadioAria {\n  /** Props for the label wrapper element. */\n  labelProps: LabelHTMLAttributes<HTMLLabelElement>,\n  /** Props for the input element. */\n  inputProps: InputHTMLAttributes<HTMLInputElement>,\n  /** Whether the radio is disabled. */\n  isDisabled: boolean,\n  /** Whether the radio is currently selected. */\n  isSelected: boolean,\n  /** Whether the radio is in a pressed state. */\n  isPressed: boolean\n}\n\n/**\n * Provides the behavior and accessibility implementation for an individual\n * radio button in a radio group.\n * @param props - Props for the radio.\n * @param state - State for the radio group, as returned by `useRadioGroupState`.\n * @param ref - Ref to the HTML input element.\n */\nexport function useRadio(props: AriaRadioProps, state: RadioGroupState, ref: RefObject<HTMLInputElement>): RadioAria {\n  let {\n    value,\n    children,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby\n  } = props;\n\n  const isDisabled = props.isDisabled || state.isDisabled;\n\n  let hasChildren = children != null;\n  let hasAriaLabel = ariaLabel != null || ariaLabelledby != null;\n  if (!hasChildren && !hasAriaLabel) {\n    console.warn('If you do not provide children, you must specify an aria-label for accessibility');\n  }\n\n  let checked = state.selectedValue === value;\n\n  let onChange = (e) => {\n    e.stopPropagation();\n    state.setSelectedValue(value);\n  };\n\n  let {pressProps, isPressed} = usePress({\n    isDisabled\n  });\n\n  // iOS does not toggle radios if you drag off and back onto the label, so handle it ourselves.\n  let {pressProps: labelProps, isPressed: isLabelPressed} = usePress({\n    isDisabled,\n    onPress() {\n      state.setSelectedValue(value);\n    }\n  });\n\n  let {focusableProps} = useFocusable(mergeProps(props, {\n    onFocus: () => state.setLastFocusedValue(value)\n  }), ref);\n  let interactions = mergeProps(pressProps, focusableProps);\n  let domProps = filterDOMProps(props, {labelable: true});\n  let tabIndex: number | undefined = -1;\n  if (state.selectedValue != null) {\n    if (state.selectedValue === value) {\n      tabIndex = 0;\n    }\n  } else if (state.lastFocusedValue === value || state.lastFocusedValue == null) {\n    tabIndex = 0;\n  }\n  if (isDisabled) {\n    tabIndex = undefined;\n  }\n\n  let {name, descriptionId, errorMessageId, validationBehavior} = radioGroupData.get(state)!;\n  useFormReset(ref, state.selectedValue, state.setSelectedValue);\n  useFormValidation({validationBehavior}, state, ref);\n\n  return {\n    labelProps: mergeProps(labelProps, {onClick: e => e.preventDefault()}),\n    inputProps: mergeProps(domProps, {\n      ...interactions,\n      type: 'radio',\n      name,\n      tabIndex,\n      disabled: isDisabled,\n      required: state.isRequired && validationBehavior === 'native',\n      checked,\n      value,\n      onChange,\n      'aria-describedby': [\n        props['aria-describedby'],\n        state.isInvalid ? errorMessageId : null,\n        descriptionId\n      ].filter(Boolean).join(' ') || undefined\n    }),\n    isDisabled,\n    isSelected: checked,\n    isPressed: isPressed || isLabelPressed\n  };\n}\n"]},"metadata":{},"sourceType":"module"}