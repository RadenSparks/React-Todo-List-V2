{"ast":null,"code":"import $4lVjK$intlStringsmodulejs from \"./intlStrings.mjs\";\nimport { roleSymbol as $16f0b7bb276bc17e$export$300019f83c56d282 } from \"./useDateField.mjs\";\nimport { useDatePickerGroup as $3dfb0f96be0d6a08$export$4a931266a3838b86 } from \"./useDatePickerGroup.mjs\";\nimport { createFocusManager as $4lVjK$createFocusManager } from \"@react-aria/focus\";\nimport { useId as $4lVjK$useId, useDescription as $4lVjK$useDescription, filterDOMProps as $4lVjK$filterDOMProps, mergeProps as $4lVjK$mergeProps } from \"@react-aria/utils\";\nimport { privateValidationStateProp as $4lVjK$privateValidationStateProp } from \"@react-stately/form\";\nimport { useMemo as $4lVjK$useMemo } from \"react\";\nimport { useField as $4lVjK$useField } from \"@react-aria/label\";\nimport { useFocusWithin as $4lVjK$useFocusWithin } from \"@react-aria/interactions\";\nimport { useLocalizedStringFormatter as $4lVjK$useLocalizedStringFormatter, useLocale as $4lVjK$useLocale } from \"@react-aria/i18n\";\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $6057a3d2a53a12fd$export$42df105a73306d51(props, state, ref) {\n  let buttonId = (0, $4lVjK$useId)();\n  let dialogId = (0, $4lVjK$useId)();\n  let fieldId = (0, $4lVjK$useId)();\n  let stringFormatter = (0, $4lVjK$useLocalizedStringFormatter)((0, $parcel$interopDefault($4lVjK$intlStringsmodulejs)), '@react-aria/datepicker');\n  let {\n    isInvalid: isInvalid,\n    validationErrors: validationErrors,\n    validationDetails: validationDetails\n  } = state.displayValidation;\n  let {\n    labelProps: labelProps,\n    fieldProps: fieldProps,\n    descriptionProps: descriptionProps,\n    errorMessageProps: errorMessageProps\n  } = (0, $4lVjK$useField)({\n    ...props,\n    labelElementType: 'span',\n    isInvalid: isInvalid,\n    errorMessage: props.errorMessage || validationErrors\n  });\n  let groupProps = (0, $3dfb0f96be0d6a08$export$4a931266a3838b86)(state, ref);\n  let labelledBy = fieldProps['aria-labelledby'] || fieldProps.id;\n  let {\n    locale: locale\n  } = (0, $4lVjK$useLocale)();\n  let date = state.formatValue(locale, {\n    month: 'long'\n  });\n  let description = date ? stringFormatter.format('selectedDateDescription', {\n    date: date\n  }) : '';\n  let descProps = (0, $4lVjK$useDescription)(description);\n  let ariaDescribedBy = [descProps['aria-describedby'], fieldProps['aria-describedby']].filter(Boolean).join(' ') || undefined;\n  let domProps = (0, $4lVjK$filterDOMProps)(props);\n  let focusManager = (0, $4lVjK$useMemo)(() => (0, $4lVjK$createFocusManager)(ref), [ref]);\n  let {\n    focusWithinProps: focusWithinProps\n  } = (0, $4lVjK$useFocusWithin)({\n    ...props,\n    isDisabled: state.isOpen,\n    onBlurWithin: props.onBlur,\n    onFocusWithin: props.onFocus,\n    onFocusWithinChange: props.onFocusChange\n  });\n  return {\n    groupProps: (0, $4lVjK$mergeProps)(domProps, groupProps, fieldProps, descProps, focusWithinProps, {\n      role: 'group',\n      'aria-disabled': props.isDisabled || null,\n      'aria-labelledby': labelledBy,\n      'aria-describedby': ariaDescribedBy,\n      onKeyDown(e) {\n        if (state.isOpen) return;\n        if (props.onKeyDown) props.onKeyDown(e);\n      },\n      onKeyUp(e) {\n        if (state.isOpen) return;\n        if (props.onKeyUp) props.onKeyUp(e);\n      }\n    }),\n    labelProps: {\n      ...labelProps,\n      onClick: () => {\n        focusManager.focusFirst();\n      }\n    },\n    fieldProps: {\n      ...fieldProps,\n      id: fieldId,\n      [(0, $16f0b7bb276bc17e$export$300019f83c56d282)]: 'presentation',\n      'aria-describedby': ariaDescribedBy,\n      value: state.value,\n      onChange: state.setValue,\n      placeholderValue: props.placeholderValue,\n      hideTimeZone: props.hideTimeZone,\n      hourCycle: props.hourCycle,\n      shouldForceLeadingZeros: props.shouldForceLeadingZeros,\n      granularity: props.granularity,\n      isDisabled: props.isDisabled,\n      isReadOnly: props.isReadOnly,\n      isRequired: props.isRequired,\n      validationBehavior: props.validationBehavior,\n      // DatePicker owns the validation state for the date field.\n      [(0, $4lVjK$privateValidationStateProp)]: state,\n      autoFocus: props.autoFocus,\n      name: props.name\n    },\n    descriptionProps: descriptionProps,\n    errorMessageProps: errorMessageProps,\n    buttonProps: {\n      ...descProps,\n      id: buttonId,\n      'aria-haspopup': 'dialog',\n      'aria-label': stringFormatter.format('calendar'),\n      'aria-labelledby': `${buttonId} ${labelledBy}`,\n      'aria-describedby': ariaDescribedBy,\n      'aria-expanded': state.isOpen,\n      isDisabled: props.isDisabled || props.isReadOnly,\n      onPress: () => state.setOpen(true)\n    },\n    dialogProps: {\n      id: dialogId,\n      'aria-labelledby': `${buttonId} ${labelledBy}`\n    },\n    calendarProps: {\n      autoFocus: true,\n      value: state.dateValue,\n      onChange: state.setDateValue,\n      minValue: props.minValue,\n      maxValue: props.maxValue,\n      isDisabled: props.isDisabled,\n      isReadOnly: props.isReadOnly,\n      isDateUnavailable: props.isDateUnavailable,\n      defaultFocusedValue: state.dateValue ? undefined : props.placeholderValue,\n      isInvalid: state.isInvalid,\n      errorMessage: typeof props.errorMessage === 'function' ? props.errorMessage(state.displayValidation) : props.errorMessage || state.displayValidation.validationErrors.join(' ')\n    },\n    isInvalid: isInvalid,\n    validationErrors: validationErrors,\n    validationDetails: validationDetails\n  };\n}\nexport { $6057a3d2a53a12fd$export$42df105a73306d51 as useDatePicker };","map":{"version":3,"mappings":"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","names":["$6057a3d2a53a12fd$export$42df105a73306d51","props","state","ref","buttonId","dialogId","fieldId","stringFormatter","isInvalid","validationErrors","validationDetails","displayValidation","labelProps","fieldProps","descriptionProps","errorMessageProps","labelElementType","errorMessage","groupProps","labelledBy","id","locale","date","formatValue","month","description","format","descProps","ariaDescribedBy","filter","Boolean","join","undefined","domProps","focusManager","focusWithinProps","isDisabled","isOpen","onBlurWithin","onBlur","onFocusWithin","onFocus","onFocusWithinChange","onFocusChange","role","onKeyDown","e","onKeyUp","onClick","focusFirst","value","onChange","setValue","placeholderValue","hideTimeZone","hourCycle","shouldForceLeadingZeros","granularity","isReadOnly","isRequired","validationBehavior","autoFocus","name","buttonProps","onPress","setOpen","dialogProps","calendarProps","dateValue","setDateValue","minValue","maxValue","isDateUnavailable","defaultFocusedValue"],"sources":["D:\\Like, for real projects\\React-Todo-List-V2\\node_modules\\@react-aria\\datepicker\\dist\\packages\\@react-aria\\datepicker\\src\\useDatePicker.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaButtonProps} from '@react-types/button';\nimport {AriaDatePickerProps, DateValue} from '@react-types/datepicker';\nimport {AriaDialogProps} from '@react-types/dialog';\nimport {CalendarProps} from '@react-types/calendar';\nimport {createFocusManager} from '@react-aria/focus';\nimport {DatePickerState} from '@react-stately/datepicker';\nimport {DOMAttributes, GroupDOMAttributes, KeyboardEvent, ValidationResult} from '@react-types/shared';\nimport {filterDOMProps, mergeProps, useDescription, useId} from '@react-aria/utils';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport {privateValidationStateProp} from '@react-stately/form';\nimport {RefObject, useMemo} from 'react';\nimport {roleSymbol} from './useDateField';\nimport {useDatePickerGroup} from './useDatePickerGroup';\nimport {useField} from '@react-aria/label';\nimport {useFocusWithin} from '@react-aria/interactions';\nimport {useLocale, useLocalizedStringFormatter} from '@react-aria/i18n';\n\nexport interface DatePickerAria extends ValidationResult {\n  /** Props for the date picker's visible label element, if any. */\n  labelProps: DOMAttributes,\n  /** Props for the grouping element containing the date field and button. */\n  groupProps: GroupDOMAttributes,\n  /** Props for the date field. */\n  fieldProps: AriaDatePickerProps<DateValue>,\n  /** Props for the popover trigger button. */\n  buttonProps: AriaButtonProps,\n  /** Props for the description element, if any. */\n  descriptionProps: DOMAttributes,\n  /** Props for the error message element, if any. */\n  errorMessageProps: DOMAttributes,\n  /** Props for the popover dialog. */\n  dialogProps: AriaDialogProps,\n  /** Props for the calendar within the popover dialog. */\n  calendarProps: CalendarProps<DateValue>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a date picker component.\n * A date picker combines a DateField and a Calendar popover to allow users to enter or select a date and time value.\n */\nexport function useDatePicker<T extends DateValue>(props: AriaDatePickerProps<T>, state: DatePickerState, ref: RefObject<Element>): DatePickerAria {\n  let buttonId = useId();\n  let dialogId = useId();\n  let fieldId = useId();\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-aria/datepicker');\n\n  let {isInvalid, validationErrors, validationDetails} = state.displayValidation;\n  let {labelProps, fieldProps, descriptionProps, errorMessageProps} = useField({\n    ...props,\n    labelElementType: 'span',\n    isInvalid,\n    errorMessage: props.errorMessage || validationErrors\n  });\n\n  let groupProps = useDatePickerGroup(state, ref);\n\n  let labelledBy = fieldProps['aria-labelledby'] || fieldProps.id;\n\n  let {locale} = useLocale();\n  let date = state.formatValue(locale, {month: 'long'});\n  let description = date ? stringFormatter.format('selectedDateDescription', {date}) : '';\n  let descProps = useDescription(description);\n  let ariaDescribedBy = [descProps['aria-describedby'], fieldProps['aria-describedby']].filter(Boolean).join(' ') || undefined;\n  let domProps = filterDOMProps(props);\n  let focusManager = useMemo(() => createFocusManager(ref), [ref]);\n\n  let {focusWithinProps} = useFocusWithin({\n    ...props,\n    isDisabled: state.isOpen,\n    onBlurWithin: props.onBlur,\n    onFocusWithin: props.onFocus,\n    onFocusWithinChange: props.onFocusChange\n  });\n\n  return {\n    groupProps: mergeProps(domProps, groupProps, fieldProps, descProps, focusWithinProps, {\n      role: 'group' as const,\n      'aria-disabled': props.isDisabled || null,\n      'aria-labelledby': labelledBy,\n      'aria-describedby': ariaDescribedBy,\n      onKeyDown(e: KeyboardEvent) {\n        if (state.isOpen) {\n          return;\n        }\n\n        if (props.onKeyDown) {\n          props.onKeyDown(e);\n        }\n      },\n      onKeyUp(e: KeyboardEvent) {\n        if (state.isOpen) {\n          return;\n        }\n\n        if (props.onKeyUp) {\n          props.onKeyUp(e);\n        }\n      }\n    }),\n    labelProps: {\n      ...labelProps,\n      onClick: () => {\n        focusManager.focusFirst();\n      }\n    },\n    fieldProps: {\n      ...fieldProps,\n      id: fieldId,\n      [roleSymbol]: 'presentation',\n      'aria-describedby': ariaDescribedBy,\n      value: state.value,\n      onChange: state.setValue,\n      placeholderValue: props.placeholderValue,\n      hideTimeZone: props.hideTimeZone,\n      hourCycle: props.hourCycle,\n      shouldForceLeadingZeros: props.shouldForceLeadingZeros,\n      granularity: props.granularity,\n      isDisabled: props.isDisabled,\n      isReadOnly: props.isReadOnly,\n      isRequired: props.isRequired,\n      validationBehavior: props.validationBehavior,\n      // DatePicker owns the validation state for the date field.\n      [privateValidationStateProp]: state,\n      autoFocus: props.autoFocus,\n      name: props.name\n    },\n    descriptionProps,\n    errorMessageProps,\n    buttonProps: {\n      ...descProps,\n      id: buttonId,\n      'aria-haspopup': 'dialog',\n      'aria-label': stringFormatter.format('calendar'),\n      'aria-labelledby': `${buttonId} ${labelledBy}`,\n      'aria-describedby': ariaDescribedBy,\n      'aria-expanded': state.isOpen,\n      isDisabled: props.isDisabled || props.isReadOnly,\n      onPress: () => state.setOpen(true)\n    },\n    dialogProps: {\n      id: dialogId,\n      'aria-labelledby': `${buttonId} ${labelledBy}`\n    },\n    calendarProps: {\n      autoFocus: true,\n      value: state.dateValue,\n      onChange: state.setDateValue,\n      minValue: props.minValue,\n      maxValue: props.maxValue,\n      isDisabled: props.isDisabled,\n      isReadOnly: props.isReadOnly,\n      isDateUnavailable: props.isDateUnavailable,\n      defaultFocusedValue: state.dateValue ? undefined : props.placeholderValue,\n      isInvalid: state.isInvalid,\n      errorMessage: typeof props.errorMessage === 'function' ? props.errorMessage(state.displayValidation) : (props.errorMessage || state.displayValidation.validationErrors.join(' '))\n    },\n    isInvalid,\n    validationErrors,\n    validationDetails\n  };\n}\n"]},"metadata":{},"sourceType":"module"}