{"ast":null,"code":"import { useLink as $iYMrm$useLink } from \"@react-aria/link\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nfunction $dafd15390222438a$export$452b38fce62c9384(props, ref) {\n  let {\n    isCurrent: isCurrent,\n    isDisabled: isDisabled,\n    'aria-current': ariaCurrent,\n    elementType = 'a',\n    ...otherProps\n  } = props;\n  let {\n    linkProps: linkProps\n  } = (0, $iYMrm$useLink)({\n    isDisabled: isDisabled || isCurrent,\n    elementType: elementType,\n    ...otherProps\n  }, ref);\n  let isHeading = /^h[1-6]$/.test(elementType);\n  let itemProps = {};\n  if (!isHeading) itemProps = linkProps;\n  if (isCurrent) {\n    itemProps['aria-current'] = ariaCurrent || 'page';\n    // isCurrent sets isDisabled === true for the current item,\n    // so we have to restore the tabIndex in order to support autoFocus.\n    itemProps.tabIndex = props.autoFocus ? -1 : undefined;\n  }\n  return {\n    itemProps: {\n      'aria-disabled': isDisabled,\n      ...itemProps\n    }\n  };\n}\nexport { $dafd15390222438a$export$452b38fce62c9384 as useBreadcrumbItem };","map":{"version":3,"mappings":";;AAAA;;;;;;;;;;;AA0BO,SAASA,0CAAkBC,KAA8B,EAAEC,GAAgC;EAChG,IAAI;IAAAC,WACFA,SAAS;IAAAC,YACTA,UAAU;IACV,gBAAgBC,WAAW;IAC3BC,cAAc;IACd,GAAGC;EAAA,CACJ,GAAGN;EAEJ,IAAI;IAAAO,WAACA;EAAS,CAAC,GAAG,kBAAM,EAAE;IAACJ,YAAYA,cAAcD;iBAAWG;IAAa,GAAGC;EAAU,GAAGL;EAC7F,IAAIO,YAAY,WAAWC,IAAI,CAACJ;EAChC,IAAIK,YAA2B,CAAC;EAEhC,IAAI,CAACF,WACHE,YAAYH;EAGd,IAAIL,WAAW;IACbQ,SAAS,CAAC,eAAe,GAAGN,eAAe;IAC3C;IACA;IACAM,UAAUC,QAAQ,GAAGX,MAAMY,SAAS,GAAG,KAAKC;EAC9C;EAEA,OAAO;IACLH,WAAW;MACT,iBAAiBP;MACjB,GAAGO;IACL;EACF;AACF","names":["$dafd15390222438a$export$452b38fce62c9384","props","ref","isCurrent","isDisabled","ariaCurrent","elementType","otherProps","linkProps","isHeading","test","itemProps","tabIndex","autoFocus","undefined"],"sources":["D:\\Like, for real projects\\React-Todo-List-V2\\node_modules\\@react-aria\\breadcrumbs\\dist\\packages\\@react-aria\\breadcrumbs\\src\\useBreadcrumbItem.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaBreadcrumbItemProps} from '@react-types/breadcrumbs';\nimport {DOMAttributes, FocusableElement} from '@react-types/shared';\nimport {RefObject} from 'react';\nimport {useLink} from '@react-aria/link';\n\nexport interface BreadcrumbItemAria {\n  /** Props for the breadcrumb item link element. */\n  itemProps: DOMAttributes\n}\n\n/**\n * Provides the behavior and accessibility implementation for an in a breadcrumbs component.\n * See `useBreadcrumbs` for details about breadcrumbs.\n */\nexport function useBreadcrumbItem(props: AriaBreadcrumbItemProps, ref: RefObject<FocusableElement>): BreadcrumbItemAria {\n  let {\n    isCurrent,\n    isDisabled,\n    'aria-current': ariaCurrent,\n    elementType = 'a',\n    ...otherProps\n  } = props;\n\n  let {linkProps} = useLink({isDisabled: isDisabled || isCurrent, elementType, ...otherProps}, ref);\n  let isHeading = /^h[1-6]$/.test(elementType);\n  let itemProps: DOMAttributes = {};\n\n  if (!isHeading) {\n    itemProps = linkProps;\n  }\n\n  if (isCurrent) {\n    itemProps['aria-current'] = ariaCurrent || 'page';\n    // isCurrent sets isDisabled === true for the current item,\n    // so we have to restore the tabIndex in order to support autoFocus.\n    itemProps.tabIndex = props.autoFocus ? -1 : undefined;\n  }\n\n  return {\n    itemProps: {\n      'aria-disabled': isDisabled,\n      ...itemProps\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}