{"ast":null,"code":"import { useFormValidationState as $3Of4A$useFormValidationState, mergeValidation as $3Of4A$mergeValidation } from \"@react-stately/form\";\nimport { useControlledState as $3Of4A$useControlledState } from \"@react-stately/utils\";\nimport { useRef as $3Of4A$useRef } from \"react\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $587d3ad58be6d31f$export$daff6da51032a415() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let [selectedValues, setValue] = (0, $3Of4A$useControlledState)(props.value, props.defaultValue || [], props.onChange);\n  let isRequired = !!props.isRequired && selectedValues.length === 0;\n  let invalidValues = (0, $3Of4A$useRef)(new Map());\n  let validation = (0, $3Of4A$useFormValidationState)({\n    ...props,\n    value: selectedValues\n  });\n  let isInvalid = validation.displayValidation.isInvalid;\n  var _props_validationState;\n  const state = {\n    ...validation,\n    value: selectedValues,\n    setValue(value) {\n      if (props.isReadOnly || props.isDisabled) return;\n      setValue(value);\n    },\n    isDisabled: props.isDisabled || false,\n    isReadOnly: props.isReadOnly || false,\n    isSelected(value) {\n      return selectedValues.includes(value);\n    },\n    addValue(value) {\n      if (props.isReadOnly || props.isDisabled) return;\n      if (!selectedValues.includes(value)) setValue(selectedValues.concat(value));\n    },\n    removeValue(value) {\n      if (props.isReadOnly || props.isDisabled) return;\n      if (selectedValues.includes(value)) setValue(selectedValues.filter(existingValue => existingValue !== value));\n    },\n    toggleValue(value) {\n      if (props.isReadOnly || props.isDisabled) return;\n      if (selectedValues.includes(value)) setValue(selectedValues.filter(existingValue => existingValue !== value));else setValue(selectedValues.concat(value));\n    },\n    setInvalid(value, v) {\n      let s = new Map(invalidValues.current);\n      if (v.isInvalid) s.set(value, v);else s.delete(value);\n      invalidValues.current = s;\n      validation.updateValidation((0, $3Of4A$mergeValidation)(...s.values()));\n    },\n    validationState: (_props_validationState = props.validationState) !== null && _props_validationState !== void 0 ? _props_validationState : isInvalid ? 'invalid' : null,\n    isInvalid: isInvalid,\n    isRequired: isRequired\n  };\n  return state;\n}\nexport { $587d3ad58be6d31f$export$daff6da51032a415 as useCheckboxGroupState };","map":{"version":3,"mappings":";;;;AAAA;;;;;;;;;;;;AAkEO,SAASA,4CAAoD;EAAA,IAA9BC,4EAA4B,CAAC,CAAC;EAClE,IAAI,CAACC,gBAAgBC,SAAS,GAAG,6BAAiB,EAAEF,MAAMG,KAAK,EAAEH,MAAMI,YAAY,IAAI,EAAE,EAAEJ,MAAMK,QAAQ;EACzG,IAAIC,aAAa,CAAC,CAACN,MAAMM,UAAU,IAAIL,eAAeM,MAAM,KAAK;EAEjE,IAAIC,gBAAgB,iBAAK,EAAE,IAAIC;EAC/B,IAAIC,aAAa,iCAAqB,EAAE;IACtC,GAAGV,KAAK;IACRG,OAAOF;EACT;EAEA,IAAIU,YAAYD,WAAWE,iBAAiB,CAACD,SAAS;MAqDnCE;EApDnB,MAAMC,QAA4B;IAChC,GAAGJ,UAAU;IACbP,OAAOF;IACPC,SAASC,KAAK;MACZ,IAAIH,MAAMe,UAAU,IAAIf,MAAMgB,UAAU,EACtC;MAGFd,SAASC;IACX;IACAa,YAAYhB,MAAMgB,UAAU,IAAI;IAChCD,YAAYf,MAAMe,UAAU,IAAI;IAChCE,WAAWd,KAAK;MACd,OAAOF,eAAeiB,QAAQ,CAACf;IACjC;IACAgB,SAAShB,KAAK;MACZ,IAAIH,MAAMe,UAAU,IAAIf,MAAMgB,UAAU,EACtC;MAEF,IAAI,CAACf,eAAeiB,QAAQ,CAACf,QAC3BD,SAASD,eAAemB,MAAM,CAACjB;IAEnC;IACAkB,YAAYlB,KAAK;MACf,IAAIH,MAAMe,UAAU,IAAIf,MAAMgB,UAAU,EACtC;MAEF,IAAIf,eAAeiB,QAAQ,CAACf,QAC1BD,SAASD,eAAeqB,MAAM,CAACC,iBAAiBA,kBAAkBpB;IAEtE;IACAqB,YAAYrB,KAAK;MACf,IAAIH,MAAMe,UAAU,IAAIf,MAAMgB,UAAU,EACtC;MAEF,IAAIf,eAAeiB,QAAQ,CAACf,QAC1BD,SAASD,eAAeqB,MAAM,CAACC,iBAAiBA,kBAAkBpB,aAElED,SAASD,eAAemB,MAAM,CAACjB;IAEnC;IACAsB,WAAWtB,KAAK,EAAEuB,CAAC;MACjB,IAAIC,IAAI,IAAIlB,IAAID,cAAcoB,OAAO;MACrC,IAAIF,EAAEf,SAAS,EACbgB,EAAEE,GAAG,CAAC1B,OAAOuB,QAEbC,EAAEG,MAAM,CAAC3B;MAGXK,cAAcoB,OAAO,GAAGD;MACxBjB,WAAWqB,gBAAgB,CAAC,0BAAc,KAAKJ,EAAEK,MAAM;IACzD;IACAC,iBAAiB,gCAAMA,eAAe,cAArBpB,6DAA0BF,YAAY,YAAY;eACnEA;gBACAL;EACF;EAEA,OAAOQ;AACT","names":["$587d3ad58be6d31f$export$daff6da51032a415","props","selectedValues","setValue","value","defaultValue","onChange","isRequired","length","invalidValues","Map","validation","isInvalid","displayValidation","_props_validationState","state","isReadOnly","isDisabled","isSelected","includes","addValue","concat","removeValue","filter","existingValue","toggleValue","setInvalid","v","s","current","set","delete","updateValidation","values","validationState"],"sources":["D:\\Like, for real projects\\React-Todo-List-V2\\node_modules\\@react-stately\\checkbox\\dist\\packages\\@react-stately\\checkbox\\src\\useCheckboxGroupState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {CheckboxGroupProps} from '@react-types/checkbox';\nimport {FormValidationState, mergeValidation, useFormValidationState} from '@react-stately/form';\nimport {useControlledState} from '@react-stately/utils';\nimport {useRef} from 'react';\nimport {ValidationResult, ValidationState} from '@react-types/shared';\n\nexport interface CheckboxGroupState extends FormValidationState {\n  /** Current selected values. */\n  readonly value: readonly string[],\n\n  /** Whether the checkbox group is disabled. */\n  readonly isDisabled: boolean,\n\n  /** Whether the checkbox group is read only. */\n  readonly isReadOnly: boolean,\n\n  /**\n   * The current validation state of the checkbox group.\n   * @deprecated Use `isInvalid` instead.\n   */\n  readonly validationState: ValidationState | null,\n\n  /** Whether the checkbox group is invalid. */\n  readonly isInvalid: boolean,\n\n  /**\n   * Whether the checkboxes in the group are required.\n   * This changes to false once at least one item is selected.\n   */\n  readonly isRequired: boolean,\n\n  /** Returns whether the given value is selected. */\n  isSelected(value: string): boolean,\n\n  /** Sets the selected values. */\n  setValue(value: string[]): void,\n\n  /** Adds a value to the set of selected values. */\n  addValue(value: string): void,\n\n  /** Removes a value from the set of selected values. */\n  removeValue(value: string): void,\n\n  /** Toggles a value in the set of selected values. */\n  toggleValue(value: string): void,\n\n  /** Sets whether one of the checkboxes is invalid. */\n  setInvalid(value: string, validation: ValidationResult): void\n}\n\n/**\n * Provides state management for a checkbox group component. Provides a name for the group,\n * and manages selection and focus state.\n */\nexport function useCheckboxGroupState(props: CheckboxGroupProps = {}): CheckboxGroupState {\n  let [selectedValues, setValue] = useControlledState(props.value, props.defaultValue || [], props.onChange);\n  let isRequired = !!props.isRequired && selectedValues.length === 0;\n\n  let invalidValues = useRef(new Map<string, ValidationResult>());\n  let validation = useFormValidationState({\n    ...props,\n    value: selectedValues\n  });\n\n  let isInvalid = validation.displayValidation.isInvalid;\n  const state: CheckboxGroupState = {\n    ...validation,\n    value: selectedValues,\n    setValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n\n      setValue(value);\n    },\n    isDisabled: props.isDisabled || false,\n    isReadOnly: props.isReadOnly || false,\n    isSelected(value) {\n      return selectedValues.includes(value);\n    },\n    addValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n      if (!selectedValues.includes(value)) {\n        setValue(selectedValues.concat(value));\n      }\n    },\n    removeValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n      if (selectedValues.includes(value)) {\n        setValue(selectedValues.filter(existingValue => existingValue !== value));\n      }\n    },\n    toggleValue(value) {\n      if (props.isReadOnly || props.isDisabled) {\n        return;\n      }\n      if (selectedValues.includes(value)) {\n        setValue(selectedValues.filter(existingValue => existingValue !== value));\n      } else {\n        setValue(selectedValues.concat(value));\n      }\n    },\n    setInvalid(value, v) {\n      let s = new Map(invalidValues.current);\n      if (v.isInvalid) {\n        s.set(value, v);\n      } else {\n        s.delete(value);\n      }\n\n      invalidValues.current = s;\n      validation.updateValidation(mergeValidation(...s.values()));\n    },\n    validationState: props.validationState ?? (isInvalid ? 'invalid' : null),\n    isInvalid,\n    isRequired\n  };\n\n  return state;\n}\n"]},"metadata":{},"sourceType":"module"}