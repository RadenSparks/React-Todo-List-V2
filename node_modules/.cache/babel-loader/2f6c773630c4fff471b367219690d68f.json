{"ast":null,"code":"import { CalendarDate as $35ea8db9cb2ccb90$export$99faa760c7908e4f, CalendarDateTime as $35ea8db9cb2ccb90$export$ca871e8dbb80966f, Time as $35ea8db9cb2ccb90$export$680ea196effce5f, ZonedDateTime as $35ea8db9cb2ccb90$export$d3b7288e7994edea } from \"./CalendarDate.mjs\";\nimport { constrain as $735220c2d4774dd3$export$c4e2ecac49351ef2 } from \"./manipulation.mjs\";\nimport { getExtendedYear as $3b62074eb05584b2$export$c36e0ecb2d4fa69d, GregorianCalendar as $3b62074eb05584b2$export$80ee6245ec4f29ec } from \"./GregorianCalendar.mjs\";\nimport { getLocalTimeZone as $14e0f24ef4ac5c92$export$aa8b41735afcabd2 } from \"./queries.mjs\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Portions of the code in this file are based on code from the TC39 Temporal proposal.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nfunction $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date) {\n  date = $11d87f3f76e88657$export$b4a036af3fc0b032(date, new (0, $3b62074eb05584b2$export$80ee6245ec4f29ec)());\n  let year = (0, $3b62074eb05584b2$export$c36e0ecb2d4fa69d)(date.era, date.year);\n  return $11d87f3f76e88657$var$epochFromParts(year, date.month, date.day, date.hour, date.minute, date.second, date.millisecond);\n}\nfunction $11d87f3f76e88657$var$epochFromParts(year, month, day, hour, minute, second, millisecond) {\n  // Note: Date.UTC() interprets one and two-digit years as being in the\n  // 20th century, so don't use it\n  let date = new Date();\n  date.setUTCHours(hour, minute, second, millisecond);\n  date.setUTCFullYear(year, month - 1, day);\n  return date.getTime();\n}\nfunction $11d87f3f76e88657$export$59c99f3515d3493f(ms, timeZone) {\n  // Fast path for UTC.\n  if (timeZone === 'UTC') return 0;\n  // Fast path: for local timezone after 1970, use native Date.\n  if (ms > 0 && timeZone === (0, $14e0f24ef4ac5c92$export$aa8b41735afcabd2)()) return new Date(ms).getTimezoneOffset() * -60000;\n  let {\n    year: year,\n    month: month,\n    day: day,\n    hour: hour,\n    minute: minute,\n    second: second\n  } = $11d87f3f76e88657$var$getTimeZoneParts(ms, timeZone);\n  let utc = $11d87f3f76e88657$var$epochFromParts(year, month, day, hour, minute, second, 0);\n  return utc - Math.floor(ms / 1000) * 1000;\n}\nconst $11d87f3f76e88657$var$formattersByTimeZone = new Map();\nfunction $11d87f3f76e88657$var$getTimeZoneParts(ms, timeZone) {\n  let formatter = $11d87f3f76e88657$var$formattersByTimeZone.get(timeZone);\n  if (!formatter) {\n    formatter = new Intl.DateTimeFormat('en-US', {\n      timeZone: timeZone,\n      hour12: false,\n      era: 'short',\n      year: 'numeric',\n      month: 'numeric',\n      day: 'numeric',\n      hour: 'numeric',\n      minute: 'numeric',\n      second: 'numeric'\n    });\n    $11d87f3f76e88657$var$formattersByTimeZone.set(timeZone, formatter);\n  }\n  let parts = formatter.formatToParts(new Date(ms));\n  let namedParts = {};\n  for (let part of parts) if (part.type !== 'literal') namedParts[part.type] = part.value;\n  return {\n    // Firefox returns B instead of BC... https://bugzilla.mozilla.org/show_bug.cgi?id=1752253\n    year: namedParts.era === 'BC' || namedParts.era === 'B' ? -namedParts.year + 1 : +namedParts.year,\n    month: +namedParts.month,\n    day: +namedParts.day,\n    hour: namedParts.hour === '24' ? 0 : +namedParts.hour,\n    minute: +namedParts.minute,\n    second: +namedParts.second\n  };\n}\nconst $11d87f3f76e88657$var$DAYMILLIS = 86400000;\nfunction $11d87f3f76e88657$export$136f38efe7caf549(date, timeZone) {\n  let ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date);\n  let earlier = ms - $11d87f3f76e88657$export$59c99f3515d3493f(ms - $11d87f3f76e88657$var$DAYMILLIS, timeZone);\n  let later = ms - $11d87f3f76e88657$export$59c99f3515d3493f(ms + $11d87f3f76e88657$var$DAYMILLIS, timeZone);\n  return $11d87f3f76e88657$var$getValidWallTimes(date, timeZone, earlier, later);\n}\nfunction $11d87f3f76e88657$var$getValidWallTimes(date, timeZone, earlier, later) {\n  let found = earlier === later ? [earlier] : [earlier, later];\n  return found.filter(absolute => $11d87f3f76e88657$var$isValidWallTime(date, timeZone, absolute));\n}\nfunction $11d87f3f76e88657$var$isValidWallTime(date, timeZone, absolute) {\n  let parts = $11d87f3f76e88657$var$getTimeZoneParts(absolute, timeZone);\n  return date.year === parts.year && date.month === parts.month && date.day === parts.day && date.hour === parts.hour && date.minute === parts.minute && date.second === parts.second;\n}\nfunction $11d87f3f76e88657$export$5107c82f94518f5c(date, timeZone) {\n  let disambiguation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'compatible';\n  let dateTime = $11d87f3f76e88657$export$b21e0b124e224484(date);\n  // Fast path: if the time zone is UTC, use native Date.\n  if (timeZone === 'UTC') return $11d87f3f76e88657$export$bd4fb2bc8bb06fb(dateTime);\n  // Fast path: if the time zone is the local timezone and disambiguation is compatible, use native Date.\n  if (timeZone === (0, $14e0f24ef4ac5c92$export$aa8b41735afcabd2)() && disambiguation === 'compatible') {\n    dateTime = $11d87f3f76e88657$export$b4a036af3fc0b032(dateTime, new (0, $3b62074eb05584b2$export$80ee6245ec4f29ec)());\n    // Don't use Date constructor here because two-digit years are interpreted in the 20th century.\n    let date = new Date();\n    let year = (0, $3b62074eb05584b2$export$c36e0ecb2d4fa69d)(dateTime.era, dateTime.year);\n    date.setFullYear(year, dateTime.month - 1, dateTime.day);\n    date.setHours(dateTime.hour, dateTime.minute, dateTime.second, dateTime.millisecond);\n    return date.getTime();\n  }\n  let ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(dateTime);\n  let offsetBefore = $11d87f3f76e88657$export$59c99f3515d3493f(ms - $11d87f3f76e88657$var$DAYMILLIS, timeZone);\n  let offsetAfter = $11d87f3f76e88657$export$59c99f3515d3493f(ms + $11d87f3f76e88657$var$DAYMILLIS, timeZone);\n  let valid = $11d87f3f76e88657$var$getValidWallTimes(dateTime, timeZone, ms - offsetBefore, ms - offsetAfter);\n  if (valid.length === 1) return valid[0];\n  if (valid.length > 1) switch (disambiguation) {\n    // 'compatible' means 'earlier' for \"fall back\" transitions\n    case 'compatible':\n    case 'earlier':\n      return valid[0];\n    case 'later':\n      return valid[valid.length - 1];\n    case 'reject':\n      throw new RangeError('Multiple possible absolute times found');\n  }\n  switch (disambiguation) {\n    case 'earlier':\n      return Math.min(ms - offsetBefore, ms - offsetAfter);\n    // 'compatible' means 'later' for \"spring forward\" transitions\n    case 'compatible':\n    case 'later':\n      return Math.max(ms - offsetBefore, ms - offsetAfter);\n    case 'reject':\n      throw new RangeError('No such absolute time found');\n  }\n}\nfunction $11d87f3f76e88657$export$e67a095c620b86fe(dateTime, timeZone) {\n  let disambiguation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'compatible';\n  return new Date($11d87f3f76e88657$export$5107c82f94518f5c(dateTime, timeZone, disambiguation));\n}\nfunction $11d87f3f76e88657$export$1b96692a1ba042ac(ms, timeZone) {\n  let offset = $11d87f3f76e88657$export$59c99f3515d3493f(ms, timeZone);\n  let date = new Date(ms + offset);\n  let year = date.getUTCFullYear();\n  let month = date.getUTCMonth() + 1;\n  let day = date.getUTCDate();\n  let hour = date.getUTCHours();\n  let minute = date.getUTCMinutes();\n  let second = date.getUTCSeconds();\n  let millisecond = date.getUTCMilliseconds();\n  return new (0, $35ea8db9cb2ccb90$export$d3b7288e7994edea)(year, month, day, timeZone, offset, hour, minute, second, millisecond);\n}\nfunction $11d87f3f76e88657$export$e57ff100d91bd4b9(date, timeZone) {\n  return $11d87f3f76e88657$export$1b96692a1ba042ac(date.getTime(), timeZone);\n}\nfunction $11d87f3f76e88657$export$d7f92bcd3596b086(date) {\n  return $11d87f3f76e88657$export$e57ff100d91bd4b9(date, (0, $14e0f24ef4ac5c92$export$aa8b41735afcabd2)());\n}\nfunction $11d87f3f76e88657$export$93522d1a439f3617(dateTime) {\n  return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(dateTime.calendar, dateTime.era, dateTime.year, dateTime.month, dateTime.day);\n}\nfunction $11d87f3f76e88657$export$6f4d78149f3f53ac(date) {\n  return {\n    era: date.era,\n    year: date.year,\n    month: date.month,\n    day: date.day\n  };\n}\nfunction $11d87f3f76e88657$export$4d0393e732857be5(date) {\n  return {\n    hour: date.hour,\n    minute: date.minute,\n    second: date.second,\n    millisecond: date.millisecond\n  };\n}\nfunction $11d87f3f76e88657$export$b21e0b124e224484(date, time) {\n  let hour = 0,\n    minute = 0,\n    second = 0,\n    millisecond = 0;\n  if ('timeZone' in date) ({\n    hour: hour,\n    minute: minute,\n    second: second,\n    millisecond: millisecond\n  } = date);else if ('hour' in date && !time) return date;\n  if (time) ({\n    hour: hour,\n    minute: minute,\n    second: second,\n    millisecond: millisecond\n  } = time);\n  return new (0, $35ea8db9cb2ccb90$export$ca871e8dbb80966f)(date.calendar, date.era, date.year, date.month, date.day, hour, minute, second, millisecond);\n}\nfunction $11d87f3f76e88657$export$d33f79e3ffc3dc83(dateTime) {\n  return new (0, $35ea8db9cb2ccb90$export$680ea196effce5f)(dateTime.hour, dateTime.minute, dateTime.second, dateTime.millisecond);\n}\nfunction $11d87f3f76e88657$export$b4a036af3fc0b032(date, calendar) {\n  if (date.calendar.identifier === calendar.identifier) return date;\n  let calendarDate = calendar.fromJulianDay(date.calendar.toJulianDay(date));\n  let copy = date.copy();\n  copy.calendar = calendar;\n  copy.era = calendarDate.era;\n  copy.year = calendarDate.year;\n  copy.month = calendarDate.month;\n  copy.day = calendarDate.day;\n  (0, $735220c2d4774dd3$export$c4e2ecac49351ef2)(copy);\n  return copy;\n}\nfunction $11d87f3f76e88657$export$84c95a83c799e074(date, timeZone, disambiguation) {\n  if (date instanceof (0, $35ea8db9cb2ccb90$export$d3b7288e7994edea)) {\n    if (date.timeZone === timeZone) return date;\n    return $11d87f3f76e88657$export$538b00033cc11c75(date, timeZone);\n  }\n  let ms = $11d87f3f76e88657$export$5107c82f94518f5c(date, timeZone, disambiguation);\n  return $11d87f3f76e88657$export$1b96692a1ba042ac(ms, timeZone);\n}\nfunction $11d87f3f76e88657$export$83aac07b4c37b25(date) {\n  let ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date) - date.offset;\n  return new Date(ms);\n}\nfunction $11d87f3f76e88657$export$538b00033cc11c75(date, timeZone) {\n  let ms = $11d87f3f76e88657$export$bd4fb2bc8bb06fb(date) - date.offset;\n  return $11d87f3f76e88657$export$b4a036af3fc0b032($11d87f3f76e88657$export$1b96692a1ba042ac(ms, timeZone), date.calendar);\n}\nfunction $11d87f3f76e88657$export$d9b67bc93c097491(date) {\n  return $11d87f3f76e88657$export$538b00033cc11c75(date, (0, $14e0f24ef4ac5c92$export$aa8b41735afcabd2)());\n}\nexport { $11d87f3f76e88657$export$bd4fb2bc8bb06fb as epochFromDate, $11d87f3f76e88657$export$b4a036af3fc0b032 as toCalendar, $11d87f3f76e88657$export$59c99f3515d3493f as getTimeZoneOffset, $11d87f3f76e88657$export$136f38efe7caf549 as possibleAbsolutes, $11d87f3f76e88657$export$5107c82f94518f5c as toAbsolute, $11d87f3f76e88657$export$b21e0b124e224484 as toCalendarDateTime, $11d87f3f76e88657$export$e67a095c620b86fe as toDate, $11d87f3f76e88657$export$1b96692a1ba042ac as fromAbsolute, $11d87f3f76e88657$export$e57ff100d91bd4b9 as fromDate, $11d87f3f76e88657$export$d7f92bcd3596b086 as fromDateToLocal, $11d87f3f76e88657$export$93522d1a439f3617 as toCalendarDate, $11d87f3f76e88657$export$6f4d78149f3f53ac as toDateFields, $11d87f3f76e88657$export$4d0393e732857be5 as toTimeFields, $11d87f3f76e88657$export$d33f79e3ffc3dc83 as toTime, $11d87f3f76e88657$export$84c95a83c799e074 as toZoned, $11d87f3f76e88657$export$538b00033cc11c75 as toTimeZone, $11d87f3f76e88657$export$83aac07b4c37b25 as zonedToDate, $11d87f3f76e88657$export$d9b67bc93c097491 as toLocalTimeZone };","map":{"version":3,"mappings":"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","names":["$11d87f3f76e88657$export$bd4fb2bc8bb06fb","date","$11d87f3f76e88657$export$b4a036af3fc0b032","year","era","$11d87f3f76e88657$var$epochFromParts","month","day","hour","minute","second","millisecond","Date","setUTCHours","setUTCFullYear","getTime","$11d87f3f76e88657$export$59c99f3515d3493f","ms","timeZone","getTimezoneOffset","$11d87f3f76e88657$var$getTimeZoneParts","utc","Math","floor","$11d87f3f76e88657$var$formattersByTimeZone","Map","formatter","get","Intl","DateTimeFormat","hour12","set","parts","formatToParts","namedParts","part","type","value","$11d87f3f76e88657$var$DAYMILLIS","$11d87f3f76e88657$export$136f38efe7caf549","earlier","later","$11d87f3f76e88657$var$getValidWallTimes","found","filter","absolute","$11d87f3f76e88657$var$isValidWallTime","$11d87f3f76e88657$export$5107c82f94518f5c","disambiguation","dateTime","$11d87f3f76e88657$export$b21e0b124e224484","setFullYear","setHours","offsetBefore","offsetAfter","valid","length","RangeError","min","max","$11d87f3f76e88657$export$e67a095c620b86fe","$11d87f3f76e88657$export$1b96692a1ba042ac","offset","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","$11d87f3f76e88657$export$e57ff100d91bd4b9","$11d87f3f76e88657$export$d7f92bcd3596b086","$11d87f3f76e88657$export$93522d1a439f3617","calendar","$11d87f3f76e88657$export$6f4d78149f3f53ac","$11d87f3f76e88657$export$4d0393e732857be5","time","$11d87f3f76e88657$export$d33f79e3ffc3dc83","identifier","calendarDate","fromJulianDay","toJulianDay","copy","$11d87f3f76e88657$export$84c95a83c799e074","$11d87f3f76e88657$export$538b00033cc11c75","$11d87f3f76e88657$export$83aac07b4c37b25","$11d87f3f76e88657$export$d9b67bc93c097491"],"sources":["D:\\Like, for real projects\\React-Todo-List-V2\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\conversion.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from the TC39 Temporal proposal.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate, AnyDateTime, AnyTime, Calendar, DateFields, Disambiguation, TimeFields} from './types';\nimport {CalendarDate, CalendarDateTime, Time, ZonedDateTime} from './CalendarDate';\nimport {constrain} from './manipulation';\nimport {getExtendedYear, GregorianCalendar} from './calendars/GregorianCalendar';\nimport {getLocalTimeZone} from './queries';\nimport {Mutable} from './utils';\n\nexport function epochFromDate(date: AnyDateTime) {\n  date = toCalendar(date, new GregorianCalendar());\n  let year = getExtendedYear(date.era, date.year);\n  return epochFromParts(year, date.month, date.day, date.hour, date.minute, date.second, date.millisecond);\n}\n\nfunction epochFromParts(year: number, month: number, day: number, hour: number, minute: number, second: number, millisecond: number) {\n  // Note: Date.UTC() interprets one and two-digit years as being in the\n  // 20th century, so don't use it\n  let date = new Date();\n  date.setUTCHours(hour, minute, second, millisecond);\n  date.setUTCFullYear(year, month - 1, day);\n  return date.getTime();\n}\n\nexport function getTimeZoneOffset(ms: number, timeZone: string) {\n  // Fast path for UTC.\n  if (timeZone === 'UTC') {\n    return 0;\n  }\n\n  // Fast path: for local timezone after 1970, use native Date.\n  if (ms > 0 && timeZone === getLocalTimeZone()) {\n    return new Date(ms).getTimezoneOffset() * -60 * 1000;\n  }\n\n  let {year, month, day, hour, minute, second} = getTimeZoneParts(ms, timeZone);\n  let utc = epochFromParts(year, month, day, hour, minute, second, 0);\n  return utc - Math.floor(ms / 1000) * 1000;\n}\n\nconst formattersByTimeZone = new Map<string, Intl.DateTimeFormat>();\n\nfunction getTimeZoneParts(ms: number, timeZone: string) {\n  let formatter = formattersByTimeZone.get(timeZone);\n  if (!formatter) {\n    formatter = new Intl.DateTimeFormat('en-US', {\n      timeZone,\n      hour12: false,\n      era: 'short',\n      year: 'numeric',\n      month: 'numeric',\n      day: 'numeric',\n      hour: 'numeric',\n      minute: 'numeric',\n      second: 'numeric'\n    });\n\n    formattersByTimeZone.set(timeZone, formatter);\n  }\n\n  let parts = formatter.formatToParts(new Date(ms));\n  let namedParts: {[name: string]: string} = {};\n  for (let part of parts) {\n    if (part.type !== 'literal') {\n      namedParts[part.type] = part.value;\n    }\n  }\n\n\n  return {\n    // Firefox returns B instead of BC... https://bugzilla.mozilla.org/show_bug.cgi?id=1752253\n    year: namedParts.era === 'BC' || namedParts.era === 'B' ? -namedParts.year + 1 : +namedParts.year,\n    month: +namedParts.month,\n    day: +namedParts.day,\n    hour: namedParts.hour === '24' ? 0 : +namedParts.hour, // bugs.chromium.org/p/chromium/issues/detail?id=1045791\n    minute: +namedParts.minute,\n    second: +namedParts.second\n  };\n}\n\nconst DAYMILLIS = 86400000;\n\nexport function possibleAbsolutes(date: CalendarDateTime, timeZone: string): number[] {\n  let ms = epochFromDate(date);\n  let earlier = ms - getTimeZoneOffset(ms - DAYMILLIS, timeZone);\n  let later = ms - getTimeZoneOffset(ms + DAYMILLIS, timeZone);\n  return getValidWallTimes(date, timeZone, earlier, later);\n}\n\nfunction getValidWallTimes(date: CalendarDateTime, timeZone: string, earlier: number, later: number): number[] {\n  let found = earlier === later ? [earlier] : [earlier, later];\n  return found.filter(absolute => isValidWallTime(date, timeZone, absolute));\n}\n\nfunction isValidWallTime(date: CalendarDateTime, timeZone: string, absolute: number) {\n  let parts = getTimeZoneParts(absolute, timeZone);\n  return date.year === parts.year\n    && date.month === parts.month\n    && date.day === parts.day\n    && date.hour === parts.hour\n    && date.minute === parts.minute\n    && date.second === parts.second;\n}\n\nexport function toAbsolute(date: CalendarDate | CalendarDateTime, timeZone: string, disambiguation: Disambiguation = 'compatible'): number {\n  let dateTime = toCalendarDateTime(date);\n\n  // Fast path: if the time zone is UTC, use native Date.\n  if (timeZone === 'UTC') {\n    return epochFromDate(dateTime);\n  }\n\n  // Fast path: if the time zone is the local timezone and disambiguation is compatible, use native Date.\n  if (timeZone === getLocalTimeZone() && disambiguation === 'compatible') {\n    dateTime = toCalendar(dateTime, new GregorianCalendar());\n\n    // Don't use Date constructor here because two-digit years are interpreted in the 20th century.\n    let date = new Date();\n    let year = getExtendedYear(dateTime.era, dateTime.year);\n    date.setFullYear(year, dateTime.month - 1, dateTime.day);\n    date.setHours(dateTime.hour, dateTime.minute, dateTime.second, dateTime.millisecond);\n    return date.getTime();\n  }\n\n  let ms = epochFromDate(dateTime);\n  let offsetBefore = getTimeZoneOffset(ms - DAYMILLIS, timeZone);\n  let offsetAfter = getTimeZoneOffset(ms + DAYMILLIS, timeZone);\n  let valid = getValidWallTimes(dateTime, timeZone, ms - offsetBefore, ms - offsetAfter);\n\n  if (valid.length === 1) {\n    return valid[0];\n  }\n\n  if (valid.length > 1) {\n    switch (disambiguation) {\n      // 'compatible' means 'earlier' for \"fall back\" transitions\n      case 'compatible':\n      case 'earlier':\n        return valid[0];\n      case 'later':\n        return valid[valid.length - 1];\n      case 'reject':\n        throw new RangeError('Multiple possible absolute times found');\n    }\n  }\n\n  switch (disambiguation) {\n    case 'earlier':\n      return Math.min(ms - offsetBefore, ms - offsetAfter);\n    // 'compatible' means 'later' for \"spring forward\" transitions\n    case 'compatible':\n    case 'later':\n      return Math.max(ms - offsetBefore, ms - offsetAfter);\n    case 'reject':\n      throw new RangeError('No such absolute time found');\n  }\n}\n\nexport function toDate(dateTime: CalendarDate | CalendarDateTime, timeZone: string, disambiguation: Disambiguation = 'compatible'): Date {\n  return new Date(toAbsolute(dateTime, timeZone, disambiguation));\n}\n\n/**\n * Takes a Unix epoch (milliseconds since 1970) and converts it to the provided time zone.\n */\nexport function fromAbsolute(ms: number, timeZone: string): ZonedDateTime {\n  let offset = getTimeZoneOffset(ms, timeZone);\n  let date = new Date(ms + offset);\n  let year = date.getUTCFullYear();\n  let month = date.getUTCMonth() + 1;\n  let day = date.getUTCDate();\n  let hour = date.getUTCHours();\n  let minute = date.getUTCMinutes();\n  let second = date.getUTCSeconds();\n  let millisecond = date.getUTCMilliseconds();\n\n  return new ZonedDateTime(year, month, day, timeZone, offset, hour, minute, second, millisecond);\n}\n\n/**\n * Takes a `Date` object and converts it to the provided time zone.\n */\nexport function fromDate(date: Date, timeZone: string): ZonedDateTime {\n  return fromAbsolute(date.getTime(), timeZone);\n}\n\nexport function fromDateToLocal(date: Date): ZonedDateTime {\n  return fromDate(date, getLocalTimeZone());\n}\n\n/** Converts a value with date components such as a `CalendarDateTime` or `ZonedDateTime` into a `CalendarDate`. */\nexport function toCalendarDate(dateTime: AnyCalendarDate): CalendarDate {\n  return new CalendarDate(dateTime.calendar, dateTime.era, dateTime.year, dateTime.month, dateTime.day);\n}\n\nexport function toDateFields(date: AnyCalendarDate): DateFields {\n  return {\n    era: date.era,\n    year: date.year,\n    month: date.month,\n    day: date.day\n  };\n}\n\nexport function toTimeFields(date: AnyTime): TimeFields {\n  return {\n    hour: date.hour,\n    minute: date.minute,\n    second: date.second,\n    millisecond: date.millisecond\n  };\n}\n\n/**\n * Converts a date value to a `CalendarDateTime`. An optional `Time` value can be passed to set the time\n * of the resulting value, otherwise it will default to midnight.\n */\nexport function toCalendarDateTime(date: CalendarDate | CalendarDateTime | ZonedDateTime, time?: AnyTime): CalendarDateTime {\n  let hour = 0, minute = 0, second = 0, millisecond = 0;\n  if ('timeZone' in date) {\n    ({hour, minute, second, millisecond} = date);\n  } else if ('hour' in date && !time) {\n    return date;\n  }\n\n  if (time) {\n    ({hour, minute, second, millisecond} = time);\n  }\n\n  return new CalendarDateTime(\n    date.calendar,\n    date.era,\n    date.year,\n    date.month,\n    date.day,\n    hour,\n    minute,\n    second,\n    millisecond\n  );\n}\n\n/** Extracts the time components from a value containing a date and time. */\nexport function toTime(dateTime: CalendarDateTime | ZonedDateTime): Time {\n  return new Time(dateTime.hour, dateTime.minute, dateTime.second, dateTime.millisecond);\n}\n\n/** Converts a date from one calendar system to another. */\nexport function toCalendar<T extends AnyCalendarDate>(date: T, calendar: Calendar): T {\n  if (date.calendar.identifier === calendar.identifier) {\n    return date;\n  }\n\n  let calendarDate = calendar.fromJulianDay(date.calendar.toJulianDay(date));\n  let copy: Mutable<T> = date.copy();\n  copy.calendar = calendar;\n  copy.era = calendarDate.era;\n  copy.year = calendarDate.year;\n  copy.month = calendarDate.month;\n  copy.day = calendarDate.day;\n  constrain(copy);\n  return copy;\n}\n\n/**\n * Converts a date value to a `ZonedDateTime` in the provided time zone. The `disambiguation` option can be set\n * to control how values that fall on daylight saving time changes are interpreted.\n */\nexport function toZoned(date: CalendarDate | CalendarDateTime | ZonedDateTime, timeZone: string, disambiguation?: Disambiguation): ZonedDateTime {\n  if (date instanceof ZonedDateTime) {\n    if (date.timeZone === timeZone) {\n      return date;\n    }\n\n    return toTimeZone(date, timeZone);\n  }\n\n  let ms = toAbsolute(date, timeZone, disambiguation);\n  return fromAbsolute(ms, timeZone);\n}\n\nexport function zonedToDate(date: ZonedDateTime) {\n  let ms = epochFromDate(date) - date.offset;\n  return new Date(ms);\n}\n\n/** Converts a `ZonedDateTime` from one time zone to another. */\nexport function toTimeZone(date: ZonedDateTime, timeZone: string): ZonedDateTime {\n  let ms = epochFromDate(date) - date.offset;\n  return toCalendar(fromAbsolute(ms, timeZone), date.calendar);\n}\n\n/** Converts the given `ZonedDateTime` into the user's local time zone. */\nexport function toLocalTimeZone(date: ZonedDateTime): ZonedDateTime {\n  return toTimeZone(date, getLocalTimeZone());\n}\n"]},"metadata":{},"sourceType":"module"}