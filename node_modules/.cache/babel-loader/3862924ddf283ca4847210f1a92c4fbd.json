{"ast":null,"code":"var _jsxFileName = \"D:\\\\Like, for real projects\\\\React-Todo-List-V2\\\\src\\\\components\\\\ToDo.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCircleCheck, faPen, faTrashCan } from '@fortawesome/free-solid-svg-icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ToDo = _ref => {\n  _s();\n  let {\n    toDo,\n    markDone,\n    setUpdateData,\n    deleteTask\n  } = _ref;\n  const [editingTaskId, setEditingTaskId] = useState(null); // State to track which task is being edited\n  const [editedDetails, setEditedDetails] = useState(''); // State to hold edited details\n\n  const handleEditDetails = taskId => {\n    // Update task details logic here\n    // You may want to call a function passed as a prop to update the task details in the parent component\n    // For example: updateTaskDetails(taskId, editedDetails);\n    setEditingTaskId(null); // Reset editing state after saving\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: toDo && toDo.sort((a, b) => a.id > b.id ? 1 : -1).map((task, index) => {\n      // Format the createdAt date\n      const createdAt = new Date(task.createdAt).toLocaleString();\n      return /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col taskBg\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: task.status ? 'done' : '',\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"taskNumber\",\n              children: index + 1\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 30,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"taskText\",\n              children: task.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 31,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"taskTime\",\n              children: createdAt\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 32,\n              columnNumber: 19\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n              className: `taskPriority ${task.priority}`,\n              children: task.priority\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 33,\n              columnNumber: 19\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"iconsWrap\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              title: \"Completed / Not Completed\",\n              onClick: () => markDone(task.id),\n              children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                icon: faCircleCheck\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 39,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 36,\n              columnNumber: 19\n            }, this), task.status ? null : /*#__PURE__*/_jsxDEV(\"span\", {\n              title: \"Edit\",\n              onClick: () => {\n                setEditingTaskId(task.id);\n                setEditedDetails(task.details || ''); // Set current details for editing\n              },\n              children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                icon: faPen\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 49,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              title: \"Delete\",\n              onClick: () => deleteTask(task.id),\n              children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n                icon: faTrashCan\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 56,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 17\n          }, this), editingTaskId === task.id ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"detailsSection\",\n            children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n              value: editedDetails,\n              onChange: e => setEditedDetails(e.target.value),\n              rows: 3,\n              placeholder: \"Edit task details...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleEditDetails(task.id),\n              children: \"Save\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setEditingTaskId(null),\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 19\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"detailsSection\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Details:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 74,\n                columnNumber: 24\n              }, this), \" \", task.details || 'No details provided.']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => setEditingTaskId(task.id),\n              children: \"Edit Details\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 15\n        }, this)\n      }, task.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 13\n      }, this);\n    })\n  }, void 0, false);\n};\n_s(ToDo, \"s/Tas7NgwMrSATlzBk5hVpvzlj0=\");\n_c = ToDo;\nexport default ToDo;\nvar _c;\n$RefreshReg$(_c, \"ToDo\");","map":{"version":3,"names":["React","useState","FontAwesomeIcon","faCircleCheck","faPen","faTrashCan","jsxDEV","_jsxDEV","Fragment","_Fragment","ToDo","_ref","_s","toDo","markDone","setUpdateData","deleteTask","editingTaskId","setEditingTaskId","editedDetails","setEditedDetails","handleEditDetails","taskId","children","sort","a","b","id","map","task","index","createdAt","Date","toLocaleString","className","status","fileName","_jsxFileName","lineNumber","columnNumber","title","priority","onClick","icon","details","value","onChange","e","target","rows","placeholder","_c","$RefreshReg$"],"sources":["D:/Like, for real projects/React-Todo-List-V2/src/components/ToDo.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n  faCircleCheck, faPen, faTrashCan\r\n} from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst ToDo = ({ toDo, markDone, setUpdateData , deleteTask }) => {\r\n  const [editingTaskId, setEditingTaskId] = useState(null); // State to track which task is being edited\r\n  const [editedDetails, setEditedDetails] = useState(''); // State to hold edited details\r\n\r\n  const handleEditDetails = (taskId) => {\r\n    // Update task details logic here\r\n    // You may want to call a function passed as a prop to update the task details in the parent component\r\n    // For example: updateTaskDetails(taskId, editedDetails);\r\n    setEditingTaskId(null); // Reset editing state after saving\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {toDo && toDo\r\n        .sort((a, b) => a.id > b.id ? 1 : -1)\r\n        .map((task, index) => {\r\n          // Format the createdAt date\r\n          const createdAt = new Date(task.createdAt).toLocaleString();\r\n\r\n          return (\r\n            <React.Fragment key={task.id}>\r\n              <div className=\"col taskBg\">\r\n                <div className={task.status ? 'done' : ''}>\r\n                  <span className=\"taskNumber\">{index + 1}</span>\r\n                  <span className=\"taskText\">{task.title}</span>\r\n                  <span className=\"taskTime\">{createdAt}</span> {/* Displaying the created time */}\r\n                  <span className={`taskPriority ${task.priority}`}>{task.priority}</span> {/* Displaying the priority */}\r\n                </div>\r\n                <div className=\"iconsWrap\">\r\n                  <span title=\"Completed / Not Completed\"\r\n                    onClick={() => markDone(task.id)}\r\n                  >\r\n                    <FontAwesomeIcon icon={faCircleCheck} />\r\n                  </span>\r\n\r\n                  {task.status ? null : (\r\n                    <span title=\"Edit\"\r\n                      onClick={() => {\r\n                        setEditingTaskId(task.id);\r\n                        setEditedDetails(task.details || ''); // Set current details for editing\r\n                      }}\r\n                    >\r\n                      <FontAwesomeIcon icon={faPen} />\r\n                    </span>\r\n                  )}\r\n\r\n                  <span title=\"Delete\"\r\n                    onClick={() => deleteTask(task.id)}\r\n                  >\r\n                    <FontAwesomeIcon icon={faTrashCan} />\r\n                  </span>\r\n                </div>\r\n\r\n                {/* Details Section */}\r\n                {editingTaskId === task.id ? (\r\n                  <div className=\"detailsSection\">\r\n                    <textarea\r\n                      value={editedDetails}\r\n                      onChange={(e) => setEditedDetails(e.target.value)}\r\n                      rows={3}\r\n                      placeholder=\"Edit task details...\"\r\n                    />\r\n                    <button onClick={() => handleEditDetails(task.id)}>Save</button>\r\n                    <button onClick={() => setEditingTaskId(null)}>Cancel</button>\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"detailsSection\">\r\n                    <p><strong>Details:</strong> {task.details || 'No details provided.'}</p>\r\n                    <button onClick={() => setEditingTaskId(task.id)}>Edit Details</button>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </React.Fragment>\r\n          );\r\n        })\r\n      }\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ToDo;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,eAAe,QAAQ,gCAAgC;AAChE,SACEC,aAAa,EAAEC,KAAK,EAAEC,UAAU,QAC3B,mCAAmC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE3C,MAAMC,IAAI,GAAGC,IAAA,IAAoD;EAAAC,EAAA;EAAA,IAAnD;IAAEC,IAAI;IAAEC,QAAQ;IAAEC,aAAa;IAAGC;EAAW,CAAC,GAAAL,IAAA;EAC1D,MAAM,CAACM,aAAa,EAAEC,gBAAgB,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC1D,MAAM,CAACkB,aAAa,EAAEC,gBAAgB,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAExD,MAAMoB,iBAAiB,GAAIC,MAAM,IAAK;IACpC;IACA;IACA;IACAJ,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC;EAC1B,CAAC;EAED,oBACEX,OAAA,CAAAE,SAAA;IAAAc,QAAA,EACGV,IAAI,IAAIA,IAAI,CACVW,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACE,EAAE,GAAGD,CAAC,CAACC,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CACpCC,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;MACpB;MACA,MAAMC,SAAS,GAAG,IAAIC,IAAI,CAACH,IAAI,CAACE,SAAS,CAAC,CAACE,cAAc,CAAC,CAAC;MAE3D,oBACE1B,OAAA,CAACP,KAAK,CAACQ,QAAQ;QAAAe,QAAA,eACbhB,OAAA;UAAK2B,SAAS,EAAC,YAAY;UAAAX,QAAA,gBACzBhB,OAAA;YAAK2B,SAAS,EAAEL,IAAI,CAACM,MAAM,GAAG,MAAM,GAAG,EAAG;YAAAZ,QAAA,gBACxChB,OAAA;cAAM2B,SAAS,EAAC,YAAY;cAAAX,QAAA,EAAEO,KAAK,GAAG;YAAC;cAAAM,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,eAC/ChC,OAAA;cAAM2B,SAAS,EAAC,UAAU;cAAAX,QAAA,EAAEM,IAAI,CAACW;YAAK;cAAAJ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,eAC9ChC,OAAA;cAAM2B,SAAS,EAAC,UAAU;cAAAX,QAAA,EAAEQ;YAAS;cAAAK,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,KAAC,eAC9ChC,OAAA;cAAM2B,SAAS,EAAE,gBAAgBL,IAAI,CAACY,QAAQ,EAAG;cAAAlB,QAAA,EAAEM,IAAI,CAACY;YAAQ;cAAAL,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,KAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACtE,CAAC,eACNhC,OAAA;YAAK2B,SAAS,EAAC,WAAW;YAAAX,QAAA,gBACxBhB,OAAA;cAAMiC,KAAK,EAAC,2BAA2B;cACrCE,OAAO,EAAEA,CAAA,KAAM5B,QAAQ,CAACe,IAAI,CAACF,EAAE,CAAE;cAAAJ,QAAA,eAEjChB,OAAA,CAACL,eAAe;gBAACyC,IAAI,EAAExC;cAAc;gBAAAiC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACpC,CAAC,EAENV,IAAI,CAACM,MAAM,GAAG,IAAI,gBACjB5B,OAAA;cAAMiC,KAAK,EAAC,MAAM;cAChBE,OAAO,EAAEA,CAAA,KAAM;gBACbxB,gBAAgB,CAACW,IAAI,CAACF,EAAE,CAAC;gBACzBP,gBAAgB,CAACS,IAAI,CAACe,OAAO,IAAI,EAAE,CAAC,CAAC,CAAC;cACxC,CAAE;cAAArB,QAAA,eAEFhB,OAAA,CAACL,eAAe;gBAACyC,IAAI,EAAEvC;cAAM;gBAAAgC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC5B,CACP,eAEDhC,OAAA;cAAMiC,KAAK,EAAC,QAAQ;cAClBE,OAAO,EAAEA,CAAA,KAAM1B,UAAU,CAACa,IAAI,CAACF,EAAE,CAAE;cAAAJ,QAAA,eAEnChB,OAAA,CAACL,eAAe;gBAACyC,IAAI,EAAEtC;cAAW;gBAAA+B,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACjC,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACJ,CAAC,EAGLtB,aAAa,KAAKY,IAAI,CAACF,EAAE,gBACxBpB,OAAA;YAAK2B,SAAS,EAAC,gBAAgB;YAAAX,QAAA,gBAC7BhB,OAAA;cACEsC,KAAK,EAAE1B,aAAc;cACrB2B,QAAQ,EAAGC,CAAC,IAAK3B,gBAAgB,CAAC2B,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;cAClDI,IAAI,EAAE,CAAE;cACRC,WAAW,EAAC;YAAsB;cAAAd,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACnC,CAAC,eACFhC,OAAA;cAAQmC,OAAO,EAAEA,CAAA,KAAMrB,iBAAiB,CAACQ,IAAI,CAACF,EAAE,CAAE;cAAAJ,QAAA,EAAC;YAAI;cAAAa,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eAChEhC,OAAA;cAAQmC,OAAO,EAAEA,CAAA,KAAMxB,gBAAgB,CAAC,IAAI,CAAE;cAAAK,QAAA,EAAC;YAAM;cAAAa,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC3D,CAAC,gBAENhC,OAAA;YAAK2B,SAAS,EAAC,gBAAgB;YAAAX,QAAA,gBAC7BhB,OAAA;cAAAgB,QAAA,gBAAGhB,OAAA;gBAAAgB,QAAA,EAAQ;cAAQ;gBAAAa,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,KAAC,EAACV,IAAI,CAACe,OAAO,IAAI,sBAAsB;YAAA;cAAAR,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACzEhC,OAAA;cAAQmC,OAAO,EAAEA,CAAA,KAAMxB,gBAAgB,CAACW,IAAI,CAACF,EAAE,CAAE;cAAAJ,QAAA,EAAC;YAAY;cAAAa,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACpE,CACN;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACE;MAAC,GAnDaV,IAAI,CAACF,EAAE;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAoDZ,CAAC;IAErB,CAAC;EAAC,gBAEJ,CAAC;AAEP,CAAC;AAAA3B,EAAA,CA9EKF,IAAI;AAAAyC,EAAA,GAAJzC,IAAI;AAgFV,eAAeA,IAAI;AAAC,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module"}