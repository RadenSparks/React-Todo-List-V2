{"ast":null,"code":"import $5rwhf$intlStringsmodulejs from \"./intlStrings.mjs\";\nimport { clearAnnouncer as $5rwhf$clearAnnouncer, announce as $5rwhf$announce } from \"@react-aria/live-announcer\";\nimport { useRef as $5rwhf$useRef, useEffect as $5rwhf$useEffect } from \"react\";\nimport { useEffectEvent as $5rwhf$useEffectEvent, useGlobalListeners as $5rwhf$useGlobalListeners } from \"@react-aria/utils\";\nimport { useLocalizedStringFormatter as $5rwhf$useLocalizedStringFormatter } from \"@react-aria/i18n\";\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $d2e8511e6f209edf$export$e908e06f4b8e3402(props) {\n  const _async = (0, $5rwhf$useRef)(undefined);\n  let {\n    value: value,\n    textValue: textValue,\n    minValue: minValue,\n    maxValue: maxValue,\n    isDisabled: isDisabled,\n    isReadOnly: isReadOnly,\n    isRequired: isRequired,\n    onIncrement: onIncrement,\n    onIncrementPage: onIncrementPage,\n    onDecrement: onDecrement,\n    onDecrementPage: onDecrementPage,\n    onDecrementToMin: onDecrementToMin,\n    onIncrementToMax: onIncrementToMax\n  } = props;\n  const stringFormatter = (0, $5rwhf$useLocalizedStringFormatter)((0, $parcel$interopDefault($5rwhf$intlStringsmodulejs)), '@react-aria/spinbutton');\n  const clearAsync = () => clearTimeout(_async.current);\n  // eslint-disable-next-line arrow-body-style\n  (0, $5rwhf$useEffect)(() => {\n    return () => clearAsync();\n  }, []);\n  let onKeyDown = e => {\n    if (e.ctrlKey || e.metaKey || e.shiftKey || e.altKey || isReadOnly) return;\n    switch (e.key) {\n      case 'PageUp':\n        if (onIncrementPage) {\n          e.preventDefault();\n          onIncrementPage === null || onIncrementPage === void 0 ? void 0 : onIncrementPage();\n          break;\n        }\n      // fallthrough!\n      case 'ArrowUp':\n      case 'Up':\n        if (onIncrement) {\n          e.preventDefault();\n          onIncrement === null || onIncrement === void 0 ? void 0 : onIncrement();\n        }\n        break;\n      case 'PageDown':\n        if (onDecrementPage) {\n          e.preventDefault();\n          onDecrementPage === null || onDecrementPage === void 0 ? void 0 : onDecrementPage();\n          break;\n        }\n      // fallthrough\n      case 'ArrowDown':\n      case 'Down':\n        if (onDecrement) {\n          e.preventDefault();\n          onDecrement === null || onDecrement === void 0 ? void 0 : onDecrement();\n        }\n        break;\n      case 'Home':\n        if (onDecrementToMin) {\n          e.preventDefault();\n          onDecrementToMin === null || onDecrementToMin === void 0 ? void 0 : onDecrementToMin();\n        }\n        break;\n      case 'End':\n        if (onIncrementToMax) {\n          e.preventDefault();\n          onIncrementToMax === null || onIncrementToMax === void 0 ? void 0 : onIncrementToMax();\n        }\n        break;\n    }\n  };\n  let isFocused = (0, $5rwhf$useRef)(false);\n  let onFocus = () => {\n    isFocused.current = true;\n  };\n  let onBlur = () => {\n    isFocused.current = false;\n  };\n  // Replace Unicode hyphen-minus (U+002D) with minus sign (U+2212).\n  // This ensures that macOS VoiceOver announces it as \"minus\" even with other characters between the minus sign\n  // and the number (e.g. currency symbol). Otherwise it announces nothing because it assumes the character is a hyphen.\n  // In addition, replace the empty string with the word \"Empty\" so that iOS VoiceOver does not read \"50%\" for an empty field.\n  let ariaTextValue = textValue === '' ? stringFormatter.format('Empty') : (textValue || `${value}`).replace('-', '\\u2212');\n  (0, $5rwhf$useEffect)(() => {\n    if (isFocused.current) {\n      (0, $5rwhf$clearAnnouncer)('assertive');\n      (0, $5rwhf$announce)(ariaTextValue, 'assertive');\n    }\n  }, [ariaTextValue]);\n  const onIncrementPressStart = (0, $5rwhf$useEffectEvent)(initialStepDelay => {\n    clearAsync();\n    onIncrement === null || onIncrement === void 0 ? void 0 : onIncrement();\n    // Start spinning after initial delay\n    _async.current = window.setTimeout(() => {\n      if (maxValue === undefined || isNaN(maxValue) || value === undefined || isNaN(value) || value < maxValue) onIncrementPressStart(60);\n    }, initialStepDelay);\n  });\n  const onDecrementPressStart = (0, $5rwhf$useEffectEvent)(initialStepDelay => {\n    clearAsync();\n    onDecrement === null || onDecrement === void 0 ? void 0 : onDecrement();\n    // Start spinning after initial delay\n    _async.current = window.setTimeout(() => {\n      if (minValue === undefined || isNaN(minValue) || value === undefined || isNaN(value) || value > minValue) onDecrementPressStart(60);\n    }, initialStepDelay);\n  });\n  let cancelContextMenu = e => {\n    e.preventDefault();\n  };\n  let {\n    addGlobalListener: addGlobalListener,\n    removeAllGlobalListeners: removeAllGlobalListeners\n  } = (0, $5rwhf$useGlobalListeners)();\n  return {\n    spinButtonProps: {\n      role: 'spinbutton',\n      'aria-valuenow': value !== undefined && !isNaN(value) ? value : undefined,\n      'aria-valuetext': ariaTextValue,\n      'aria-valuemin': minValue,\n      'aria-valuemax': maxValue,\n      'aria-disabled': isDisabled || undefined,\n      'aria-readonly': isReadOnly || undefined,\n      'aria-required': isRequired || undefined,\n      onKeyDown: onKeyDown,\n      onFocus: onFocus,\n      onBlur: onBlur\n    },\n    incrementButtonProps: {\n      onPressStart: () => {\n        onIncrementPressStart(400);\n        addGlobalListener(window, 'contextmenu', cancelContextMenu);\n      },\n      onPressEnd: () => {\n        clearAsync();\n        removeAllGlobalListeners();\n      },\n      onFocus: onFocus,\n      onBlur: onBlur\n    },\n    decrementButtonProps: {\n      onPressStart: () => {\n        onDecrementPressStart(400);\n        addGlobalListener(window, 'contextmenu', cancelContextMenu);\n      },\n      onPressEnd: () => {\n        clearAsync();\n        removeAllGlobalListeners();\n      },\n      onFocus: onFocus,\n      onBlur: onBlur\n    }\n  };\n}\nexport { $d2e8511e6f209edf$export$e908e06f4b8e3402 as useSpinButton };","map":{"version":3,"mappings":"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","names":["$d2e8511e6f209edf$export$e908e06f4b8e3402","props","_async","undefined","value","textValue","minValue","maxValue","isDisabled","isReadOnly","isRequired","onIncrement","onIncrementPage","onDecrement","onDecrementPage","onDecrementToMin","onIncrementToMax","stringFormatter","clearAsync","clearTimeout","current","onKeyDown","e","ctrlKey","metaKey","shiftKey","altKey","key","preventDefault","isFocused","onFocus","onBlur","ariaTextValue","format","replace","onIncrementPressStart","initialStepDelay","window","setTimeout","isNaN","onDecrementPressStart","cancelContextMenu","addGlobalListener","removeAllGlobalListeners","spinButtonProps","role","incrementButtonProps","onPressStart","onPressEnd","decrementButtonProps"],"sources":["D:\\Like, for real projects\\React-Todo-List-V2\\node_modules\\@react-aria\\spinbutton\\dist\\packages\\@react-aria\\spinbutton\\src\\useSpinButton.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {announce, clearAnnouncer} from '@react-aria/live-announcer';\nimport {AriaButtonProps} from '@react-types/button';\nimport {DOMAttributes, InputBase, RangeInputBase, Validation, ValueBase} from '@react-types/shared';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport {useEffect, useRef} from 'react';\nimport {useEffectEvent, useGlobalListeners} from '@react-aria/utils';\nimport {useLocalizedStringFormatter} from '@react-aria/i18n';\n\n\nexport interface SpinButtonProps extends InputBase, Validation<number>, ValueBase<number>, RangeInputBase<number> {\n  textValue?: string,\n  onIncrement?: () => void,\n  onIncrementPage?: () => void,\n  onDecrement?: () => void,\n  onDecrementPage?: () => void,\n  onDecrementToMin?: () => void,\n  onIncrementToMax?: () => void\n}\n\nexport interface SpinbuttonAria {\n  spinButtonProps: DOMAttributes,\n  incrementButtonProps: AriaButtonProps,\n  decrementButtonProps: AriaButtonProps\n}\n\nexport function useSpinButton(\n  props: SpinButtonProps\n): SpinbuttonAria {\n  const _async = useRef<number>(undefined);\n  let {\n    value,\n    textValue,\n    minValue,\n    maxValue,\n    isDisabled,\n    isReadOnly,\n    isRequired,\n    onIncrement,\n    onIncrementPage,\n    onDecrement,\n    onDecrementPage,\n    onDecrementToMin,\n    onIncrementToMax\n  } = props;\n  const stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-aria/spinbutton');\n\n  const clearAsync = () => clearTimeout(_async.current);\n\n  // eslint-disable-next-line arrow-body-style\n  useEffect(() => {\n    return () => clearAsync();\n  }, []);\n\n  let onKeyDown = (e) => {\n    if (e.ctrlKey || e.metaKey || e.shiftKey || e.altKey || isReadOnly) {\n      return;\n    }\n\n    switch (e.key) {\n      case 'PageUp':\n        if (onIncrementPage) {\n          e.preventDefault();\n          onIncrementPage?.();\n          break;\n        }\n      // fallthrough!\n      case 'ArrowUp':\n      case 'Up':\n        if (onIncrement) {\n          e.preventDefault();\n          onIncrement?.();\n        }\n        break;\n      case 'PageDown':\n        if (onDecrementPage) {\n          e.preventDefault();\n          onDecrementPage?.();\n          break;\n        }\n      // fallthrough\n      case 'ArrowDown':\n      case 'Down':\n        if (onDecrement) {\n          e.preventDefault();\n          onDecrement?.();\n        }\n        break;\n      case 'Home':\n        if (onDecrementToMin) {\n          e.preventDefault();\n          onDecrementToMin?.();\n        }\n        break;\n      case 'End':\n        if (onIncrementToMax) {\n          e.preventDefault();\n          onIncrementToMax?.();\n        }\n        break;\n    }\n  };\n\n  let isFocused = useRef(false);\n  let onFocus = () => {\n    isFocused.current = true;\n  };\n\n  let onBlur = () => {\n    isFocused.current = false;\n  };\n\n  // Replace Unicode hyphen-minus (U+002D) with minus sign (U+2212).\n  // This ensures that macOS VoiceOver announces it as \"minus\" even with other characters between the minus sign\n  // and the number (e.g. currency symbol). Otherwise it announces nothing because it assumes the character is a hyphen.\n  // In addition, replace the empty string with the word \"Empty\" so that iOS VoiceOver does not read \"50%\" for an empty field.\n  let ariaTextValue = textValue === '' ? stringFormatter.format('Empty') : (textValue || `${value}`).replace('-', '\\u2212');\n\n  useEffect(() => {\n    if (isFocused.current) {\n      clearAnnouncer('assertive');\n      announce(ariaTextValue, 'assertive');\n    }\n  }, [ariaTextValue]);\n\n  const onIncrementPressStart = useEffectEvent(\n    (initialStepDelay: number) => {\n      clearAsync();\n      onIncrement?.();\n      // Start spinning after initial delay\n      _async.current = window.setTimeout(\n        () => {\n          if ((maxValue === undefined || isNaN(maxValue)) || (value === undefined || isNaN(value)) || value < maxValue) {\n            onIncrementPressStart(60);\n          }\n        },\n        initialStepDelay\n      );\n    }\n  );\n\n  const onDecrementPressStart = useEffectEvent(\n    (initialStepDelay: number) => {\n      clearAsync();\n      onDecrement?.();\n      // Start spinning after initial delay\n      _async.current = window.setTimeout(\n        () => {\n          if ((minValue === undefined || isNaN(minValue)) || (value === undefined || isNaN(value)) || value > minValue) {\n            onDecrementPressStart(60);\n          }\n        },\n        initialStepDelay\n      );\n    }\n  );\n\n  let cancelContextMenu = (e) => {\n    e.preventDefault();\n  };\n\n  let {addGlobalListener, removeAllGlobalListeners} = useGlobalListeners();\n\n  return {\n    spinButtonProps: {\n      role: 'spinbutton',\n      'aria-valuenow': value !== undefined && !isNaN(value) ? value : undefined,\n      'aria-valuetext': ariaTextValue,\n      'aria-valuemin': minValue,\n      'aria-valuemax': maxValue,\n      'aria-disabled': isDisabled || undefined,\n      'aria-readonly': isReadOnly || undefined,\n      'aria-required': isRequired || undefined,\n      onKeyDown,\n      onFocus,\n      onBlur\n    },\n    incrementButtonProps: {\n      onPressStart: () => {\n        onIncrementPressStart(400);\n        addGlobalListener(window, 'contextmenu', cancelContextMenu);\n      },\n      onPressEnd: () => {\n        clearAsync();\n        removeAllGlobalListeners();\n      },\n      onFocus,\n      onBlur\n    },\n    decrementButtonProps: {\n      onPressStart: () => {\n        onDecrementPressStart(400);\n        addGlobalListener(window, 'contextmenu', cancelContextMenu);\n      },\n      onPressEnd: () => {\n        clearAsync();\n        removeAllGlobalListeners();\n      },\n      onFocus,\n      onBlur\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}