{"ast":null,"code":"import { useSelectableCollection as $ae20dd8cbca75726$export$d6daf82dcd84e87c } from \"./useSelectableCollection.mjs\";\nimport { ListKeyboardDelegate as $2a25aae57d74318e$export$a05409b8bb224a5a } from \"./ListKeyboardDelegate.mjs\";\nimport { useCollator as $1aJk5$useCollator } from \"@react-aria/i18n\";\nimport { useMemo as $1aJk5$useMemo } from \"react\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $982254629710d113$export$b95089534ab7c1fd(props) {\n  let {\n    selectionManager: selectionManager,\n    collection: collection,\n    disabledKeys: disabledKeys,\n    ref: ref,\n    keyboardDelegate: keyboardDelegate,\n    layoutDelegate: layoutDelegate\n  } = props;\n  // By default, a KeyboardDelegate is provided which uses the DOM to query layout information (e.g. for page up/page down).\n  // When virtualized, the layout object will be passed in as a prop and override this.\n  let collator = (0, $1aJk5$useCollator)({\n    usage: 'search',\n    sensitivity: 'base'\n  });\n  let disabledBehavior = selectionManager.disabledBehavior;\n  let delegate = (0, $1aJk5$useMemo)(() => keyboardDelegate || new (0, $2a25aae57d74318e$export$a05409b8bb224a5a)({\n    collection: collection,\n    disabledKeys: disabledKeys,\n    disabledBehavior: disabledBehavior,\n    ref: ref,\n    collator: collator,\n    layoutDelegate: layoutDelegate\n  }), [keyboardDelegate, layoutDelegate, collection, disabledKeys, ref, collator, disabledBehavior]);\n  let {\n    collectionProps: collectionProps\n  } = (0, $ae20dd8cbca75726$export$d6daf82dcd84e87c)({\n    ...props,\n    ref: ref,\n    selectionManager: selectionManager,\n    keyboardDelegate: delegate\n  });\n  return {\n    listProps: collectionProps\n  };\n}\nexport { $982254629710d113$export$b95089534ab7c1fd as useSelectableList };","map":{"version":3,"mappings":";;;;;AAAA;;;;;;;;;;;;AAiDO,SAASA,0CAAkBC,KAAgC;EAChE,IAAI;IAAAC,kBACFA,gBAAgB;IAAAC,YAChBA,UAAU;IAAAC,cACVA,YAAY;IAAAC,KACZA,GAAG;IAAAC,kBACHA,gBAAgB;IAAAC,gBAChBA;EAAc,CACf,GAAGN;EAEJ;EACA;EACA,IAAIO,WAAW,sBAAU,EAAE;IAACC,OAAO;IAAUC,aAAa;EAAM;EAChE,IAAIC,mBAAmBT,iBAAiBS,gBAAgB;EACxD,IAAIC,WAAW,kBAAM,EAAE,MACrBN,oBAAoB,KAAI,4CAAmB,EAAE;gBAC3CH;kBACAC;sBACAO;SACAN;cACAG;oBACAD;EACF,IACC,CAACD,kBAAkBC,gBAAgBJ,YAAYC,cAAcC,KAAKG,UAAUG,iBAAiB;EAEhG,IAAI;IAAAE,iBAACA;EAAe,CAAC,GAAG,6CAAsB,EAAE;IAC9C,GAAGZ,KAAK;SACRI;sBACAH;IACAI,kBAAkBM;EACpB;EAEA,OAAO;IACLE,WAAWD;EACb;AACF","names":["$982254629710d113$export$b95089534ab7c1fd","props","selectionManager","collection","disabledKeys","ref","keyboardDelegate","layoutDelegate","collator","usage","sensitivity","disabledBehavior","delegate","collectionProps","listProps"],"sources":["D:\\Like, for real projects\\React-Todo-List-V2\\node_modules\\@react-aria\\grid\\node_modules\\@react-aria\\selection\\dist\\packages\\@react-aria\\selection\\src\\useSelectableList.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaSelectableCollectionOptions, useSelectableCollection} from './useSelectableCollection';\nimport {Collection, DOMAttributes, Key, KeyboardDelegate, LayoutDelegate, Node} from '@react-types/shared';\nimport {ListKeyboardDelegate} from './ListKeyboardDelegate';\nimport {useCollator} from '@react-aria/i18n';\nimport {useMemo} from 'react';\n\nexport interface AriaSelectableListOptions extends Omit<AriaSelectableCollectionOptions, 'keyboardDelegate'> {\n  /**\n   * State of the collection.\n   */\n  collection: Collection<Node<unknown>>,\n  /**\n   * A delegate object that implements behavior for keyboard focus movement.\n   */\n  keyboardDelegate?: KeyboardDelegate,\n  /**\n   * A delegate object that provides layout information for items in the collection.\n   * By default this uses the DOM, but this can be overridden to implement things like\n   * virtualized scrolling.\n   */\n  layoutDelegate?: LayoutDelegate,\n  /**\n   * The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.\n   */\n  disabledKeys: Set<Key>\n}\n\nexport interface SelectableListAria {\n  /**\n   * Props for the option element.\n   */\n  listProps: DOMAttributes\n}\n\n/**\n * Handles interactions with a selectable list.\n */\nexport function useSelectableList(props: AriaSelectableListOptions): SelectableListAria {\n  let {\n    selectionManager,\n    collection,\n    disabledKeys,\n    ref,\n    keyboardDelegate,\n    layoutDelegate\n  } = props;\n\n  // By default, a KeyboardDelegate is provided which uses the DOM to query layout information (e.g. for page up/page down).\n  // When virtualized, the layout object will be passed in as a prop and override this.\n  let collator = useCollator({usage: 'search', sensitivity: 'base'});\n  let disabledBehavior = selectionManager.disabledBehavior;\n  let delegate = useMemo(() => (\n    keyboardDelegate || new ListKeyboardDelegate({\n      collection,\n      disabledKeys,\n      disabledBehavior,\n      ref,\n      collator,\n      layoutDelegate\n    })\n  ), [keyboardDelegate, layoutDelegate, collection, disabledKeys, ref, collator, disabledBehavior]);\n\n  let {collectionProps} = useSelectableCollection({\n    ...props,\n    ref,\n    selectionManager,\n    keyboardDelegate: delegate\n  });\n\n  return {\n    listProps: collectionProps\n  };\n}\n"]},"metadata":{},"sourceType":"module"}