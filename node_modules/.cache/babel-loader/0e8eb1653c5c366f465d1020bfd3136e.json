{"ast":null,"code":"import { useCollator as $325a3faab7a68acd$export$a16aca283550c30d } from \"./useCollator.mjs\";\nimport { useCallback as $21ck9$useCallback, useMemo as $21ck9$useMemo } from \"react\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $bb77f239b46e8c72$export$3274cf84b703fff(options) {\n  let collator = (0, $325a3faab7a68acd$export$a16aca283550c30d)({\n    usage: 'search',\n    ...options\n  });\n  // TODO(later): these methods don't currently support the ignorePunctuation option.\n  let startsWith = (0, $21ck9$useCallback)((string, substring) => {\n    if (substring.length === 0) return true;\n    // Normalize both strings so we can slice safely\n    // TODO: take into account the ignorePunctuation option as well...\n    string = string.normalize('NFC');\n    substring = substring.normalize('NFC');\n    return collator.compare(string.slice(0, substring.length), substring) === 0;\n  }, [collator]);\n  let endsWith = (0, $21ck9$useCallback)((string, substring) => {\n    if (substring.length === 0) return true;\n    string = string.normalize('NFC');\n    substring = substring.normalize('NFC');\n    return collator.compare(string.slice(-substring.length), substring) === 0;\n  }, [collator]);\n  let contains = (0, $21ck9$useCallback)((string, substring) => {\n    if (substring.length === 0) return true;\n    string = string.normalize('NFC');\n    substring = substring.normalize('NFC');\n    let scan = 0;\n    let sliceLen = substring.length;\n    for (; scan + sliceLen <= string.length; scan++) {\n      let slice = string.slice(scan, scan + sliceLen);\n      if (collator.compare(substring, slice) === 0) return true;\n    }\n    return false;\n  }, [collator]);\n  return (0, $21ck9$useMemo)(() => ({\n    startsWith: startsWith,\n    endsWith: endsWith,\n    contains: contains\n  }), [startsWith, endsWith, contains]);\n}\nexport { $bb77f239b46e8c72$export$3274cf84b703fff as useFilter };","map":{"version":3,"mappings":";;;AAAA;;;;;;;;;;;;AA4BO,SAASA,yCAAUC,OAA8B;EACtD,IAAIC,WAAW,6CAAU,EAAE;IACzBC,OAAO;IACP,GAAGF;EACL;EAEA;EACA,IAAIG,aAAa,sBAAU,EAAE,CAACC,QAAQC;IACpC,IAAIA,UAAUC,MAAM,KAAK,GACvB,OAAO;IAGT;IACA;IACAF,SAASA,OAAOG,SAAS,CAAC;IAC1BF,YAAYA,UAAUE,SAAS,CAAC;IAChC,OAAON,SAASO,OAAO,CAACJ,OAAOK,KAAK,CAAC,GAAGJ,UAAUC,MAAM,GAAGD,eAAe;EAC5E,GAAG,CAACJ,SAAS;EAEb,IAAIS,WAAW,sBAAU,EAAE,CAACN,QAAQC;IAClC,IAAIA,UAAUC,MAAM,KAAK,GACvB,OAAO;IAGTF,SAASA,OAAOG,SAAS,CAAC;IAC1BF,YAAYA,UAAUE,SAAS,CAAC;IAChC,OAAON,SAASO,OAAO,CAACJ,OAAOK,KAAK,CAAC,CAACJ,UAAUC,MAAM,GAAGD,eAAe;EAC1E,GAAG,CAACJ,SAAS;EAEb,IAAIU,WAAW,sBAAU,EAAE,CAACP,QAAQC;IAClC,IAAIA,UAAUC,MAAM,KAAK,GACvB,OAAO;IAGTF,SAASA,OAAOG,SAAS,CAAC;IAC1BF,YAAYA,UAAUE,SAAS,CAAC;IAEhC,IAAIK,OAAO;IACX,IAAIC,WAAWR,UAAUC,MAAM;IAC/B,OAAOM,OAAOC,YAAYT,OAAOE,MAAM,EAAEM,QAAQ;MAC/C,IAAIH,QAAQL,OAAOK,KAAK,CAACG,MAAMA,OAAOC;MACtC,IAAIZ,SAASO,OAAO,CAACH,WAAWI,WAAW,GACzC,OAAO;IAEX;IAEA,OAAO;EACT,GAAG,CAACR,SAAS;EAEb,OAAO,kBAAM,EAAE,OAAO;gBACpBE;cACAO;cACAC;EACF,IAAI,CAACR,YAAYO,UAAUC,SAAS;AACtC","names":["$bb77f239b46e8c72$export$3274cf84b703fff","options","collator","usage","startsWith","string","substring","length","normalize","compare","slice","endsWith","contains","scan","sliceLen"],"sources":["D:\\Like, for real projects\\React-Todo-List-V2\\node_modules\\@react-aria\\grid\\node_modules\\@react-aria\\i18n\\dist\\packages\\@react-aria\\i18n\\src\\useFilter.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {useCallback, useMemo} from 'react';\nimport {useCollator} from './useCollator';\n\nexport interface Filter {\n  /** Returns whether a string starts with a given substring. */\n  startsWith(string: string, substring: string): boolean,\n  /** Returns whether a string ends with a given substring. */\n  endsWith(string: string, substring: string): boolean,\n  /** Returns whether a string contains a given substring. */\n  contains(string: string, substring: string): boolean\n}\n\n/**\n * Provides localized string search functionality that is useful for filtering or matching items\n * in a list. Options can be provided to adjust the sensitivity to case, diacritics, and other parameters.\n */\nexport function useFilter(options?: Intl.CollatorOptions): Filter {\n  let collator = useCollator({\n    usage: 'search',\n    ...options\n  });\n\n  // TODO(later): these methods don't currently support the ignorePunctuation option.\n  let startsWith = useCallback((string, substring) => {\n    if (substring.length === 0) {\n      return true;\n    }\n\n    // Normalize both strings so we can slice safely\n    // TODO: take into account the ignorePunctuation option as well...\n    string = string.normalize('NFC');\n    substring = substring.normalize('NFC');\n    return collator.compare(string.slice(0, substring.length), substring) === 0;\n  }, [collator]);\n\n  let endsWith = useCallback((string, substring) => {\n    if (substring.length === 0) {\n      return true;\n    }\n\n    string = string.normalize('NFC');\n    substring = substring.normalize('NFC');\n    return collator.compare(string.slice(-substring.length), substring) === 0;\n  }, [collator]);\n\n  let contains = useCallback((string, substring) => {\n    if (substring.length === 0) {\n      return true;\n    }\n\n    string = string.normalize('NFC');\n    substring = substring.normalize('NFC');\n\n    let scan = 0;\n    let sliceLen = substring.length;\n    for (; scan + sliceLen <= string.length; scan++) {\n      let slice = string.slice(scan, scan + sliceLen);\n      if (collator.compare(substring, slice) === 0) {\n        return true;\n      }\n    }\n\n    return false;\n  }, [collator]);\n\n  return useMemo(() => ({\n    startsWith,\n    endsWith,\n    contains\n  }), [startsWith, endsWith, contains]);\n}\n"]},"metadata":{},"sourceType":"module"}