{"ast":null,"code":"import { focusSafely as $6a99195332edec8b$export$80f3e147d781571c } from \"./focusSafely.mjs\";\nimport { isElementVisible as $645f2e67b85a24c9$export$e989c0fffaa6b27a } from \"./isElementVisible.mjs\";\nimport { useLayoutEffect as $cgawC$useLayoutEffect, getOwnerDocument as $cgawC$getOwnerDocument } from \"@react-aria/utils\";\nimport $cgawC$react, { useRef as $cgawC$useRef, useContext as $cgawC$useContext, useMemo as $cgawC$useMemo, useEffect as $cgawC$useEffect } from \"react\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nconst $9bf71ea28793e738$var$FocusContext = /*#__PURE__*/(0, $cgawC$react).createContext(null);\nlet $9bf71ea28793e738$var$activeScope = null;\nfunction $9bf71ea28793e738$export$20e40289641fbbb6(props) {\n  let {\n    children: children,\n    contain: contain,\n    restoreFocus: restoreFocus,\n    autoFocus: autoFocus\n  } = props;\n  let startRef = (0, $cgawC$useRef)(null);\n  let endRef = (0, $cgawC$useRef)(null);\n  let scopeRef = (0, $cgawC$useRef)([]);\n  let {\n    parentNode: parentNode\n  } = (0, $cgawC$useContext)($9bf71ea28793e738$var$FocusContext) || {};\n  // Create a tree node here so we can add children to it even before it is added to the tree.\n  let node = (0, $cgawC$useMemo)(() => new $9bf71ea28793e738$var$TreeNode({\n    scopeRef: scopeRef\n  }), [scopeRef]);\n  (0, $cgawC$useLayoutEffect)(() => {\n    // If a new scope mounts outside the active scope, (e.g. DialogContainer launched from a menu),\n    // use the active scope as the parent instead of the parent from context. Layout effects run bottom\n    // up, so if the parent is not yet added to the tree, don't do this. Only the outer-most FocusScope\n    // that is being added should get the activeScope as its parent.\n    let parent = parentNode || $9bf71ea28793e738$export$d06fae2ee68b101e.root;\n    if ($9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(parent.scopeRef) && $9bf71ea28793e738$var$activeScope && !$9bf71ea28793e738$var$isAncestorScope($9bf71ea28793e738$var$activeScope, parent.scopeRef)) {\n      let activeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode($9bf71ea28793e738$var$activeScope);\n      if (activeNode) parent = activeNode;\n    }\n    // Add the node to the parent, and to the tree.\n    parent.addChild(node);\n    $9bf71ea28793e738$export$d06fae2ee68b101e.addNode(node);\n  }, [node, parentNode]);\n  (0, $cgawC$useLayoutEffect)(() => {\n    let node = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef);\n    if (node) node.contain = !!contain;\n  }, [contain]);\n  (0, $cgawC$useLayoutEffect)(() => {\n    var _startRef_current;\n    // Find all rendered nodes between the sentinels and add them to the scope.\n    let node = (_startRef_current = startRef.current) === null || _startRef_current === void 0 ? void 0 : _startRef_current.nextSibling;\n    let nodes = [];\n    while (node && node !== endRef.current) {\n      nodes.push(node);\n      node = node.nextSibling;\n    }\n    scopeRef.current = nodes;\n  }, [children]);\n  $9bf71ea28793e738$var$useActiveScopeTracker(scopeRef, restoreFocus, contain);\n  $9bf71ea28793e738$var$useFocusContainment(scopeRef, contain);\n  $9bf71ea28793e738$var$useRestoreFocus(scopeRef, restoreFocus, contain);\n  $9bf71ea28793e738$var$useAutoFocus(scopeRef, autoFocus);\n  // This needs to be an effect so that activeScope is updated after the FocusScope tree is complete.\n  // It cannot be a useLayoutEffect because the parent of this node hasn't been attached in the tree yet.\n  (0, $cgawC$useEffect)(() => {\n    const activeElement = (0, $cgawC$getOwnerDocument)(scopeRef.current ? scopeRef.current[0] : undefined).activeElement;\n    let scope = null;\n    if ($9bf71ea28793e738$var$isElementInScope(activeElement, scopeRef.current)) {\n      // We need to traverse the focusScope tree and find the bottom most scope that\n      // contains the active element and set that as the activeScope.\n      for (let node of $9bf71ea28793e738$export$d06fae2ee68b101e.traverse()) if (node.scopeRef && $9bf71ea28793e738$var$isElementInScope(activeElement, node.scopeRef.current)) scope = node;\n      if (scope === $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef)) $9bf71ea28793e738$var$activeScope = scope.scopeRef;\n    }\n  }, [scopeRef]);\n  // This layout effect cleanup is so that the tree node is removed synchronously with react before the RAF\n  // in useRestoreFocus cleanup runs.\n  (0, $cgawC$useLayoutEffect)(() => {\n    return () => {\n      var _focusScopeTree_getTreeNode_parent, _focusScopeTree_getTreeNode;\n      var _focusScopeTree_getTreeNode_parent_scopeRef;\n      // Scope may have been re-parented.\n      let parentScope = (_focusScopeTree_getTreeNode_parent_scopeRef = (_focusScopeTree_getTreeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef)) === null || _focusScopeTree_getTreeNode === void 0 ? void 0 : (_focusScopeTree_getTreeNode_parent = _focusScopeTree_getTreeNode.parent) === null || _focusScopeTree_getTreeNode_parent === void 0 ? void 0 : _focusScopeTree_getTreeNode_parent.scopeRef) !== null && _focusScopeTree_getTreeNode_parent_scopeRef !== void 0 ? _focusScopeTree_getTreeNode_parent_scopeRef : null;\n      if ((scopeRef === $9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope(scopeRef, $9bf71ea28793e738$var$activeScope)) && (!parentScope || $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(parentScope))) $9bf71ea28793e738$var$activeScope = parentScope;\n      $9bf71ea28793e738$export$d06fae2ee68b101e.removeTreeNode(scopeRef);\n    };\n  }, [scopeRef]);\n  let focusManager = (0, $cgawC$useMemo)(() => $9bf71ea28793e738$var$createFocusManagerForScope(scopeRef), []);\n  let value = (0, $cgawC$useMemo)(() => ({\n    focusManager: focusManager,\n    parentNode: node\n  }), [node, focusManager]);\n  return /*#__PURE__*/(0, $cgawC$react).createElement($9bf71ea28793e738$var$FocusContext.Provider, {\n    value: value\n  }, /*#__PURE__*/(0, $cgawC$react).createElement(\"span\", {\n    \"data-focus-scope-start\": true,\n    hidden: true,\n    ref: startRef\n  }), children, /*#__PURE__*/(0, $cgawC$react).createElement(\"span\", {\n    \"data-focus-scope-end\": true,\n    hidden: true,\n    ref: endRef\n  }));\n}\nfunction $9bf71ea28793e738$export$10c5169755ce7bd7() {\n  var _useContext;\n  return (_useContext = (0, $cgawC$useContext)($9bf71ea28793e738$var$FocusContext)) === null || _useContext === void 0 ? void 0 : _useContext.focusManager;\n}\nfunction $9bf71ea28793e738$var$createFocusManagerForScope(scopeRef) {\n  return {\n    focusNext() {\n      let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      let scope = scopeRef.current;\n      let {\n        from: from,\n        tabbable: tabbable,\n        wrap: wrap,\n        accept: accept\n      } = opts;\n      let node = from || (0, $cgawC$getOwnerDocument)(scope[0]).activeElement;\n      let sentinel = scope[0].previousElementSibling;\n      let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {\n        tabbable: tabbable,\n        accept: accept\n      }, scope);\n      walker.currentNode = $9bf71ea28793e738$var$isElementInScope(node, scope) ? node : sentinel;\n      let nextNode = walker.nextNode();\n      if (!nextNode && wrap) {\n        walker.currentNode = sentinel;\n        nextNode = walker.nextNode();\n      }\n      if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);\n      return nextNode;\n    },\n    focusPrevious() {\n      let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      let scope = scopeRef.current;\n      let {\n        from: from,\n        tabbable: tabbable,\n        wrap: wrap,\n        accept: accept\n      } = opts;\n      let node = from || (0, $cgawC$getOwnerDocument)(scope[0]).activeElement;\n      let sentinel = scope[scope.length - 1].nextElementSibling;\n      let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {\n        tabbable: tabbable,\n        accept: accept\n      }, scope);\n      walker.currentNode = $9bf71ea28793e738$var$isElementInScope(node, scope) ? node : sentinel;\n      let previousNode = walker.previousNode();\n      if (!previousNode && wrap) {\n        walker.currentNode = sentinel;\n        previousNode = walker.previousNode();\n      }\n      if (previousNode) $9bf71ea28793e738$var$focusElement(previousNode, true);\n      return previousNode;\n    },\n    focusFirst() {\n      let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      let scope = scopeRef.current;\n      let {\n        tabbable: tabbable,\n        accept: accept\n      } = opts;\n      let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {\n        tabbable: tabbable,\n        accept: accept\n      }, scope);\n      walker.currentNode = scope[0].previousElementSibling;\n      let nextNode = walker.nextNode();\n      if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);\n      return nextNode;\n    },\n    focusLast() {\n      let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      let scope = scopeRef.current;\n      let {\n        tabbable: tabbable,\n        accept: accept\n      } = opts;\n      let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {\n        tabbable: tabbable,\n        accept: accept\n      }, scope);\n      walker.currentNode = scope[scope.length - 1].nextElementSibling;\n      let previousNode = walker.previousNode();\n      if (previousNode) $9bf71ea28793e738$var$focusElement(previousNode, true);\n      return previousNode;\n    }\n  };\n}\nconst $9bf71ea28793e738$var$focusableElements = ['input:not([disabled]):not([type=hidden])', 'select:not([disabled])', 'textarea:not([disabled])', 'button:not([disabled])', 'a[href]', 'area[href]', 'summary', 'iframe', 'object', 'embed', 'audio[controls]', 'video[controls]', '[contenteditable]'];\nconst $9bf71ea28793e738$var$FOCUSABLE_ELEMENT_SELECTOR = $9bf71ea28793e738$var$focusableElements.join(':not([hidden]),') + ',[tabindex]:not([disabled]):not([hidden])';\n$9bf71ea28793e738$var$focusableElements.push('[tabindex]:not([tabindex=\"-1\"]):not([disabled])');\nconst $9bf71ea28793e738$var$TABBABLE_ELEMENT_SELECTOR = $9bf71ea28793e738$var$focusableElements.join(':not([hidden]):not([tabindex=\"-1\"]),');\nfunction $9bf71ea28793e738$export$4c063cf1350e6fed(element) {\n  return element.matches($9bf71ea28793e738$var$FOCUSABLE_ELEMENT_SELECTOR);\n}\nfunction $9bf71ea28793e738$var$getScopeRoot(scope) {\n  return scope[0].parentElement;\n}\nfunction $9bf71ea28793e738$var$shouldContainFocus(scopeRef) {\n  let scope = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode($9bf71ea28793e738$var$activeScope);\n  while (scope && scope.scopeRef !== scopeRef) {\n    if (scope.contain) return false;\n    scope = scope.parent;\n  }\n  return true;\n}\nfunction $9bf71ea28793e738$var$useFocusContainment(scopeRef, contain) {\n  let focusedNode = (0, $cgawC$useRef)();\n  let raf = (0, $cgawC$useRef)();\n  (0, $cgawC$useLayoutEffect)(() => {\n    let scope = scopeRef.current;\n    if (!contain) {\n      // if contain was changed, then we should cancel any ongoing waits to pull focus back into containment\n      if (raf.current) {\n        cancelAnimationFrame(raf.current);\n        raf.current = undefined;\n      }\n      return;\n    }\n    const ownerDocument = (0, $cgawC$getOwnerDocument)(scope ? scope[0] : undefined);\n    // Handle the Tab key to contain focus within the scope\n    let onKeyDown = e => {\n      if (e.key !== 'Tab' || e.altKey || e.ctrlKey || e.metaKey || !$9bf71ea28793e738$var$shouldContainFocus(scopeRef) || e.isComposing) return;\n      let focusedElement = ownerDocument.activeElement;\n      let scope = scopeRef.current;\n      if (!scope || !$9bf71ea28793e738$var$isElementInScope(focusedElement, scope)) return;\n      let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {\n        tabbable: true\n      }, scope);\n      if (!focusedElement) return;\n      walker.currentNode = focusedElement;\n      let nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();\n      if (!nextElement) {\n        walker.currentNode = e.shiftKey ? scope[scope.length - 1].nextElementSibling : scope[0].previousElementSibling;\n        nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();\n      }\n      e.preventDefault();\n      if (nextElement) $9bf71ea28793e738$var$focusElement(nextElement, true);\n    };\n    let onFocus = e => {\n      // If focusing an element in a child scope of the currently active scope, the child becomes active.\n      // Moving out of the active scope to an ancestor is not allowed.\n      if ((!$9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope($9bf71ea28793e738$var$activeScope, scopeRef)) && $9bf71ea28793e738$var$isElementInScope(e.target, scopeRef.current)) {\n        $9bf71ea28793e738$var$activeScope = scopeRef;\n        focusedNode.current = e.target;\n      } else if ($9bf71ea28793e738$var$shouldContainFocus(scopeRef) && !$9bf71ea28793e738$var$isElementInChildScope(e.target, scopeRef)) {\n        // If a focus event occurs outside the active scope (e.g. user tabs from browser location bar),\n        // restore focus to the previously focused node or the first tabbable element in the active scope.\n        if (focusedNode.current) focusedNode.current.focus();else if ($9bf71ea28793e738$var$activeScope && $9bf71ea28793e738$var$activeScope.current) $9bf71ea28793e738$var$focusFirstInScope($9bf71ea28793e738$var$activeScope.current);\n      } else if ($9bf71ea28793e738$var$shouldContainFocus(scopeRef)) focusedNode.current = e.target;\n    };\n    let onBlur = e => {\n      // Firefox doesn't shift focus back to the Dialog properly without this\n      if (raf.current) cancelAnimationFrame(raf.current);\n      raf.current = requestAnimationFrame(() => {\n        // Use document.activeElement instead of e.relatedTarget so we can tell if user clicked into iframe\n        if (ownerDocument.activeElement && $9bf71ea28793e738$var$shouldContainFocus(scopeRef) && !$9bf71ea28793e738$var$isElementInChildScope(ownerDocument.activeElement, scopeRef)) {\n          $9bf71ea28793e738$var$activeScope = scopeRef;\n          if (ownerDocument.body.contains(e.target)) {\n            var _focusedNode_current;\n            focusedNode.current = e.target;\n            (_focusedNode_current = focusedNode.current) === null || _focusedNode_current === void 0 ? void 0 : _focusedNode_current.focus();\n          } else if ($9bf71ea28793e738$var$activeScope.current) $9bf71ea28793e738$var$focusFirstInScope($9bf71ea28793e738$var$activeScope.current);\n        }\n      });\n    };\n    ownerDocument.addEventListener('keydown', onKeyDown, false);\n    ownerDocument.addEventListener('focusin', onFocus, false);\n    scope === null || scope === void 0 ? void 0 : scope.forEach(element => element.addEventListener('focusin', onFocus, false));\n    scope === null || scope === void 0 ? void 0 : scope.forEach(element => element.addEventListener('focusout', onBlur, false));\n    return () => {\n      ownerDocument.removeEventListener('keydown', onKeyDown, false);\n      ownerDocument.removeEventListener('focusin', onFocus, false);\n      scope === null || scope === void 0 ? void 0 : scope.forEach(element => element.removeEventListener('focusin', onFocus, false));\n      scope === null || scope === void 0 ? void 0 : scope.forEach(element => element.removeEventListener('focusout', onBlur, false));\n    };\n  }, [scopeRef, contain]);\n  // This is a useLayoutEffect so it is guaranteed to run before our async synthetic blur\n  // eslint-disable-next-line arrow-body-style\n  (0, $cgawC$useLayoutEffect)(() => {\n    return () => {\n      if (raf.current) cancelAnimationFrame(raf.current);\n    };\n  }, [raf]);\n}\nfunction $9bf71ea28793e738$var$isElementInAnyScope(element) {\n  return $9bf71ea28793e738$var$isElementInChildScope(element);\n}\nfunction $9bf71ea28793e738$var$isElementInScope(element, scope) {\n  if (!element) return false;\n  if (!scope) return false;\n  return scope.some(node => node.contains(element));\n}\nfunction $9bf71ea28793e738$var$isElementInChildScope(element) {\n  let scope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  // If the element is within a top layer element (e.g. toasts), always allow moving focus there.\n  if (element instanceof Element && element.closest('[data-react-aria-top-layer]')) return true;\n  // node.contains in isElementInScope covers child scopes that are also DOM children,\n  // but does not cover child scopes in portals.\n  for (let {\n    scopeRef: s\n  } of $9bf71ea28793e738$export$d06fae2ee68b101e.traverse($9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scope))) {\n    if (s && $9bf71ea28793e738$var$isElementInScope(element, s.current)) return true;\n  }\n  return false;\n}\nfunction $9bf71ea28793e738$export$1258395f99bf9cbf(element) {\n  return $9bf71ea28793e738$var$isElementInChildScope(element, $9bf71ea28793e738$var$activeScope);\n}\nfunction $9bf71ea28793e738$var$isAncestorScope(ancestor, scope) {\n  var _focusScopeTree_getTreeNode;\n  let parent = (_focusScopeTree_getTreeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scope)) === null || _focusScopeTree_getTreeNode === void 0 ? void 0 : _focusScopeTree_getTreeNode.parent;\n  while (parent) {\n    if (parent.scopeRef === ancestor) return true;\n    parent = parent.parent;\n  }\n  return false;\n}\nfunction $9bf71ea28793e738$var$focusElement(element) {\n  let scroll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  if (element != null && !scroll) try {\n    (0, $6a99195332edec8b$export$80f3e147d781571c)(element);\n  } catch (err) {\n    // ignore\n  } else if (element != null) try {\n    element.focus();\n  } catch (err) {\n    // ignore\n  }\n}\nfunction $9bf71ea28793e738$var$focusFirstInScope(scope) {\n  let tabbable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  let sentinel = scope[0].previousElementSibling;\n  let scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);\n  let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {\n    tabbable: tabbable\n  }, scope);\n  walker.currentNode = sentinel;\n  let nextNode = walker.nextNode();\n  // If the scope does not contain a tabbable element, use the first focusable element.\n  if (tabbable && !nextNode) {\n    scopeRoot = $9bf71ea28793e738$var$getScopeRoot(scope);\n    walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(scopeRoot, {\n      tabbable: false\n    }, scope);\n    walker.currentNode = sentinel;\n    nextNode = walker.nextNode();\n  }\n  $9bf71ea28793e738$var$focusElement(nextNode);\n}\nfunction $9bf71ea28793e738$var$useAutoFocus(scopeRef, autoFocus) {\n  const autoFocusRef = (0, $cgawC$react).useRef(autoFocus);\n  (0, $cgawC$useEffect)(() => {\n    if (autoFocusRef.current) {\n      $9bf71ea28793e738$var$activeScope = scopeRef;\n      const ownerDocument = (0, $cgawC$getOwnerDocument)(scopeRef.current ? scopeRef.current[0] : undefined);\n      if (!$9bf71ea28793e738$var$isElementInScope(ownerDocument.activeElement, $9bf71ea28793e738$var$activeScope.current) && scopeRef.current) $9bf71ea28793e738$var$focusFirstInScope(scopeRef.current);\n    }\n    autoFocusRef.current = false;\n  }, [scopeRef]);\n}\nfunction $9bf71ea28793e738$var$useActiveScopeTracker(scopeRef, restore, contain) {\n  // tracks the active scope, in case restore and contain are both false.\n  // if either are true, this is tracked in useRestoreFocus or useFocusContainment.\n  (0, $cgawC$useLayoutEffect)(() => {\n    if (restore || contain) return;\n    let scope = scopeRef.current;\n    const ownerDocument = (0, $cgawC$getOwnerDocument)(scope ? scope[0] : undefined);\n    let onFocus = e => {\n      let target = e.target;\n      if ($9bf71ea28793e738$var$isElementInScope(target, scopeRef.current)) $9bf71ea28793e738$var$activeScope = scopeRef;else if (!$9bf71ea28793e738$var$isElementInAnyScope(target)) $9bf71ea28793e738$var$activeScope = null;\n    };\n    ownerDocument.addEventListener('focusin', onFocus, false);\n    scope === null || scope === void 0 ? void 0 : scope.forEach(element => element.addEventListener('focusin', onFocus, false));\n    return () => {\n      ownerDocument.removeEventListener('focusin', onFocus, false);\n      scope === null || scope === void 0 ? void 0 : scope.forEach(element => element.removeEventListener('focusin', onFocus, false));\n    };\n  }, [scopeRef, restore, contain]);\n}\nfunction $9bf71ea28793e738$var$shouldRestoreFocus(scopeRef) {\n  let scope = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode($9bf71ea28793e738$var$activeScope);\n  while (scope && scope.scopeRef !== scopeRef) {\n    if (scope.nodeToRestore) return false;\n    scope = scope.parent;\n  }\n  return (scope === null || scope === void 0 ? void 0 : scope.scopeRef) === scopeRef;\n}\nfunction $9bf71ea28793e738$var$useRestoreFocus(scopeRef, restoreFocus, contain) {\n  // create a ref during render instead of useLayoutEffect so the active element is saved before a child with autoFocus=true mounts.\n  // eslint-disable-next-line no-restricted-globals\n  const nodeToRestoreRef = (0, $cgawC$useRef)(typeof document !== 'undefined' ? (0, $cgawC$getOwnerDocument)(scopeRef.current ? scopeRef.current[0] : undefined).activeElement : null);\n  // restoring scopes should all track if they are active regardless of contain, but contain already tracks it plus logic to contain the focus\n  // restoring-non-containing scopes should only care if they become active so they can perform the restore\n  (0, $cgawC$useLayoutEffect)(() => {\n    let scope = scopeRef.current;\n    const ownerDocument = (0, $cgawC$getOwnerDocument)(scope ? scope[0] : undefined);\n    if (!restoreFocus || contain) return;\n    let onFocus = () => {\n      // If focusing an element in a child scope of the currently active scope, the child becomes active.\n      // Moving out of the active scope to an ancestor is not allowed.\n      if ((!$9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope($9bf71ea28793e738$var$activeScope, scopeRef)) && $9bf71ea28793e738$var$isElementInScope(ownerDocument.activeElement, scopeRef.current)) $9bf71ea28793e738$var$activeScope = scopeRef;\n    };\n    ownerDocument.addEventListener('focusin', onFocus, false);\n    scope === null || scope === void 0 ? void 0 : scope.forEach(element => element.addEventListener('focusin', onFocus, false));\n    return () => {\n      ownerDocument.removeEventListener('focusin', onFocus, false);\n      scope === null || scope === void 0 ? void 0 : scope.forEach(element => element.removeEventListener('focusin', onFocus, false));\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [scopeRef, contain]);\n  (0, $cgawC$useLayoutEffect)(() => {\n    const ownerDocument = (0, $cgawC$getOwnerDocument)(scopeRef.current ? scopeRef.current[0] : undefined);\n    if (!restoreFocus) return;\n    // Handle the Tab key so that tabbing out of the scope goes to the next element\n    // after the node that had focus when the scope mounted. This is important when\n    // using portals for overlays, so that focus goes to the expected element when\n    // tabbing out of the overlay.\n    let onKeyDown = e => {\n      if (e.key !== 'Tab' || e.altKey || e.ctrlKey || e.metaKey || !$9bf71ea28793e738$var$shouldContainFocus(scopeRef) || e.isComposing) return;\n      let focusedElement = ownerDocument.activeElement;\n      if (!$9bf71ea28793e738$var$isElementInScope(focusedElement, scopeRef.current)) return;\n      let treeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef);\n      if (!treeNode) return;\n      let nodeToRestore = treeNode.nodeToRestore;\n      // Create a DOM tree walker that matches all tabbable elements\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(ownerDocument.body, {\n        tabbable: true\n      });\n      // Find the next tabbable element after the currently focused element\n      walker.currentNode = focusedElement;\n      let nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode();\n      if (!nodeToRestore || !ownerDocument.body.contains(nodeToRestore) || nodeToRestore === ownerDocument.body) {\n        nodeToRestore = undefined;\n        treeNode.nodeToRestore = undefined;\n      }\n      // If there is no next element, or it is outside the current scope, move focus to the\n      // next element after the node to restore to instead.\n      if ((!nextElement || !$9bf71ea28793e738$var$isElementInScope(nextElement, scopeRef.current)) && nodeToRestore) {\n        walker.currentNode = nodeToRestore;\n        // Skip over elements within the scope, in case the scope immediately follows the node to restore.\n        do nextElement = e.shiftKey ? walker.previousNode() : walker.nextNode(); while ($9bf71ea28793e738$var$isElementInScope(nextElement, scopeRef.current));\n        e.preventDefault();\n        e.stopPropagation();\n        if (nextElement) $9bf71ea28793e738$var$focusElement(nextElement, true);else\n          // If there is no next element and the nodeToRestore isn't within a FocusScope (i.e. we are leaving the top level focus scope)\n          // then move focus to the body.\n          // Otherwise restore focus to the nodeToRestore (e.g menu within a popover -> tabbing to close the menu should move focus to menu trigger)\n          if (!$9bf71ea28793e738$var$isElementInAnyScope(nodeToRestore)) focusedElement.blur();else $9bf71ea28793e738$var$focusElement(nodeToRestore, true);\n      }\n    };\n    if (!contain) ownerDocument.addEventListener('keydown', onKeyDown, true);\n    return () => {\n      if (!contain) ownerDocument.removeEventListener('keydown', onKeyDown, true);\n    };\n  }, [scopeRef, restoreFocus, contain]);\n  // useLayoutEffect instead of useEffect so the active element is saved synchronously instead of asynchronously.\n  (0, $cgawC$useLayoutEffect)(() => {\n    const ownerDocument = (0, $cgawC$getOwnerDocument)(scopeRef.current ? scopeRef.current[0] : undefined);\n    if (!restoreFocus) return;\n    let treeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef);\n    if (!treeNode) return;\n    var _nodeToRestoreRef_current;\n    treeNode.nodeToRestore = (_nodeToRestoreRef_current = nodeToRestoreRef.current) !== null && _nodeToRestoreRef_current !== void 0 ? _nodeToRestoreRef_current : undefined;\n    return () => {\n      let treeNode = $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(scopeRef);\n      if (!treeNode) return;\n      let nodeToRestore = treeNode.nodeToRestore;\n      // if we already lost focus to the body and this was the active scope, then we should attempt to restore\n      if (restoreFocus && nodeToRestore && (\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      $9bf71ea28793e738$var$isElementInScope(ownerDocument.activeElement, scopeRef.current) || ownerDocument.activeElement === ownerDocument.body && $9bf71ea28793e738$var$shouldRestoreFocus(scopeRef))) {\n        // freeze the focusScopeTree so it persists after the raf, otherwise during unmount nodes are removed from it\n        let clonedTree = $9bf71ea28793e738$export$d06fae2ee68b101e.clone();\n        requestAnimationFrame(() => {\n          // Only restore focus if we've lost focus to the body, the alternative is that focus has been purposefully moved elsewhere\n          if (ownerDocument.activeElement === ownerDocument.body) {\n            // look up the tree starting with our scope to find a nodeToRestore still in the DOM\n            let treeNode = clonedTree.getTreeNode(scopeRef);\n            while (treeNode) {\n              if (treeNode.nodeToRestore && treeNode.nodeToRestore.isConnected) {\n                $9bf71ea28793e738$var$focusElement(treeNode.nodeToRestore);\n                return;\n              }\n              treeNode = treeNode.parent;\n            }\n            // If no nodeToRestore was found, focus the first element in the nearest\n            // ancestor scope that is still in the tree.\n            treeNode = clonedTree.getTreeNode(scopeRef);\n            while (treeNode) {\n              if (treeNode.scopeRef && treeNode.scopeRef.current && $9bf71ea28793e738$export$d06fae2ee68b101e.getTreeNode(treeNode.scopeRef)) {\n                $9bf71ea28793e738$var$focusFirstInScope(treeNode.scopeRef.current, true);\n                return;\n              }\n              treeNode = treeNode.parent;\n            }\n          }\n        });\n      }\n    };\n  }, [scopeRef, restoreFocus]);\n}\nfunction $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, opts, scope) {\n  let selector = (opts === null || opts === void 0 ? void 0 : opts.tabbable) ? $9bf71ea28793e738$var$TABBABLE_ELEMENT_SELECTOR : $9bf71ea28793e738$var$FOCUSABLE_ELEMENT_SELECTOR;\n  let walker = (0, $cgawC$getOwnerDocument)(root).createTreeWalker(root, NodeFilter.SHOW_ELEMENT, {\n    acceptNode(node) {\n      var _opts_from;\n      // Skip nodes inside the starting node.\n      if (opts === null || opts === void 0 ? void 0 : (_opts_from = opts.from) === null || _opts_from === void 0 ? void 0 : _opts_from.contains(node)) return NodeFilter.FILTER_REJECT;\n      if (node.matches(selector) && (0, $645f2e67b85a24c9$export$e989c0fffaa6b27a)(node) && (!scope || $9bf71ea28793e738$var$isElementInScope(node, scope)) && (!(opts === null || opts === void 0 ? void 0 : opts.accept) || opts.accept(node))) return NodeFilter.FILTER_ACCEPT;\n      return NodeFilter.FILTER_SKIP;\n    }\n  });\n  if (opts === null || opts === void 0 ? void 0 : opts.from) walker.currentNode = opts.from;\n  return walker;\n}\nfunction $9bf71ea28793e738$export$c5251b9e124bf29(ref) {\n  let defaultOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return {\n    focusNext() {\n      let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      let root = ref.current;\n      if (!root) return null;\n      let {\n        from: from,\n        tabbable = defaultOptions.tabbable,\n        wrap = defaultOptions.wrap,\n        accept = defaultOptions.accept\n      } = opts;\n      let node = from || (0, $cgawC$getOwnerDocument)(root).activeElement;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {\n        tabbable: tabbable,\n        accept: accept\n      });\n      if (root.contains(node)) walker.currentNode = node;\n      let nextNode = walker.nextNode();\n      if (!nextNode && wrap) {\n        walker.currentNode = root;\n        nextNode = walker.nextNode();\n      }\n      if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);\n      return nextNode;\n    },\n    focusPrevious() {\n      let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultOptions;\n      let root = ref.current;\n      if (!root) return null;\n      let {\n        from: from,\n        tabbable = defaultOptions.tabbable,\n        wrap = defaultOptions.wrap,\n        accept = defaultOptions.accept\n      } = opts;\n      let node = from || (0, $cgawC$getOwnerDocument)(root).activeElement;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {\n        tabbable: tabbable,\n        accept: accept\n      });\n      if (root.contains(node)) walker.currentNode = node;else {\n        let next = $9bf71ea28793e738$var$last(walker);\n        if (next) $9bf71ea28793e738$var$focusElement(next, true);\n        return next !== null && next !== void 0 ? next : null;\n      }\n      let previousNode = walker.previousNode();\n      if (!previousNode && wrap) {\n        walker.currentNode = root;\n        let lastNode = $9bf71ea28793e738$var$last(walker);\n        if (!lastNode)\n          // couldn't wrap\n          return null;\n        previousNode = lastNode;\n      }\n      if (previousNode) $9bf71ea28793e738$var$focusElement(previousNode, true);\n      return previousNode !== null && previousNode !== void 0 ? previousNode : null;\n    },\n    focusFirst() {\n      let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultOptions;\n      let root = ref.current;\n      if (!root) return null;\n      let {\n        tabbable = defaultOptions.tabbable,\n        accept = defaultOptions.accept\n      } = opts;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {\n        tabbable: tabbable,\n        accept: accept\n      });\n      let nextNode = walker.nextNode();\n      if (nextNode) $9bf71ea28793e738$var$focusElement(nextNode, true);\n      return nextNode;\n    },\n    focusLast() {\n      let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultOptions;\n      let root = ref.current;\n      if (!root) return null;\n      let {\n        tabbable = defaultOptions.tabbable,\n        accept = defaultOptions.accept\n      } = opts;\n      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {\n        tabbable: tabbable,\n        accept: accept\n      });\n      let next = $9bf71ea28793e738$var$last(walker);\n      if (next) $9bf71ea28793e738$var$focusElement(next, true);\n      return next !== null && next !== void 0 ? next : null;\n    }\n  };\n}\nfunction $9bf71ea28793e738$var$last(walker) {\n  let next = undefined;\n  let last;\n  do {\n    last = walker.lastChild();\n    if (last) next = last;\n  } while (last);\n  return next;\n}\nclass $9bf71ea28793e738$var$Tree {\n  get size() {\n    return this.fastMap.size;\n  }\n  getTreeNode(data) {\n    return this.fastMap.get(data);\n  }\n  addTreeNode(scopeRef, parent, nodeToRestore) {\n    let parentNode = this.fastMap.get(parent !== null && parent !== void 0 ? parent : null);\n    if (!parentNode) return;\n    let node = new $9bf71ea28793e738$var$TreeNode({\n      scopeRef: scopeRef\n    });\n    parentNode.addChild(node);\n    node.parent = parentNode;\n    this.fastMap.set(scopeRef, node);\n    if (nodeToRestore) node.nodeToRestore = nodeToRestore;\n  }\n  addNode(node) {\n    this.fastMap.set(node.scopeRef, node);\n  }\n  removeTreeNode(scopeRef) {\n    // never remove the root\n    if (scopeRef === null) return;\n    let node = this.fastMap.get(scopeRef);\n    if (!node) return;\n    let parentNode = node.parent;\n    // when we remove a scope, check if any sibling scopes are trying to restore focus to something inside the scope we're removing\n    // if we are, then replace the siblings restore with the restore from the scope we're removing\n    for (let current of this.traverse()) if (current !== node && node.nodeToRestore && current.nodeToRestore && node.scopeRef && node.scopeRef.current && $9bf71ea28793e738$var$isElementInScope(current.nodeToRestore, node.scopeRef.current)) current.nodeToRestore = node.nodeToRestore;\n    let children = node.children;\n    if (parentNode) {\n      parentNode.removeChild(node);\n      if (children.size > 0) children.forEach(child => parentNode && parentNode.addChild(child));\n    }\n    this.fastMap.delete(node.scopeRef);\n  }\n  // Pre Order Depth First\n  *traverse() {\n    let node = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.root;\n    if (node.scopeRef != null) yield node;\n    if (node.children.size > 0) for (let child of node.children) yield* this.traverse(child);\n  }\n  clone() {\n    var _node_parent;\n    let newTree = new $9bf71ea28793e738$var$Tree();\n    var _node_parent_scopeRef;\n    for (let node of this.traverse()) newTree.addTreeNode(node.scopeRef, (_node_parent_scopeRef = (_node_parent = node.parent) === null || _node_parent === void 0 ? void 0 : _node_parent.scopeRef) !== null && _node_parent_scopeRef !== void 0 ? _node_parent_scopeRef : null, node.nodeToRestore);\n    return newTree;\n  }\n  constructor() {\n    this.fastMap = new Map();\n    this.root = new $9bf71ea28793e738$var$TreeNode({\n      scopeRef: null\n    });\n    this.fastMap.set(null, this.root);\n  }\n}\nclass $9bf71ea28793e738$var$TreeNode {\n  addChild(node) {\n    this.children.add(node);\n    node.parent = this;\n  }\n  removeChild(node) {\n    this.children.delete(node);\n    node.parent = undefined;\n  }\n  constructor(props) {\n    this.children = new Set();\n    this.contain = false;\n    this.scopeRef = props.scopeRef;\n  }\n}\nlet $9bf71ea28793e738$export$d06fae2ee68b101e = new $9bf71ea28793e738$var$Tree();\nexport { $9bf71ea28793e738$export$20e40289641fbbb6 as FocusScope, $9bf71ea28793e738$export$d06fae2ee68b101e as focusScopeTree, $9bf71ea28793e738$export$10c5169755ce7bd7 as useFocusManager, $9bf71ea28793e738$export$2d6ec8fc375ceafa as getFocusableTreeWalker, $9bf71ea28793e738$export$4c063cf1350e6fed as isFocusable, $9bf71ea28793e738$export$1258395f99bf9cbf as isElementInChildOfActiveScope, $9bf71ea28793e738$export$c5251b9e124bf29 as createFocusManager };","map":{"version":3,"mappings":"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","names":["$9bf71ea28793e738$var$FocusContext","createContext","$9bf71ea28793e738$var$activeScope","$9bf71ea28793e738$export$20e40289641fbbb6","props","children","contain","restoreFocus","autoFocus","startRef","endRef","scopeRef","parentNode","node","$9bf71ea28793e738$var$TreeNode","parent","$9bf71ea28793e738$export$d06fae2ee68b101e","root","getTreeNode","$9bf71ea28793e738$var$isAncestorScope","activeNode","addChild","addNode","_startRef_current","current","nextSibling","nodes","push","$9bf71ea28793e738$var$useActiveScopeTracker","$9bf71ea28793e738$var$useFocusContainment","$9bf71ea28793e738$var$useRestoreFocus","$9bf71ea28793e738$var$useAutoFocus","activeElement","undefined","scope","$9bf71ea28793e738$var$isElementInScope","traverse","_focusScopeTree_getTreeNode_parent","_focusScopeTree_getTreeNode_parent_scopeRef","parentScope","_focusScopeTree_getTreeNode","removeTreeNode","focusManager","$9bf71ea28793e738$var$createFocusManagerForScope","value","Provider","hidden","ref","$9bf71ea28793e738$export$10c5169755ce7bd7","_useContext","focusNext","opts","from","tabbable","wrap","accept","sentinel","previousElementSibling","scopeRoot","$9bf71ea28793e738$var$getScopeRoot","walker","$9bf71ea28793e738$export$2d6ec8fc375ceafa","currentNode","nextNode","$9bf71ea28793e738$var$focusElement","focusPrevious","length","nextElementSibling","previousNode","focusFirst","focusLast","$9bf71ea28793e738$var$focusableElements","$9bf71ea28793e738$var$FOCUSABLE_ELEMENT_SELECTOR","join","$9bf71ea28793e738$var$TABBABLE_ELEMENT_SELECTOR","$9bf71ea28793e738$export$4c063cf1350e6fed","element","matches","parentElement","$9bf71ea28793e738$var$shouldContainFocus","focusedNode","raf","cancelAnimationFrame","ownerDocument","onKeyDown","e","key","altKey","ctrlKey","metaKey","isComposing","focusedElement","nextElement","shiftKey","preventDefault","onFocus","target","$9bf71ea28793e738$var$isElementInChildScope","focus","$9bf71ea28793e738$var$focusFirstInScope","onBlur","requestAnimationFrame","body","contains","_focusedNode_current","addEventListener","forEach","removeEventListener","$9bf71ea28793e738$var$isElementInAnyScope","some","Element","closest","s","$9bf71ea28793e738$export$1258395f99bf9cbf","ancestor","scroll","err","autoFocusRef","useRef","restore","$9bf71ea28793e738$var$shouldRestoreFocus","nodeToRestore","nodeToRestoreRef","document","treeNode","stopPropagation","blur","_nodeToRestoreRef_current","clonedTree","clone","isConnected","selector","createTreeWalker","NodeFilter","SHOW_ELEMENT","acceptNode","_opts_from","FILTER_REJECT","FILTER_ACCEPT","FILTER_SKIP","$9bf71ea28793e738$export$c5251b9e124bf29","defaultOptions","next","$9bf71ea28793e738$var$last","lastNode","last","lastChild","$9bf71ea28793e738$var$Tree","size","fastMap","data","get","addTreeNode","set","removeChild","child","delete","_node_parent","newTree","_node_parent_scopeRef","constructor","Map","add","Set"],"sources":["D:\\Like, for real projects\\React-Todo-List-V2\\node_modules\\@react-aria\\focus\\dist\\packages\\@react-aria\\focus\\src\\FocusScope.tsx"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FocusableElement} from '@react-types/shared';\nimport {focusSafely} from './focusSafely';\nimport {getOwnerDocument, useLayoutEffect} from '@react-aria/utils';\nimport {isElementVisible} from './isElementVisible';\nimport React, {ReactNode, RefObject, useContext, useEffect, useMemo, useRef} from 'react';\n\nexport interface FocusScopeProps {\n  /** The contents of the focus scope. */\n  children: ReactNode,\n\n  /**\n   * Whether to contain focus inside the scope, so users cannot\n   * move focus outside, for example in a modal dialog.\n   */\n  contain?: boolean,\n\n  /**\n   * Whether to restore focus back to the element that was focused\n   * when the focus scope mounted, after the focus scope unmounts.\n   */\n  restoreFocus?: boolean,\n\n  /** Whether to auto focus the first focusable element in the focus scope on mount. */\n  autoFocus?: boolean\n}\n\nexport interface FocusManagerOptions {\n  /** The element to start searching from. The currently focused element by default. */\n  from?: Element,\n  /** Whether to only include tabbable elements, or all focusable elements. */\n  tabbable?: boolean,\n  /** Whether focus should wrap around when it reaches the end of the scope. */\n  wrap?: boolean,\n  /** A callback that determines whether the given element is focused. */\n  accept?: (node: Element) => boolean\n}\n\nexport interface FocusManager {\n  /** Moves focus to the next focusable or tabbable element in the focus scope. */\n  focusNext(opts?: FocusManagerOptions): FocusableElement | null,\n  /** Moves focus to the previous focusable or tabbable element in the focus scope. */\n  focusPrevious(opts?: FocusManagerOptions): FocusableElement | null,\n  /** Moves focus to the first focusable or tabbable element in the focus scope. */\n  focusFirst(opts?: FocusManagerOptions): FocusableElement | null,\n    /** Moves focus to the last focusable or tabbable element in the focus scope. */\n  focusLast(opts?: FocusManagerOptions): FocusableElement | null\n}\n\ntype ScopeRef = RefObject<Element[]> | null;\ninterface IFocusContext {\n  focusManager: FocusManager,\n  parentNode: TreeNode | null\n}\n\nconst FocusContext = React.createContext<IFocusContext | null>(null);\n\nlet activeScope: ScopeRef = null;\n\n// This is a hacky DOM-based implementation of a FocusScope until this RFC lands in React:\n// https://github.com/reactjs/rfcs/pull/109\n\n/**\n * A FocusScope manages focus for its descendants. It supports containing focus inside\n * the scope, restoring focus to the previously focused element on unmount, and auto\n * focusing children on mount. It also acts as a container for a programmatic focus\n * management interface that can be used to move focus forward and back in response\n * to user events.\n */\nexport function FocusScope(props: FocusScopeProps) {\n  let {children, contain, restoreFocus, autoFocus} = props;\n  let startRef = useRef<HTMLSpanElement>(null);\n  let endRef = useRef<HTMLSpanElement>(null);\n  let scopeRef = useRef<Element[]>([]);\n  let {parentNode} = useContext(FocusContext) || {};\n\n  // Create a tree node here so we can add children to it even before it is added to the tree.\n  let node = useMemo(() => new TreeNode({scopeRef}), [scopeRef]);\n\n  useLayoutEffect(() => {\n    // If a new scope mounts outside the active scope, (e.g. DialogContainer launched from a menu),\n    // use the active scope as the parent instead of the parent from context. Layout effects run bottom\n    // up, so if the parent is not yet added to the tree, don't do this. Only the outer-most FocusScope\n    // that is being added should get the activeScope as its parent.\n    let parent = parentNode || focusScopeTree.root;\n    if (focusScopeTree.getTreeNode(parent.scopeRef) && activeScope && !isAncestorScope(activeScope, parent.scopeRef)) {\n      let activeNode = focusScopeTree.getTreeNode(activeScope);\n      if (activeNode) {\n        parent = activeNode;\n      }\n    }\n\n    // Add the node to the parent, and to the tree.\n    parent.addChild(node);\n    focusScopeTree.addNode(node);\n  }, [node, parentNode]);\n\n  useLayoutEffect(() => {\n    let node = focusScopeTree.getTreeNode(scopeRef);\n    if (node) {\n      node.contain = !!contain;\n    }\n  }, [contain]);\n\n  useLayoutEffect(() => {\n    // Find all rendered nodes between the sentinels and add them to the scope.\n    let node = startRef.current?.nextSibling!;\n    let nodes: Element[] = [];\n    while (node && node !== endRef.current) {\n      nodes.push(node as Element);\n      node = node.nextSibling as Element;\n    }\n\n    scopeRef.current = nodes;\n  }, [children]);\n\n  useActiveScopeTracker(scopeRef, restoreFocus, contain);\n  useFocusContainment(scopeRef, contain);\n  useRestoreFocus(scopeRef, restoreFocus, contain);\n  useAutoFocus(scopeRef, autoFocus);\n\n  // This needs to be an effect so that activeScope is updated after the FocusScope tree is complete.\n  // It cannot be a useLayoutEffect because the parent of this node hasn't been attached in the tree yet.\n  useEffect(() => {\n    const activeElement = getOwnerDocument(scopeRef.current ? scopeRef.current[0] : undefined).activeElement;\n    let scope: TreeNode | null = null;\n\n    if (isElementInScope(activeElement, scopeRef.current)) {\n      // We need to traverse the focusScope tree and find the bottom most scope that\n      // contains the active element and set that as the activeScope.\n      for (let node of focusScopeTree.traverse()) {\n        if (node.scopeRef && isElementInScope(activeElement, node.scopeRef.current)) {\n          scope = node;\n        }\n      }\n\n      if (scope === focusScopeTree.getTreeNode(scopeRef)) {\n        activeScope = scope.scopeRef;\n      }\n    }\n  }, [scopeRef]);\n\n  // This layout effect cleanup is so that the tree node is removed synchronously with react before the RAF\n  // in useRestoreFocus cleanup runs.\n  useLayoutEffect(() => {\n    return () => {\n      // Scope may have been re-parented.\n      let parentScope = focusScopeTree.getTreeNode(scopeRef)?.parent?.scopeRef ?? null;\n\n      if (\n        (scopeRef === activeScope || isAncestorScope(scopeRef, activeScope)) &&\n        (!parentScope || focusScopeTree.getTreeNode(parentScope))\n      ) {\n        activeScope = parentScope;\n      }\n      focusScopeTree.removeTreeNode(scopeRef);\n    };\n  }, [scopeRef]);\n\n  let focusManager = useMemo(() => createFocusManagerForScope(scopeRef), []);\n  let value = useMemo(() => ({\n    focusManager,\n    parentNode: node\n  }), [node, focusManager]);\n\n  return (\n    <FocusContext.Provider value={value}>\n      <span data-focus-scope-start hidden ref={startRef} />\n      {children}\n      <span data-focus-scope-end hidden ref={endRef} />\n    </FocusContext.Provider>\n  );\n}\n\n/**\n * Returns a FocusManager interface for the parent FocusScope.\n * A FocusManager can be used to programmatically move focus within\n * a FocusScope, e.g. in response to user events like keyboard navigation.\n */\nexport function useFocusManager(): FocusManager | undefined {\n  return useContext(FocusContext)?.focusManager;\n}\n\nfunction createFocusManagerForScope(scopeRef: React.RefObject<Element[]>): FocusManager {\n  return {\n    focusNext(opts: FocusManagerOptions = {}) {\n      let scope = scopeRef.current!;\n      let {from, tabbable, wrap, accept} = opts;\n      let node = from || getOwnerDocument(scope[0]).activeElement!;\n      let sentinel = scope[0].previousElementSibling!;\n      let scopeRoot = getScopeRoot(scope);\n      let walker = getFocusableTreeWalker(scopeRoot, {tabbable, accept}, scope);\n      walker.currentNode = isElementInScope(node, scope) ? node : sentinel;\n      let nextNode = walker.nextNode() as FocusableElement;\n      if (!nextNode && wrap) {\n        walker.currentNode = sentinel;\n        nextNode = walker.nextNode() as FocusableElement;\n      }\n      if (nextNode) {\n        focusElement(nextNode, true);\n      }\n      return nextNode;\n    },\n    focusPrevious(opts: FocusManagerOptions = {}) {\n      let scope = scopeRef.current!;\n      let {from, tabbable, wrap, accept} = opts;\n      let node = from || getOwnerDocument(scope[0]).activeElement!;\n      let sentinel = scope[scope.length - 1].nextElementSibling!;\n      let scopeRoot = getScopeRoot(scope);\n      let walker = getFocusableTreeWalker(scopeRoot, {tabbable, accept}, scope);\n      walker.currentNode = isElementInScope(node, scope) ? node : sentinel;\n      let previousNode = walker.previousNode() as FocusableElement;\n      if (!previousNode && wrap) {\n        walker.currentNode = sentinel;\n        previousNode = walker.previousNode() as FocusableElement;\n      }\n      if (previousNode) {\n        focusElement(previousNode, true);\n      }\n      return previousNode;\n    },\n    focusFirst(opts = {}) {\n      let scope = scopeRef.current!;\n      let {tabbable, accept} = opts;\n      let scopeRoot = getScopeRoot(scope);\n      let walker = getFocusableTreeWalker(scopeRoot, {tabbable, accept}, scope);\n      walker.currentNode = scope[0].previousElementSibling!;\n      let nextNode = walker.nextNode() as FocusableElement;\n      if (nextNode) {\n        focusElement(nextNode, true);\n      }\n      return nextNode;\n    },\n    focusLast(opts = {}) {\n      let scope = scopeRef.current!;\n      let {tabbable, accept} = opts;\n      let scopeRoot = getScopeRoot(scope);\n      let walker = getFocusableTreeWalker(scopeRoot, {tabbable, accept}, scope);\n      walker.currentNode = scope[scope.length - 1].nextElementSibling!;\n      let previousNode = walker.previousNode() as FocusableElement;\n      if (previousNode) {\n        focusElement(previousNode, true);\n      }\n      return previousNode;\n    }\n  };\n}\n\nconst focusableElements = [\n  'input:not([disabled]):not([type=hidden])',\n  'select:not([disabled])',\n  'textarea:not([disabled])',\n  'button:not([disabled])',\n  'a[href]',\n  'area[href]',\n  'summary',\n  'iframe',\n  'object',\n  'embed',\n  'audio[controls]',\n  'video[controls]',\n  '[contenteditable]'\n];\n\nconst FOCUSABLE_ELEMENT_SELECTOR = focusableElements.join(':not([hidden]),') + ',[tabindex]:not([disabled]):not([hidden])';\n\nfocusableElements.push('[tabindex]:not([tabindex=\"-1\"]):not([disabled])');\nconst TABBABLE_ELEMENT_SELECTOR = focusableElements.join(':not([hidden]):not([tabindex=\"-1\"]),');\n\nexport function isFocusable(element: HTMLElement) {\n  return element.matches(FOCUSABLE_ELEMENT_SELECTOR);\n}\n\nfunction getScopeRoot(scope: Element[]) {\n  return scope[0].parentElement!;\n}\n\nfunction shouldContainFocus(scopeRef: ScopeRef) {\n  let scope = focusScopeTree.getTreeNode(activeScope);\n  while (scope && scope.scopeRef !== scopeRef) {\n    if (scope.contain) {\n      return false;\n    }\n\n    scope = scope.parent;\n  }\n\n  return true;\n}\n\nfunction useFocusContainment(scopeRef: RefObject<Element[]>, contain?: boolean) {\n  let focusedNode = useRef<FocusableElement>();\n\n  let raf = useRef<ReturnType<typeof requestAnimationFrame>>();\n  useLayoutEffect(() => {\n    let scope = scopeRef.current;\n    if (!contain) {\n      // if contain was changed, then we should cancel any ongoing waits to pull focus back into containment\n      if (raf.current) {\n        cancelAnimationFrame(raf.current);\n        raf.current = undefined;\n      }\n      return;\n    }\n\n    const ownerDocument = getOwnerDocument(scope ? scope[0] : undefined);\n\n    // Handle the Tab key to contain focus within the scope\n    let onKeyDown = (e) => {\n      if (e.key !== 'Tab' || e.altKey || e.ctrlKey || e.metaKey || !shouldContainFocus(scopeRef) || e.isComposing) {\n        return;\n      }\n\n      let focusedElement = ownerDocument.activeElement;\n      let scope = scopeRef.current;\n      if (!scope || !isElementInScope(focusedElement, scope)) {\n        return;\n      }\n\n      let scopeRoot = getScopeRoot(scope);\n      let walker = getFocusableTreeWalker(scopeRoot, {tabbable: true}, scope);\n      if (!focusedElement) {\n        return;\n      }\n      walker.currentNode = focusedElement;\n      let nextElement = (e.shiftKey ? walker.previousNode() : walker.nextNode()) as FocusableElement;\n      if (!nextElement) {\n        walker.currentNode = e.shiftKey ? scope[scope.length - 1].nextElementSibling! : scope[0].previousElementSibling!;\n        nextElement = (e.shiftKey ? walker.previousNode() : walker.nextNode()) as FocusableElement;\n      }\n\n      e.preventDefault();\n      if (nextElement) {\n        focusElement(nextElement, true);\n      }\n    };\n\n    let onFocus = (e) => {\n      // If focusing an element in a child scope of the currently active scope, the child becomes active.\n      // Moving out of the active scope to an ancestor is not allowed.\n      if ((!activeScope || isAncestorScope(activeScope, scopeRef)) && isElementInScope(e.target, scopeRef.current)) {\n        activeScope = scopeRef;\n        focusedNode.current = e.target;\n      } else if (shouldContainFocus(scopeRef) && !isElementInChildScope(e.target, scopeRef)) {\n        // If a focus event occurs outside the active scope (e.g. user tabs from browser location bar),\n        // restore focus to the previously focused node or the first tabbable element in the active scope.\n        if (focusedNode.current) {\n          focusedNode.current.focus();\n        } else if (activeScope && activeScope.current) {\n          focusFirstInScope(activeScope.current);\n        }\n      } else if (shouldContainFocus(scopeRef)) {\n        focusedNode.current = e.target;\n      }\n    };\n\n    let onBlur = (e) => {\n      // Firefox doesn't shift focus back to the Dialog properly without this\n      if (raf.current) {\n        cancelAnimationFrame(raf.current);\n      }\n      raf.current = requestAnimationFrame(() => {\n        // Use document.activeElement instead of e.relatedTarget so we can tell if user clicked into iframe\n        if (ownerDocument.activeElement && shouldContainFocus(scopeRef) && !isElementInChildScope(ownerDocument.activeElement, scopeRef)) {\n          activeScope = scopeRef;\n          if (ownerDocument.body.contains(e.target)) {\n            focusedNode.current = e.target;\n            focusedNode.current?.focus();\n          } else if (activeScope.current) {\n            focusFirstInScope(activeScope.current);\n          }\n        }\n      });\n    };\n\n    ownerDocument.addEventListener('keydown', onKeyDown, false);\n    ownerDocument.addEventListener('focusin', onFocus, false);\n    scope?.forEach(element => element.addEventListener('focusin', onFocus, false));\n    scope?.forEach(element => element.addEventListener('focusout', onBlur, false));\n    return () => {\n      ownerDocument.removeEventListener('keydown', onKeyDown, false);\n      ownerDocument.removeEventListener('focusin', onFocus, false);\n      scope?.forEach(element => element.removeEventListener('focusin', onFocus, false));\n      scope?.forEach(element => element.removeEventListener('focusout', onBlur, false));\n    };\n  }, [scopeRef, contain]);\n\n  // This is a useLayoutEffect so it is guaranteed to run before our async synthetic blur\n  // eslint-disable-next-line arrow-body-style\n  useLayoutEffect(() => {\n    return () => {\n      if (raf.current) {\n        cancelAnimationFrame(raf.current);\n      }\n    };\n  }, [raf]);\n}\n\nfunction isElementInAnyScope(element: Element) {\n  return isElementInChildScope(element);\n}\n\nfunction isElementInScope(element?: Element | null, scope?: Element[] | null) {\n  if (!element) {\n    return false;\n  }\n  if (!scope) {\n    return false;\n  }\n  return scope.some(node => node.contains(element));\n}\n\nfunction isElementInChildScope(element: Element, scope: ScopeRef = null) {\n  // If the element is within a top layer element (e.g. toasts), always allow moving focus there.\n  if (element instanceof Element && element.closest('[data-react-aria-top-layer]')) {\n    return true;\n  }\n\n  // node.contains in isElementInScope covers child scopes that are also DOM children,\n  // but does not cover child scopes in portals.\n  for (let {scopeRef: s} of focusScopeTree.traverse(focusScopeTree.getTreeNode(scope))) {\n    if (s && isElementInScope(element, s.current)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/** @private */\nexport function isElementInChildOfActiveScope(element: Element) {\n  return isElementInChildScope(element, activeScope);\n}\n\nfunction isAncestorScope(ancestor: ScopeRef, scope: ScopeRef) {\n  let parent = focusScopeTree.getTreeNode(scope)?.parent;\n  while (parent) {\n    if (parent.scopeRef === ancestor) {\n      return true;\n    }\n    parent = parent.parent;\n  }\n  return false;\n}\n\nfunction focusElement(element: FocusableElement | null, scroll = false) {\n  if (element != null && !scroll) {\n    try {\n      focusSafely(element);\n    } catch (err) {\n      // ignore\n    }\n  } else if (element != null) {\n    try {\n      element.focus();\n    } catch (err) {\n      // ignore\n    }\n  }\n}\n\nfunction focusFirstInScope(scope: Element[], tabbable:boolean = true) {\n  let sentinel = scope[0].previousElementSibling!;\n  let scopeRoot = getScopeRoot(scope);\n  let walker = getFocusableTreeWalker(scopeRoot, {tabbable}, scope);\n  walker.currentNode = sentinel;\n  let nextNode = walker.nextNode();\n\n  // If the scope does not contain a tabbable element, use the first focusable element.\n  if (tabbable && !nextNode) {\n    scopeRoot = getScopeRoot(scope);\n    walker = getFocusableTreeWalker(scopeRoot, {tabbable: false}, scope);\n    walker.currentNode = sentinel;\n    nextNode = walker.nextNode();\n  }\n\n  focusElement(nextNode as FocusableElement);\n}\n\nfunction useAutoFocus(scopeRef: RefObject<Element[]>, autoFocus?: boolean) {\n  const autoFocusRef = React.useRef(autoFocus);\n  useEffect(() => {\n    if (autoFocusRef.current) {\n      activeScope = scopeRef;\n      const ownerDocument = getOwnerDocument(scopeRef.current ? scopeRef.current[0] : undefined);\n      if (!isElementInScope(ownerDocument.activeElement, activeScope.current) && scopeRef.current) {\n        focusFirstInScope(scopeRef.current);\n      }\n    }\n    autoFocusRef.current = false;\n  }, [scopeRef]);\n}\n\nfunction useActiveScopeTracker(scopeRef: RefObject<Element[]>, restore?: boolean, contain?: boolean) {\n  // tracks the active scope, in case restore and contain are both false.\n  // if either are true, this is tracked in useRestoreFocus or useFocusContainment.\n  useLayoutEffect(() => {\n    if (restore || contain) {\n      return;\n    }\n\n    let scope = scopeRef.current;\n    const ownerDocument = getOwnerDocument(scope ? scope[0] : undefined);\n\n    let onFocus = (e) => {\n      let target = e.target as Element;\n      if (isElementInScope(target, scopeRef.current)) {\n        activeScope = scopeRef;\n      } else if (!isElementInAnyScope(target)) {\n        activeScope = null;\n      }\n    };\n\n    ownerDocument.addEventListener('focusin', onFocus, false);\n    scope?.forEach(element => element.addEventListener('focusin', onFocus, false));\n    return () => {\n      ownerDocument.removeEventListener('focusin', onFocus, false);\n      scope?.forEach(element => element.removeEventListener('focusin', onFocus, false));\n    };\n  }, [scopeRef, restore, contain]);\n}\n\nfunction shouldRestoreFocus(scopeRef: ScopeRef) {\n  let scope = focusScopeTree.getTreeNode(activeScope);\n  while (scope && scope.scopeRef !== scopeRef) {\n    if (scope.nodeToRestore) {\n      return false;\n    }\n\n    scope = scope.parent;\n  }\n\n  return scope?.scopeRef === scopeRef;\n}\n\nfunction useRestoreFocus(scopeRef: RefObject<Element[]>, restoreFocus?: boolean, contain?: boolean) {\n  // create a ref during render instead of useLayoutEffect so the active element is saved before a child with autoFocus=true mounts.\n  // eslint-disable-next-line no-restricted-globals\n  const nodeToRestoreRef = useRef(typeof document !== 'undefined' ? getOwnerDocument(scopeRef.current ? scopeRef.current[0] : undefined).activeElement as FocusableElement : null);\n\n  // restoring scopes should all track if they are active regardless of contain, but contain already tracks it plus logic to contain the focus\n  // restoring-non-containing scopes should only care if they become active so they can perform the restore\n  useLayoutEffect(() => {\n    let scope = scopeRef.current;\n    const ownerDocument = getOwnerDocument(scope ? scope[0] : undefined);\n    if (!restoreFocus || contain) {\n      return;\n    }\n\n    let onFocus = () => {\n      // If focusing an element in a child scope of the currently active scope, the child becomes active.\n      // Moving out of the active scope to an ancestor is not allowed.\n      if ((!activeScope || isAncestorScope(activeScope, scopeRef)) &&\n      isElementInScope(ownerDocument.activeElement, scopeRef.current)\n      ) {\n        activeScope = scopeRef;\n      }\n    };\n\n    ownerDocument.addEventListener('focusin', onFocus, false);\n    scope?.forEach(element => element.addEventListener('focusin', onFocus, false));\n    return () => {\n      ownerDocument.removeEventListener('focusin', onFocus, false);\n      scope?.forEach(element => element.removeEventListener('focusin', onFocus, false));\n    };\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [scopeRef, contain]);\n\n  useLayoutEffect(() => {\n    const ownerDocument = getOwnerDocument(scopeRef.current ? scopeRef.current[0] : undefined);\n\n    if (!restoreFocus) {\n      return;\n    }\n\n    // Handle the Tab key so that tabbing out of the scope goes to the next element\n    // after the node that had focus when the scope mounted. This is important when\n    // using portals for overlays, so that focus goes to the expected element when\n    // tabbing out of the overlay.\n    let onKeyDown = (e: KeyboardEvent) => {\n      if (e.key !== 'Tab' || e.altKey || e.ctrlKey || e.metaKey || !shouldContainFocus(scopeRef) || e.isComposing) {\n        return;\n      }\n\n      let focusedElement = ownerDocument.activeElement as FocusableElement;\n      if (!isElementInScope(focusedElement, scopeRef.current)) {\n        return;\n      }\n      let treeNode = focusScopeTree.getTreeNode(scopeRef);\n      if (!treeNode) {\n        return;\n      }\n      let nodeToRestore = treeNode.nodeToRestore;\n\n      // Create a DOM tree walker that matches all tabbable elements\n      let walker = getFocusableTreeWalker(ownerDocument.body, {tabbable: true});\n\n      // Find the next tabbable element after the currently focused element\n      walker.currentNode = focusedElement;\n      let nextElement = (e.shiftKey ? walker.previousNode() : walker.nextNode()) as FocusableElement;\n\n      if (!nodeToRestore || !ownerDocument.body.contains(nodeToRestore) || nodeToRestore === ownerDocument.body) {\n        nodeToRestore = undefined;\n        treeNode.nodeToRestore = undefined;\n      }\n\n      // If there is no next element, or it is outside the current scope, move focus to the\n      // next element after the node to restore to instead.\n      if ((!nextElement || !isElementInScope(nextElement, scopeRef.current)) && nodeToRestore) {\n        walker.currentNode = nodeToRestore;\n\n        // Skip over elements within the scope, in case the scope immediately follows the node to restore.\n        do {\n          nextElement = (e.shiftKey ? walker.previousNode() : walker.nextNode()) as FocusableElement;\n        } while (isElementInScope(nextElement, scopeRef.current));\n\n        e.preventDefault();\n        e.stopPropagation();\n        if (nextElement) {\n          focusElement(nextElement, true);\n        } else {\n           // If there is no next element and the nodeToRestore isn't within a FocusScope (i.e. we are leaving the top level focus scope)\n           // then move focus to the body.\n           // Otherwise restore focus to the nodeToRestore (e.g menu within a popover -> tabbing to close the menu should move focus to menu trigger)\n          if (!isElementInAnyScope(nodeToRestore)) {\n            focusedElement.blur();\n          } else {\n            focusElement(nodeToRestore, true);\n          }\n        }\n      }\n    };\n\n    if (!contain) {\n      ownerDocument.addEventListener('keydown', onKeyDown, true);\n    }\n\n    return () => {\n      if (!contain) {\n        ownerDocument.removeEventListener('keydown', onKeyDown, true);\n      }\n    };\n  }, [scopeRef, restoreFocus, contain]);\n\n  // useLayoutEffect instead of useEffect so the active element is saved synchronously instead of asynchronously.\n  useLayoutEffect(() => {\n    const ownerDocument = getOwnerDocument(scopeRef.current ? scopeRef.current[0] : undefined);\n\n    if (!restoreFocus) {\n      return;\n    }\n\n    let treeNode = focusScopeTree.getTreeNode(scopeRef);\n    if (!treeNode) {\n      return;\n    }\n    treeNode.nodeToRestore = nodeToRestoreRef.current ?? undefined;\n    return () => {\n      let treeNode = focusScopeTree.getTreeNode(scopeRef);\n      if (!treeNode) {\n        return;\n      }\n      let nodeToRestore = treeNode.nodeToRestore;\n\n      // if we already lost focus to the body and this was the active scope, then we should attempt to restore\n      if (\n        restoreFocus\n        && nodeToRestore\n        && (\n          // eslint-disable-next-line react-hooks/exhaustive-deps\n          isElementInScope(ownerDocument.activeElement, scopeRef.current)\n          || (ownerDocument.activeElement === ownerDocument.body && shouldRestoreFocus(scopeRef))\n        )\n      ) {\n        // freeze the focusScopeTree so it persists after the raf, otherwise during unmount nodes are removed from it\n        let clonedTree = focusScopeTree.clone();\n        requestAnimationFrame(() => {\n          // Only restore focus if we've lost focus to the body, the alternative is that focus has been purposefully moved elsewhere\n          if (ownerDocument.activeElement === ownerDocument.body) {\n            // look up the tree starting with our scope to find a nodeToRestore still in the DOM\n            let treeNode = clonedTree.getTreeNode(scopeRef);\n            while (treeNode) {\n              if (treeNode.nodeToRestore && treeNode.nodeToRestore.isConnected) {\n                focusElement(treeNode.nodeToRestore);\n                return;\n              }\n              treeNode = treeNode.parent;\n            }\n\n            // If no nodeToRestore was found, focus the first element in the nearest\n            // ancestor scope that is still in the tree.\n            treeNode = clonedTree.getTreeNode(scopeRef);\n            while (treeNode) {\n              if (treeNode.scopeRef && treeNode.scopeRef.current && focusScopeTree.getTreeNode(treeNode.scopeRef)) {\n                focusFirstInScope(treeNode.scopeRef.current, true);\n                return;\n              }\n              treeNode = treeNode.parent;\n            }\n          }\n        });\n      }\n    };\n  }, [scopeRef, restoreFocus]);\n}\n\n/**\n * Create a [TreeWalker]{@link https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker}\n * that matches all focusable/tabbable elements.\n */\nexport function getFocusableTreeWalker(root: Element, opts?: FocusManagerOptions, scope?: Element[]) {\n  let selector = opts?.tabbable ? TABBABLE_ELEMENT_SELECTOR : FOCUSABLE_ELEMENT_SELECTOR;\n  let walker = getOwnerDocument(root).createTreeWalker(\n    root,\n    NodeFilter.SHOW_ELEMENT,\n    {\n      acceptNode(node) {\n        // Skip nodes inside the starting node.\n        if (opts?.from?.contains(node)) {\n          return NodeFilter.FILTER_REJECT;\n        }\n\n        if ((node as Element).matches(selector)\n          && isElementVisible(node as Element)\n          && (!scope || isElementInScope(node as Element, scope))\n          && (!opts?.accept || opts.accept(node as Element))\n        ) {\n          return NodeFilter.FILTER_ACCEPT;\n        }\n\n        return NodeFilter.FILTER_SKIP;\n      }\n    }\n  );\n\n  if (opts?.from) {\n    walker.currentNode = opts.from;\n  }\n\n  return walker;\n}\n\n/**\n * Creates a FocusManager object that can be used to move focus within an element.\n */\nexport function createFocusManager(ref: RefObject<Element>, defaultOptions: FocusManagerOptions = {}): FocusManager {\n  return {\n    focusNext(opts: FocusManagerOptions = {}) {\n      let root = ref.current;\n      if (!root) {\n        return null;\n      }\n      let {from, tabbable = defaultOptions.tabbable, wrap = defaultOptions.wrap, accept = defaultOptions.accept} = opts;\n      let node = from || getOwnerDocument(root).activeElement;\n      let walker = getFocusableTreeWalker(root, {tabbable, accept});\n      if (root.contains(node)) {\n        walker.currentNode = node!;\n      }\n      let nextNode = walker.nextNode() as FocusableElement;\n      if (!nextNode && wrap) {\n        walker.currentNode = root;\n        nextNode = walker.nextNode() as FocusableElement;\n      }\n      if (nextNode) {\n        focusElement(nextNode, true);\n      }\n      return nextNode;\n    },\n    focusPrevious(opts: FocusManagerOptions = defaultOptions) {\n      let root = ref.current;\n      if (!root) {\n        return null;\n      }\n      let {from, tabbable = defaultOptions.tabbable, wrap = defaultOptions.wrap, accept = defaultOptions.accept} = opts;\n      let node = from || getOwnerDocument(root).activeElement;\n      let walker = getFocusableTreeWalker(root, {tabbable, accept});\n      if (root.contains(node)) {\n        walker.currentNode = node!;\n      } else {\n        let next = last(walker);\n        if (next) {\n          focusElement(next, true);\n        }\n        return next ?? null;\n      }\n      let previousNode = walker.previousNode() as FocusableElement;\n      if (!previousNode && wrap) {\n        walker.currentNode = root;\n        let lastNode = last(walker);\n        if (!lastNode) {\n          // couldn't wrap\n          return null;\n        }\n        previousNode = lastNode;\n      }\n      if (previousNode) {\n        focusElement(previousNode, true);\n      }\n      return previousNode ?? null;\n    },\n    focusFirst(opts = defaultOptions) {\n      let root = ref.current;\n      if (!root) {\n        return null;\n      }\n      let {tabbable = defaultOptions.tabbable, accept = defaultOptions.accept} = opts;\n      let walker = getFocusableTreeWalker(root, {tabbable, accept});\n      let nextNode = walker.nextNode() as FocusableElement;\n      if (nextNode) {\n        focusElement(nextNode, true);\n      }\n      return nextNode;\n    },\n    focusLast(opts = defaultOptions) {\n      let root = ref.current;\n      if (!root) {\n        return null;\n      }\n      let {tabbable = defaultOptions.tabbable, accept = defaultOptions.accept} = opts;\n      let walker = getFocusableTreeWalker(root, {tabbable, accept});\n      let next = last(walker);\n      if (next) {\n        focusElement(next, true);\n      }\n      return next ?? null;\n    }\n  };\n}\n\nfunction last(walker: TreeWalker) {\n  let next: FocusableElement | undefined = undefined;\n  let last: FocusableElement;\n  do {\n    last = walker.lastChild() as FocusableElement;\n    if (last) {\n      next = last;\n    }\n  } while (last);\n  return next;\n}\n\n\nclass Tree {\n  root: TreeNode;\n  private fastMap = new Map<ScopeRef, TreeNode>();\n\n  constructor() {\n    this.root = new TreeNode({scopeRef: null});\n    this.fastMap.set(null, this.root);\n  }\n\n  get size() {\n    return this.fastMap.size;\n  }\n\n  getTreeNode(data: ScopeRef) {\n    return this.fastMap.get(data);\n  }\n\n  addTreeNode(scopeRef: ScopeRef, parent: ScopeRef, nodeToRestore?: FocusableElement) {\n    let parentNode = this.fastMap.get(parent ?? null);\n    if (!parentNode) {\n      return;\n    }\n    let node = new TreeNode({scopeRef});\n    parentNode.addChild(node);\n    node.parent = parentNode;\n    this.fastMap.set(scopeRef, node);\n    if (nodeToRestore) {\n      node.nodeToRestore = nodeToRestore;\n    }\n  }\n\n  addNode(node: TreeNode) {\n    this.fastMap.set(node.scopeRef, node);\n  }\n\n  removeTreeNode(scopeRef: ScopeRef) {\n    // never remove the root\n    if (scopeRef === null) {\n      return;\n    }\n    let node = this.fastMap.get(scopeRef);\n    if (!node) {\n      return;\n    }\n    let parentNode = node.parent;\n    // when we remove a scope, check if any sibling scopes are trying to restore focus to something inside the scope we're removing\n    // if we are, then replace the siblings restore with the restore from the scope we're removing\n    for (let current of this.traverse()) {\n      if (\n        current !== node &&\n        node.nodeToRestore &&\n        current.nodeToRestore &&\n        node.scopeRef &&\n        node.scopeRef.current &&\n        isElementInScope(current.nodeToRestore, node.scopeRef.current)\n      ) {\n        current.nodeToRestore = node.nodeToRestore;\n      }\n    }\n    let children = node.children;\n    if (parentNode) {\n      parentNode.removeChild(node);\n      if (children.size > 0) {\n        children.forEach(child => parentNode && parentNode.addChild(child));\n      }\n    }\n\n    this.fastMap.delete(node.scopeRef);\n  }\n\n  // Pre Order Depth First\n  *traverse(node: TreeNode = this.root): Generator<TreeNode> {\n    if (node.scopeRef != null) {\n      yield node;\n    }\n    if (node.children.size > 0) {\n      for (let child of node.children) {\n        yield* this.traverse(child);\n      }\n    }\n  }\n\n  clone(): Tree {\n    let newTree = new Tree();\n    for (let node of this.traverse()) {\n      newTree.addTreeNode(node.scopeRef, node.parent?.scopeRef ?? null, node.nodeToRestore);\n    }\n    return newTree;\n  }\n}\n\nclass TreeNode {\n  public scopeRef: ScopeRef;\n  public nodeToRestore?: FocusableElement;\n  public parent?: TreeNode;\n  public children: Set<TreeNode> = new Set();\n  public contain = false;\n\n  constructor(props: {scopeRef: ScopeRef}) {\n    this.scopeRef = props.scopeRef;\n  }\n  addChild(node: TreeNode) {\n    this.children.add(node);\n    node.parent = this;\n  }\n  removeChild(node: TreeNode) {\n    this.children.delete(node);\n    node.parent = undefined;\n  }\n}\n\nexport let focusScopeTree = new Tree();\n"]},"metadata":{},"sourceType":"module"}