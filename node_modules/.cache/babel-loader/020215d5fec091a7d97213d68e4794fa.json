{"ast":null,"code":"import { CalendarDate as $35ea8db9cb2ccb90$export$99faa760c7908e4f } from \"./CalendarDate.mjs\";\nimport { mod as $2b4dce13dd5a17fa$export$842a2cf37af977e1 } from \"./utils.mjs\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */ // Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nconst $f3ed2e4472ae7e25$var$PERSIAN_EPOCH = 1948320;\n// Number of days from the start of the year to the start of each month.\nconst $f3ed2e4472ae7e25$var$MONTH_START = [0, 31, 62, 93, 124, 155, 186, 216, 246, 276, 306, 336 // Esfand\n];\nclass $f3ed2e4472ae7e25$export$37fccdbfd14c5939 {\n  fromJulianDay(jd) {\n    let daysSinceEpoch = jd - $f3ed2e4472ae7e25$var$PERSIAN_EPOCH;\n    let year = 1 + Math.floor((33 * daysSinceEpoch + 3) / 12053);\n    let farvardin1 = 365 * (year - 1) + Math.floor((8 * year + 21) / 33);\n    let dayOfYear = daysSinceEpoch - farvardin1;\n    let month = dayOfYear < 216 ? Math.floor(dayOfYear / 31) : Math.floor((dayOfYear - 6) / 30);\n    let day = dayOfYear - $f3ed2e4472ae7e25$var$MONTH_START[month] + 1;\n    return new (0, $35ea8db9cb2ccb90$export$99faa760c7908e4f)(this, year, month + 1, day);\n  }\n  toJulianDay(date) {\n    let jd = $f3ed2e4472ae7e25$var$PERSIAN_EPOCH - 1 + 365 * (date.year - 1) + Math.floor((8 * date.year + 21) / 33);\n    jd += $f3ed2e4472ae7e25$var$MONTH_START[date.month - 1];\n    jd += date.day;\n    return jd;\n  }\n  getMonthsInYear() {\n    return 12;\n  }\n  getDaysInMonth(date) {\n    if (date.month <= 6) return 31;\n    if (date.month <= 11) return 30;\n    let isLeapYear = (0, $2b4dce13dd5a17fa$export$842a2cf37af977e1)(25 * date.year + 11, 33) < 8;\n    return isLeapYear ? 30 : 29;\n  }\n  getEras() {\n    return ['AP'];\n  }\n  getYearsInEra() {\n    // 9378-10-10 persian is 9999-12-31 gregorian.\n    // Round down to 9377 to set the maximum full year.\n    return 9377;\n  }\n  constructor() {\n    this.identifier = 'persian';\n  }\n}\nexport { $f3ed2e4472ae7e25$export$37fccdbfd14c5939 as PersianCalendar };","map":{"version":3,"mappings":";;;AAAA;;;;;;;;;;GAAA,CAYA;AACA;;AAMA,MAAMA,sCAAgB;AAEtB;AACA,MAAMC,oCAAc,CAClB,GACA,IACA,IACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IAAK;AAAA,CACN;AAQM,MAAMC;EAGXC,cAAcC,EAAU,EAAgB;IACtC,IAAIC,iBAAiBD,KAAKJ;IAC1B,IAAIM,OAAO,IAAIC,KAAKC,KAAK,CAAC,CAAC,KAAKH,iBAAiB,KAAK;IACtD,IAAII,aAAa,OAAOH,OAAO,KAAKC,KAAKC,KAAK,CAAC,CAAC,IAAIF,OAAO,EAAC,IAAK;IACjE,IAAII,YAAYL,iBAAiBI;IACjC,IAAIE,QAAQD,YAAY,MACpBH,KAAKC,KAAK,CAACE,YAAY,MACvBH,KAAKC,KAAK,CAAC,CAACE,YAAY,KAAK;IACjC,IAAIE,MAAMF,YAAYT,iCAAW,CAACU,MAAM,GAAG;IAC3C,OAAO,KAAI,4CAAW,EAAE,IAAI,EAAEL,MAAMK,QAAQ,GAAGC;EACjD;EAEAC,YAAYC,IAAqB,EAAU;IACzC,IAAIV,KAAKJ,sCAAgB,IAAI,OAAOc,KAAKR,IAAI,GAAG,KAAKC,KAAKC,KAAK,CAAC,CAAC,IAAIM,KAAKR,IAAI,GAAG,EAAC,IAAK;IACvFF,MAAMH,iCAAW,CAACa,KAAKH,KAAK,GAAG,EAAE;IACjCP,MAAMU,KAAKF,GAAG;IACd,OAAOR;EACT;EAEAW,kBAA0B;IACxB,OAAO;EACT;EAEAC,eAAeF,IAAqB,EAAU;IAC5C,IAAIA,KAAKH,KAAK,IAAI,GAChB,OAAO;IAGT,IAAIG,KAAKH,KAAK,IAAI,IAChB,OAAO;IAGT,IAAIM,aAAa,6CAAE,EAAE,KAAKH,KAAKR,IAAI,GAAG,IAAI,MAAM;IAChD,OAAOW,aAAa,KAAK;EAC3B;EAEAC,UAAU;IACR,OAAO,CAAC,KAAK;EACf;EAEAC,gBAAwB;IACtB;IACA;IACA,OAAO;EACT;;SA9CAC,aAAa;;AA+Cf","names":["$f3ed2e4472ae7e25$var$PERSIAN_EPOCH","$f3ed2e4472ae7e25$var$MONTH_START","$f3ed2e4472ae7e25$export$37fccdbfd14c5939","fromJulianDay","jd","daysSinceEpoch","year","Math","floor","farvardin1","dayOfYear","month","day","toJulianDay","date","getMonthsInYear","getDaysInMonth","isLeapYear","getEras","getYearsInEra","identifier"],"sources":["D:\\Like, for real projects\\React-Todo-List-V2\\node_modules\\@internationalized\\date\\dist\\packages\\@internationalized\\date\\src\\calendars\\PersianCalendar.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\n// Portions of the code in this file are based on code from ICU.\n// Original licensing can be found in the NOTICE file in the root directory of this source tree.\n\nimport {AnyCalendarDate, Calendar} from '../types';\nimport {CalendarDate} from '../CalendarDate';\nimport {mod} from '../utils';\n\nconst PERSIAN_EPOCH = 1948320;\n\n// Number of days from the start of the year to the start of each month.\nconst MONTH_START = [\n  0, // Farvardin\n  31, // Ordibehesht\n  62, // Khordad\n  93, // Tir\n  124, // Mordad\n  155, // Shahrivar\n  186, // Mehr\n  216, // Aban\n  246, // Azar\n  276, // Dey\n  306, // Bahman\n  336  // Esfand\n];\n\n/**\n * The Persian calendar is the main calendar used in Iran and Afghanistan. It has 12 months\n * in each year, the first 6 of which have 31 days, and the next 5 have 30 days. The 12th month\n * has either 29 or 30 days depending on whether it is a leap year. The Persian year starts\n * around the March equinox.\n */\nexport class PersianCalendar implements Calendar {\n  identifier = 'persian';\n\n  fromJulianDay(jd: number): CalendarDate {\n    let daysSinceEpoch = jd - PERSIAN_EPOCH;\n    let year = 1 + Math.floor((33 * daysSinceEpoch + 3) / 12053);\n    let farvardin1 = 365 * (year - 1) + Math.floor((8 * year + 21) / 33);\n    let dayOfYear = daysSinceEpoch - farvardin1;\n    let month = dayOfYear < 216\n      ? Math.floor(dayOfYear / 31)\n      : Math.floor((dayOfYear - 6) / 30);\n    let day = dayOfYear - MONTH_START[month] + 1;\n    return new CalendarDate(this, year, month + 1, day);\n  }\n\n  toJulianDay(date: AnyCalendarDate): number {\n    let jd = PERSIAN_EPOCH - 1 + 365 * (date.year - 1) + Math.floor((8 * date.year + 21) / 33);\n    jd += MONTH_START[date.month - 1];\n    jd += date.day;\n    return jd;\n  }\n\n  getMonthsInYear(): number {\n    return 12;\n  }\n\n  getDaysInMonth(date: AnyCalendarDate): number {\n    if (date.month <= 6) {\n      return 31;\n    }\n\n    if (date.month <= 11) {\n      return 30;\n    }\n\n    let isLeapYear = mod(25 * date.year + 11, 33) < 8;\n    return isLeapYear ? 30 : 29;\n  }\n\n  getEras() {\n    return ['AP'];\n  }\n\n  getYearsInEra(): number {\n    // 9378-10-10 persian is 9999-12-31 gregorian.\n    // Round down to 9377 to set the maximum full year.\n    return 9377;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}