{"ast":null,"code":"import { useCalendarBase as $c4acc1de3ab169cf$export$d652b3ea2d672d5b } from \"./useCalendarBase.mjs\";\nimport { useRef as $juhpn$useRef } from \"react\";\nimport { useEvent as $juhpn$useEvent } from \"@react-aria/utils\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $46a4342aab3d8076$export$87e0539f600c24e5(props, state, ref) {\n  let res = (0, $c4acc1de3ab169cf$export$d652b3ea2d672d5b)(props, state);\n  // We need to ignore virtual pointer events from VoiceOver due to these bugs.\n  // https://bugs.webkit.org/show_bug.cgi?id=222627\n  // https://bugs.webkit.org/show_bug.cgi?id=223202\n  // usePress also does this and waits for the following click event before firing.\n  // We need to match that here otherwise this will fire before the press event in\n  // useCalendarCell, causing range selection to not work properly.\n  let isVirtualClick = (0, $juhpn$useRef)(false);\n  let windowRef = (0, $juhpn$useRef)(typeof window !== 'undefined' ? window : null);\n  (0, $juhpn$useEvent)(windowRef, 'pointerdown', e => {\n    isVirtualClick.current = e.width === 0 && e.height === 0;\n  });\n  // Stop range selection when pressing or releasing a pointer outside the calendar body,\n  // except when pressing the next or previous buttons to switch months.\n  let endDragging = e => {\n    if (isVirtualClick.current) {\n      isVirtualClick.current = false;\n      return;\n    }\n    state.setDragging(false);\n    if (!state.anchorDate) return;\n    let target = e.target;\n    if (ref.current && ref.current.contains(document.activeElement) && (!ref.current.contains(target) || !target.closest('button, [role=\"button\"]'))) state.selectFocusedDate();\n  };\n  (0, $juhpn$useEvent)(windowRef, 'pointerup', endDragging);\n  // Also stop range selection on blur, e.g. tabbing away from the calendar.\n  res.calendarProps.onBlur = e => {\n    if (!ref.current) return;\n    if ((!e.relatedTarget || !ref.current.contains(e.relatedTarget)) && state.anchorDate) state.selectFocusedDate();\n  };\n  // Prevent touch scrolling while dragging\n  (0, $juhpn$useEvent)(ref, 'touchmove', e => {\n    if (state.isDragging) e.preventDefault();\n  }, {\n    passive: false,\n    capture: true\n  });\n  return res;\n}\nexport { $46a4342aab3d8076$export$87e0539f600c24e5 as useRangeCalendar };","map":{"version":3,"mappings":";;;;AAAA;;;;;;;;;;;;AAuBO,SAASA,0CAAsCC,KAAgC,EAAEC,KAAyB,EAAEC,GAAgC;EACjJ,IAAIC,MAAM,6CAAc,EAAEH,OAAOC;EAEjC;EACA;EACA;EACA;EACA;EACA;EACA,IAAIG,iBAAiB,iBAAK,EAAE;EAC5B,IAAIC,YAAY,iBAAK,EAAE,OAAOC,WAAW,cAAcA,SAAS;EAChE,mBAAO,EAAED,WAAW,eAAeE;IACjCH,eAAeI,OAAO,GAAGD,EAAEE,KAAK,KAAK,KAAKF,EAAEG,MAAM,KAAK;EACzD;EAEA;EACA;EACA,IAAIC,cAAeJ;IACjB,IAAIH,eAAeI,OAAO,EAAE;MAC1BJ,eAAeI,OAAO,GAAG;MACzB;IACF;IAEAP,MAAMW,WAAW,CAAC;IAClB,IAAI,CAACX,MAAMY,UAAU,EACnB;IAGF,IAAIC,SAASP,EAAEO,MAAM;IACrB,IACEZ,IAAIM,OAAO,IACXN,IAAIM,OAAO,CAACO,QAAQ,CAACC,SAASC,aAAa,MAC1C,CAACf,IAAIM,OAAO,CAACO,QAAQ,CAACD,WAAW,CAACA,OAAOI,OAAO,CAAC,0BAAyB,GAE3EjB,MAAMkB,iBAAiB;EAE3B;EAEA,mBAAO,EAAEd,WAAW,aAAaM;EAEjC;EACAR,IAAIiB,aAAa,CAACC,MAAM,GAAGd;IACzB,IAAI,CAACL,IAAIM,OAAO,EACd;IAEF,IAAI,CAAC,CAACD,EAAEe,aAAa,IAAI,CAACpB,IAAIM,OAAO,CAACO,QAAQ,CAACR,EAAEe,aAAa,MAAMrB,MAAMY,UAAU,EAClFZ,MAAMkB,iBAAiB;EAE3B;EAEA;EACA,mBAAO,EAAEjB,KAAK,aAAaK;IACzB,IAAIN,MAAMsB,UAAU,EAClBhB,EAAEiB,cAAc;EAEpB,GAAG;IAACC,SAAS;IAAOC,SAAS;EAAI;EAEjC,OAAOvB;AACT","names":["$46a4342aab3d8076$export$87e0539f600c24e5","props","state","ref","res","isVirtualClick","windowRef","window","e","current","width","height","endDragging","setDragging","anchorDate","target","contains","document","activeElement","closest","selectFocusedDate","calendarProps","onBlur","relatedTarget","isDragging","preventDefault","passive","capture"],"sources":["D:\\Like, for real projects\\React-Todo-List-V2\\node_modules\\@react-aria\\calendar\\dist\\packages\\@react-aria\\calendar\\src\\useRangeCalendar.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaRangeCalendarProps, DateValue} from '@react-types/calendar';\nimport {CalendarAria, useCalendarBase} from './useCalendarBase';\nimport {FocusableElement} from '@react-types/shared';\nimport {RangeCalendarState} from '@react-stately/calendar';\nimport {RefObject, useRef} from 'react';\nimport {useEvent} from '@react-aria/utils';\n\n/**\n * Provides the behavior and accessibility implementation for a range calendar component.\n * A range calendar displays one or more date grids and allows users to select a contiguous range of dates.\n */\nexport function useRangeCalendar<T extends DateValue>(props: AriaRangeCalendarProps<T>, state: RangeCalendarState, ref: RefObject<FocusableElement>): CalendarAria {\n  let res = useCalendarBase(props, state);\n\n  // We need to ignore virtual pointer events from VoiceOver due to these bugs.\n  // https://bugs.webkit.org/show_bug.cgi?id=222627\n  // https://bugs.webkit.org/show_bug.cgi?id=223202\n  // usePress also does this and waits for the following click event before firing.\n  // We need to match that here otherwise this will fire before the press event in\n  // useCalendarCell, causing range selection to not work properly.\n  let isVirtualClick = useRef(false);\n  let windowRef = useRef(typeof window !== 'undefined' ? window : null);\n  useEvent(windowRef, 'pointerdown', e => {\n    isVirtualClick.current = e.width === 0 && e.height === 0;\n  });\n\n  // Stop range selection when pressing or releasing a pointer outside the calendar body,\n  // except when pressing the next or previous buttons to switch months.\n  let endDragging = (e: PointerEvent) => {\n    if (isVirtualClick.current) {\n      isVirtualClick.current = false;\n      return;\n    }\n\n    state.setDragging(false);\n    if (!state.anchorDate) {\n      return;\n    }\n\n    let target = e.target as Element;\n    if (\n      ref.current &&\n      ref.current.contains(document.activeElement) &&\n      (!ref.current.contains(target) || !target.closest('button, [role=\"button\"]'))\n    ) {\n      state.selectFocusedDate();\n    }\n  };\n\n  useEvent(windowRef, 'pointerup', endDragging);\n\n  // Also stop range selection on blur, e.g. tabbing away from the calendar.\n  res.calendarProps.onBlur = e => {\n    if (!ref.current) {\n      return;\n    }\n    if ((!e.relatedTarget || !ref.current.contains(e.relatedTarget)) && state.anchorDate) {\n      state.selectFocusedDate();\n    }\n  };\n\n  // Prevent touch scrolling while dragging\n  useEvent(ref, 'touchmove', e => {\n    if (state.isDragging) {\n      e.preventDefault();\n    }\n  }, {passive: false, capture: true});\n\n  return res;\n}\n"]},"metadata":{},"sourceType":"module"}