{"ast":null,"code":"import { getItemId as $b1f0cad8af73213b$export$9145995848b05025, listData as $b1f0cad8af73213b$export$3585ede4d035bf14 } from \"./utils.mjs\";\nimport { useSlotId as $fcwmx$useSlotId, isMac as $fcwmx$isMac, isWebKit as $fcwmx$isWebKit, chain as $fcwmx$chain, filterDOMProps as $fcwmx$filterDOMProps, useLinkProps as $fcwmx$useLinkProps, mergeProps as $fcwmx$mergeProps } from \"@react-aria/utils\";\nimport { getItemCount as $fcwmx$getItemCount } from \"@react-stately/collections\";\nimport { useHover as $fcwmx$useHover, isFocusVisible as $fcwmx$isFocusVisible } from \"@react-aria/interactions\";\nimport { useSelectableItem as $fcwmx$useSelectableItem } from \"@react-aria/selection\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $293f70390ea03370$export$497855f14858aa34(props, state, ref) {\n  var _item_props, _item_props1;\n  let {\n    key: key\n  } = props;\n  let data = (0, $b1f0cad8af73213b$export$3585ede4d035bf14).get(state);\n  var _props_isDisabled;\n  let isDisabled = (_props_isDisabled = props.isDisabled) !== null && _props_isDisabled !== void 0 ? _props_isDisabled : state.selectionManager.isDisabled(key);\n  var _props_isSelected;\n  let isSelected = (_props_isSelected = props.isSelected) !== null && _props_isSelected !== void 0 ? _props_isSelected : state.selectionManager.isSelected(key);\n  var _props_shouldSelectOnPressUp;\n  let shouldSelectOnPressUp = (_props_shouldSelectOnPressUp = props.shouldSelectOnPressUp) !== null && _props_shouldSelectOnPressUp !== void 0 ? _props_shouldSelectOnPressUp : data === null || data === void 0 ? void 0 : data.shouldSelectOnPressUp;\n  var _props_shouldFocusOnHover;\n  let shouldFocusOnHover = (_props_shouldFocusOnHover = props.shouldFocusOnHover) !== null && _props_shouldFocusOnHover !== void 0 ? _props_shouldFocusOnHover : data === null || data === void 0 ? void 0 : data.shouldFocusOnHover;\n  var _props_shouldUseVirtualFocus;\n  let shouldUseVirtualFocus = (_props_shouldUseVirtualFocus = props.shouldUseVirtualFocus) !== null && _props_shouldUseVirtualFocus !== void 0 ? _props_shouldUseVirtualFocus : data === null || data === void 0 ? void 0 : data.shouldUseVirtualFocus;\n  var _props_isVirtualized;\n  let isVirtualized = (_props_isVirtualized = props.isVirtualized) !== null && _props_isVirtualized !== void 0 ? _props_isVirtualized : data === null || data === void 0 ? void 0 : data.isVirtualized;\n  let labelId = (0, $fcwmx$useSlotId)();\n  let descriptionId = (0, $fcwmx$useSlotId)();\n  let optionProps = {\n    role: 'option',\n    'aria-disabled': isDisabled || undefined,\n    'aria-selected': state.selectionManager.selectionMode !== 'none' ? isSelected : undefined\n  };\n  // Safari with VoiceOver on macOS misreads options with aria-labelledby or aria-label as simply \"text\".\n  // We should not map slots to the label and description on Safari and instead just have VoiceOver read the textContent.\n  // https://bugs.webkit.org/show_bug.cgi?id=209279\n  if (!((0, $fcwmx$isMac)() && (0, $fcwmx$isWebKit)())) {\n    optionProps['aria-label'] = props['aria-label'];\n    optionProps['aria-labelledby'] = labelId;\n    optionProps['aria-describedby'] = descriptionId;\n  }\n  let item = state.collection.getItem(key);\n  if (isVirtualized) {\n    let index = Number(item === null || item === void 0 ? void 0 : item.index);\n    optionProps['aria-posinset'] = Number.isNaN(index) ? undefined : index + 1;\n    optionProps['aria-setsize'] = (0, $fcwmx$getItemCount)(state.collection);\n  }\n  let onAction = (data === null || data === void 0 ? void 0 : data.onAction) ? () => {\n    var _data_onAction;\n    return data === null || data === void 0 ? void 0 : (_data_onAction = data.onAction) === null || _data_onAction === void 0 ? void 0 : _data_onAction.call(data, key);\n  } : undefined;\n  let {\n    itemProps: itemProps,\n    isPressed: isPressed,\n    isFocused: isFocused,\n    hasAction: hasAction,\n    allowsSelection: allowsSelection\n  } = (0, $fcwmx$useSelectableItem)({\n    selectionManager: state.selectionManager,\n    key: key,\n    ref: ref,\n    shouldSelectOnPressUp: shouldSelectOnPressUp,\n    allowsDifferentPressOrigin: shouldSelectOnPressUp && shouldFocusOnHover,\n    isVirtualized: isVirtualized,\n    shouldUseVirtualFocus: shouldUseVirtualFocus,\n    isDisabled: isDisabled,\n    onAction: onAction || (item === null || item === void 0 ? void 0 : (_item_props = item.props) === null || _item_props === void 0 ? void 0 : _item_props.onAction) ? (0, $fcwmx$chain)(item === null || item === void 0 ? void 0 : (_item_props1 = item.props) === null || _item_props1 === void 0 ? void 0 : _item_props1.onAction, onAction) : undefined,\n    linkBehavior: data === null || data === void 0 ? void 0 : data.linkBehavior\n  });\n  let {\n    hoverProps: hoverProps\n  } = (0, $fcwmx$useHover)({\n    isDisabled: isDisabled || !shouldFocusOnHover,\n    onHoverStart() {\n      if (!(0, $fcwmx$isFocusVisible)()) {\n        state.selectionManager.setFocused(true);\n        state.selectionManager.setFocusedKey(key);\n      }\n    }\n  });\n  let domProps = (0, $fcwmx$filterDOMProps)(item === null || item === void 0 ? void 0 : item.props);\n  delete domProps.id;\n  let linkProps = (0, $fcwmx$useLinkProps)(item === null || item === void 0 ? void 0 : item.props);\n  return {\n    optionProps: {\n      ...optionProps,\n      ...(0, $fcwmx$mergeProps)(domProps, itemProps, hoverProps, linkProps),\n      id: (0, $b1f0cad8af73213b$export$9145995848b05025)(state, key)\n    },\n    labelProps: {\n      id: labelId\n    },\n    descriptionProps: {\n      id: descriptionId\n    },\n    isFocused: isFocused,\n    isFocusVisible: isFocused && (0, $fcwmx$isFocusVisible)(),\n    isSelected: isSelected,\n    isDisabled: isDisabled,\n    isPressed: isPressed,\n    allowsSelection: allowsSelection,\n    hasAction: hasAction\n  };\n}\nexport { $293f70390ea03370$export$497855f14858aa34 as useOption };","map":{"version":3,"mappings":"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","names":["$293f70390ea03370$export$497855f14858aa34","props","state","ref","_item_props","_item_props1","key","data","get","_props_isDisabled","isDisabled","selectionManager","_props_isSelected","isSelected","_props_shouldSelectOnPressUp","shouldSelectOnPressUp","_props_shouldFocusOnHover","shouldFocusOnHover","_props_shouldUseVirtualFocus","shouldUseVirtualFocus","_props_isVirtualized","isVirtualized","labelId","descriptionId","optionProps","role","undefined","selectionMode","item","collection","getItem","index","Number","isNaN","onAction","_data_onAction","itemProps","isPressed","isFocused","hasAction","allowsSelection","allowsDifferentPressOrigin","linkBehavior","hoverProps","onHoverStart","setFocused","setFocusedKey","domProps","id","linkProps","labelProps","descriptionProps","isFocusVisible"],"sources":["D:\\Like, for real projects\\React-Todo-List-V2\\node_modules\\@react-aria\\listbox\\dist\\packages\\@react-aria\\listbox\\src\\useOption.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {chain, filterDOMProps, isMac, isWebKit, mergeProps, useLinkProps, useSlotId} from '@react-aria/utils';\nimport {DOMAttributes, FocusableElement, Key} from '@react-types/shared';\nimport {getItemCount} from '@react-stately/collections';\nimport {getItemId, listData} from './utils';\nimport {isFocusVisible, useHover} from '@react-aria/interactions';\nimport {ListState} from '@react-stately/list';\nimport {RefObject} from 'react';\nimport {SelectableItemStates, useSelectableItem} from '@react-aria/selection';\n\nexport interface OptionAria extends SelectableItemStates {\n  /** Props for the option element. */\n  optionProps: DOMAttributes,\n\n  /** Props for the main text element inside the option. */\n  labelProps: DOMAttributes,\n\n  /** Props for the description text element inside the option, if any. */\n  descriptionProps: DOMAttributes,\n\n  /** Whether the option is currently focused. */\n  isFocused: boolean,\n\n  /** Whether the option is keyboard focused. */\n  isFocusVisible: boolean\n}\n\nexport interface AriaOptionProps {\n  /**\n   * Whether the option is disabled.\n   * @deprecated\n   */\n  isDisabled?: boolean,\n\n  /**\n   * Whether the option is selected.\n   * @deprecated\n   */\n  isSelected?: boolean,\n\n  /** A screen reader only label for the option. */\n  'aria-label'?: string,\n\n  /** The unique key for the option. */\n  key: Key,\n\n  /**\n   * Whether selection should occur on press up instead of press down.\n   * @deprecated\n   */\n  shouldSelectOnPressUp?: boolean,\n\n  /**\n   * Whether the option should be focused when the user hovers over it.\n   * @deprecated\n   */\n  shouldFocusOnHover?: boolean,\n\n  /**\n   * Whether the option is contained in a virtual scrolling listbox.\n   * @deprecated\n   */\n  isVirtualized?: boolean,\n\n  /**\n   * Whether the option should use virtual focus instead of being focused directly.\n   * @deprecated\n   */\n  shouldUseVirtualFocus?: boolean\n}\n\n/**\n * Provides the behavior and accessibility implementation for an option in a listbox.\n * See `useListBox` for more details about listboxes.\n * @param props - Props for the option.\n * @param state - State for the listbox, as returned by `useListState`.\n */\nexport function useOption<T>(props: AriaOptionProps, state: ListState<T>, ref: RefObject<FocusableElement>): OptionAria {\n  let {\n    key\n  } = props;\n\n  let data = listData.get(state);\n\n  let isDisabled = props.isDisabled ?? state.selectionManager.isDisabled(key);\n  let isSelected = props.isSelected ?? state.selectionManager.isSelected(key);\n  let shouldSelectOnPressUp = props.shouldSelectOnPressUp ?? data?.shouldSelectOnPressUp;\n  let shouldFocusOnHover = props.shouldFocusOnHover ?? data?.shouldFocusOnHover;\n  let shouldUseVirtualFocus = props.shouldUseVirtualFocus ?? data?.shouldUseVirtualFocus;\n  let isVirtualized = props.isVirtualized ?? data?.isVirtualized;\n\n  let labelId = useSlotId();\n  let descriptionId = useSlotId();\n\n  let optionProps = {\n    role: 'option',\n    'aria-disabled': isDisabled || undefined,\n    'aria-selected': state.selectionManager.selectionMode !== 'none' ? isSelected : undefined\n  };\n\n  // Safari with VoiceOver on macOS misreads options with aria-labelledby or aria-label as simply \"text\".\n  // We should not map slots to the label and description on Safari and instead just have VoiceOver read the textContent.\n  // https://bugs.webkit.org/show_bug.cgi?id=209279\n  if (!(isMac() && isWebKit())) {\n    optionProps['aria-label'] = props['aria-label'];\n    optionProps['aria-labelledby'] = labelId;\n    optionProps['aria-describedby'] = descriptionId;\n  }\n\n  let item = state.collection.getItem(key);\n  if (isVirtualized) {\n    let index = Number(item?.index);\n    optionProps['aria-posinset'] = Number.isNaN(index) ? undefined : index + 1;\n    optionProps['aria-setsize'] = getItemCount(state.collection);\n  }\n\n  let onAction = data?.onAction ? () => data?.onAction?.(key) : undefined;\n  let {itemProps, isPressed, isFocused, hasAction, allowsSelection} = useSelectableItem({\n    selectionManager: state.selectionManager,\n    key,\n    ref,\n    shouldSelectOnPressUp,\n    allowsDifferentPressOrigin: shouldSelectOnPressUp && shouldFocusOnHover,\n    isVirtualized,\n    shouldUseVirtualFocus,\n    isDisabled,\n    onAction: onAction || item?.props?.onAction ? chain(item?.props?.onAction, onAction) : undefined,\n    linkBehavior: data?.linkBehavior\n  });\n\n  let {hoverProps} = useHover({\n    isDisabled: isDisabled || !shouldFocusOnHover,\n    onHoverStart() {\n      if (!isFocusVisible()) {\n        state.selectionManager.setFocused(true);\n        state.selectionManager.setFocusedKey(key);\n      }\n    }\n  });\n\n  let domProps = filterDOMProps(item?.props);\n  delete domProps.id;\n  let linkProps = useLinkProps(item?.props);\n\n  return {\n    optionProps: {\n      ...optionProps,\n      ...mergeProps(domProps, itemProps, hoverProps, linkProps),\n      id: getItemId(state, key)\n    },\n    labelProps: {\n      id: labelId\n    },\n    descriptionProps: {\n      id: descriptionId\n    },\n    isFocused,\n    isFocusVisible: isFocused && isFocusVisible(),\n    isSelected,\n    isDisabled,\n    isPressed,\n    allowsSelection,\n    hasAction\n  };\n}\n"]},"metadata":{},"sourceType":"module"}