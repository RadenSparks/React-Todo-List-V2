{"ast":null,"code":"import { useEffect as $jNP0e$useEffect } from \"react\";\nimport { useFormValidation as $jNP0e$useFormValidation } from \"@react-aria/form\";\nimport { useFormValidationState as $jNP0e$useFormValidationState } from \"@react-stately/form\";\nimport { useToggle as $jNP0e$useToggle } from \"@react-aria/toggle\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $406796ff087fe49b$export$e375f10ce42261c5(props, state, inputRef) {\n  // Create validation state here because it doesn't make sense to add to general useToggleState.\n  let validationState = (0, $jNP0e$useFormValidationState)({\n    ...props,\n    value: state.isSelected\n  });\n  let {\n    isInvalid: isInvalid,\n    validationErrors: validationErrors,\n    validationDetails: validationDetails\n  } = validationState.displayValidation;\n  let {\n    labelProps: labelProps,\n    inputProps: inputProps,\n    isSelected: isSelected,\n    isPressed: isPressed,\n    isDisabled: isDisabled,\n    isReadOnly: isReadOnly\n  } = (0, $jNP0e$useToggle)({\n    ...props,\n    isInvalid: isInvalid\n  }, state, inputRef);\n  (0, $jNP0e$useFormValidation)(props, validationState, inputRef);\n  let {\n    isIndeterminate: isIndeterminate,\n    isRequired: isRequired,\n    validationBehavior = 'aria'\n  } = props;\n  (0, $jNP0e$useEffect)(() => {\n    // indeterminate is a property, but it can only be set via javascript\n    // https://css-tricks.com/indeterminate-checkboxes/\n    if (inputRef.current) inputRef.current.indeterminate = !!isIndeterminate;\n  });\n  return {\n    labelProps: labelProps,\n    inputProps: {\n      ...inputProps,\n      checked: isSelected,\n      'aria-required': isRequired && validationBehavior === 'aria' || undefined,\n      required: isRequired && validationBehavior === 'native'\n    },\n    isSelected: isSelected,\n    isPressed: isPressed,\n    isDisabled: isDisabled,\n    isReadOnly: isReadOnly,\n    isInvalid: isInvalid,\n    validationErrors: validationErrors,\n    validationDetails: validationDetails\n  };\n}\nexport { $406796ff087fe49b$export$e375f10ce42261c5 as useCheckbox };","map":{"version":3,"mappings":";;;;;AAAA;;;;;;;;;;;;AA2CO,SAASA,0CAAYC,KAAwB,EAAEC,KAAkB,EAAEC,QAAqC;EAC7G;EACA,IAAIC,kBAAkB,iCAAqB,EAAE;IAAC,GAAGH,KAAK;IAAEI,OAAOH,MAAMI;EAAU;EAC/E,IAAI;IAAAC,WAACA,SAAS;IAAAC,kBAAEA,gBAAgB;IAAAC,mBAAEA;EAAiB,CAAC,GAAGL,gBAAgBM,iBAAiB;EACxF,IAAI;IAAAC,YAACA,UAAU;IAAAC,YAAEA,UAAU;IAAAN,YAAEA,UAAU;IAAAO,WAAEA,SAAS;IAAAC,YAAEA,UAAU;IAAAC,YAAEA;EAAU,CAAC,GAAG,oBAAQ,EAAE;IACtF,GAAGd,KAAK;eACRM;EACF,GAAGL,OAAOC;EAEV,4BAAgB,EAAEF,OAAOG,iBAAiBD;EAE1C,IAAI;IAAAa,iBAACA,eAAe;IAAAC,YAAEA,UAAU;IAAEC,qBAAqB;EAAA,CAAO,GAAGjB;EACjE,oBAAQ,EAAE;IACR;IACA;IACA,IAAIE,SAASgB,OAAO,EAClBhB,SAASgB,OAAO,CAACC,aAAa,GAAG,CAAC,CAACJ;EAEvC;EAEA,OAAO;gBACLL;IACAC,YAAY;MACV,GAAGA,UAAU;MACbS,SAASf;MACT,iBAAiBW,UAAC,IAAcC,uBAAuB,UAAWI;MAClEC,UAAUN,cAAcC,uBAAuB;IACjD;gBACAZ;eACAO;gBACAC;gBACAC;eACAR;sBACAC;uBACAC;EACF;AACF","names":["$406796ff087fe49b$export$e375f10ce42261c5","props","state","inputRef","validationState","value","isSelected","isInvalid","validationErrors","validationDetails","displayValidation","labelProps","inputProps","isPressed","isDisabled","isReadOnly","isIndeterminate","isRequired","validationBehavior","current","indeterminate","checked","undefined","required"],"sources":["D:\\Like, for real projects\\React-Todo-List-V2\\node_modules\\@react-aria\\checkbox\\dist\\packages\\@react-aria\\checkbox\\src\\useCheckbox.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaCheckboxProps} from '@react-types/checkbox';\nimport {InputHTMLAttributes, LabelHTMLAttributes, RefObject, useEffect} from 'react';\nimport {ToggleState} from '@react-stately/toggle';\nimport {useFormValidation} from '@react-aria/form';\nimport {useFormValidationState} from '@react-stately/form';\nimport {useToggle} from '@react-aria/toggle';\nimport {ValidationResult} from '@react-types/shared';\n\nexport interface CheckboxAria extends ValidationResult {\n  /** Props for the label wrapper element. */\n  labelProps: LabelHTMLAttributes<HTMLLabelElement>,\n  /** Props for the input element. */\n  inputProps: InputHTMLAttributes<HTMLInputElement>,\n  /** Whether the checkbox is selected. */\n  isSelected: boolean,\n  /** Whether the checkbox is in a pressed state. */\n  isPressed: boolean,\n  /** Whether the checkbox is disabled. */\n  isDisabled: boolean,\n  /** Whether the checkbox is read only. */\n  isReadOnly: boolean\n}\n\n/**\n * Provides the behavior and accessibility implementation for a checkbox component.\n * Checkboxes allow users to select multiple items from a list of individual items, or\n * to mark one individual item as selected.\n * @param props - Props for the checkbox.\n * @param state - State for the checkbox, as returned by `useToggleState`.\n * @param inputRef - A ref for the HTML input element.\n */\nexport function useCheckbox(props: AriaCheckboxProps, state: ToggleState, inputRef: RefObject<HTMLInputElement>): CheckboxAria {\n  // Create validation state here because it doesn't make sense to add to general useToggleState.\n  let validationState = useFormValidationState({...props, value: state.isSelected});\n  let {isInvalid, validationErrors, validationDetails} = validationState.displayValidation;\n  let {labelProps, inputProps, isSelected, isPressed, isDisabled, isReadOnly} = useToggle({\n    ...props,\n    isInvalid\n  }, state, inputRef);\n\n  useFormValidation(props, validationState, inputRef);\n\n  let {isIndeterminate, isRequired, validationBehavior = 'aria'} = props;\n  useEffect(() => {\n    // indeterminate is a property, but it can only be set via javascript\n    // https://css-tricks.com/indeterminate-checkboxes/\n    if (inputRef.current) {\n      inputRef.current.indeterminate = !!isIndeterminate;\n    }\n  });\n\n  return {\n    labelProps,\n    inputProps: {\n      ...inputProps,\n      checked: isSelected,\n      'aria-required': (isRequired && validationBehavior === 'aria') || undefined,\n      required: isRequired && validationBehavior === 'native'\n    },\n    isSelected,\n    isPressed,\n    isDisabled,\n    isReadOnly,\n    isInvalid,\n    validationErrors,\n    validationDetails\n  };\n}\n"]},"metadata":{},"sourceType":"module"}