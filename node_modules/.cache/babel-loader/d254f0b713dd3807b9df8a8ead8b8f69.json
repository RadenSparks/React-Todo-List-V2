{"ast":null,"code":"import { useSafelyMouseToSubmenu as $d275435c250248f8$export$85ec83e04c95f50a } from \"./useSafelyMouseToSubmenu.mjs\";\nimport { useRef as $dXlYe$useRef, useCallback as $dXlYe$useCallback } from \"react\";\nimport { useId as $dXlYe$useId, useEffectEvent as $dXlYe$useEffectEvent, useLayoutEffect as $dXlYe$useLayoutEffect } from \"@react-aria/utils\";\nimport { useLocale as $dXlYe$useLocale } from \"@react-aria/i18n\";\n\n/*\n * Copyright 2023 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $0065b146e7192841$export$7138b0d059a6e743(props, state, ref) {\n  let {\n    parentMenuRef: parentMenuRef,\n    submenuRef: submenuRef,\n    type = 'menu',\n    isDisabled: isDisabled,\n    node: node,\n    delay = 200\n  } = props;\n  let submenuTriggerId = (0, $dXlYe$useId)();\n  let overlayId = (0, $dXlYe$useId)();\n  let {\n    direction: direction\n  } = (0, $dXlYe$useLocale)();\n  let openTimeout = (0, $dXlYe$useRef)();\n  let cancelOpenTimeout = (0, $dXlYe$useCallback)(() => {\n    if (openTimeout.current) {\n      clearTimeout(openTimeout.current);\n      openTimeout.current = undefined;\n    }\n  }, [openTimeout]);\n  let onSubmenuOpen = (0, $dXlYe$useEffectEvent)(focusStrategy => {\n    cancelOpenTimeout();\n    state.open(focusStrategy);\n  });\n  let onSubmenuClose = (0, $dXlYe$useEffectEvent)(() => {\n    cancelOpenTimeout();\n    state.close();\n  });\n  (0, $dXlYe$useLayoutEffect)(() => {\n    return () => {\n      cancelOpenTimeout();\n    };\n  }, [cancelOpenTimeout]);\n  let submenuKeyDown = e => {\n    switch (e.key) {\n      case 'ArrowLeft':\n        if (direction === 'ltr' && e.currentTarget.contains(e.target)) {\n          e.stopPropagation();\n          onSubmenuClose();\n          ref.current.focus();\n        }\n        break;\n      case 'ArrowRight':\n        if (direction === 'rtl' && e.currentTarget.contains(e.target)) {\n          e.stopPropagation();\n          onSubmenuClose();\n          ref.current.focus();\n        }\n        break;\n      case 'Escape':\n        e.stopPropagation();\n        state.closeAll();\n        break;\n    }\n  };\n  let submenuProps = {\n    id: overlayId,\n    'aria-label': node.textValue,\n    submenuLevel: state.submenuLevel,\n    ...(type === 'menu' && {\n      onClose: state.closeAll,\n      autoFocus: state.focusStrategy,\n      onKeyDown: submenuKeyDown\n    })\n  };\n  let submenuTriggerKeyDown = e => {\n    switch (e.key) {\n      case 'ArrowRight':\n        if (!isDisabled) {\n          if (direction === 'ltr') {\n            if (!state.isOpen) onSubmenuOpen('first');\n            if (type === 'menu' && !!(submenuRef === null || submenuRef === void 0 ? void 0 : submenuRef.current) && document.activeElement === (ref === null || ref === void 0 ? void 0 : ref.current)) submenuRef.current.focus();\n          } else if (state.isOpen) onSubmenuClose();else e.continuePropagation();\n        }\n        break;\n      case 'ArrowLeft':\n        if (!isDisabled) {\n          if (direction === 'rtl') {\n            if (!state.isOpen) onSubmenuOpen('first');\n            if (type === 'menu' && !!(submenuRef === null || submenuRef === void 0 ? void 0 : submenuRef.current) && document.activeElement === (ref === null || ref === void 0 ? void 0 : ref.current)) submenuRef.current.focus();\n          } else if (state.isOpen) onSubmenuClose();else e.continuePropagation();\n        }\n        break;\n      case 'Escape':\n        state.closeAll();\n        break;\n      default:\n        e.continuePropagation();\n        break;\n    }\n  };\n  let onPressStart = e => {\n    if (!isDisabled && (e.pointerType === 'virtual' || e.pointerType === 'keyboard'))\n      // If opened with a screen reader or keyboard, auto focus the first submenu item.\n      onSubmenuOpen('first');\n  };\n  let onPress = e => {\n    if (!isDisabled && (e.pointerType === 'touch' || e.pointerType === 'mouse'))\n      // For touch or on a desktop device with a small screen open on press up to possible problems with\n      // press up happening on the newly opened tray items\n      onSubmenuOpen();\n  };\n  let onHoverChange = isHovered => {\n    if (!isDisabled) {\n      if (isHovered && !state.isOpen) {\n        if (!openTimeout.current) openTimeout.current = setTimeout(() => {\n          onSubmenuOpen();\n        }, delay);\n      } else if (!isHovered) cancelOpenTimeout();\n    }\n  };\n  let onBlur = e => {\n    if (state.isOpen && parentMenuRef.current.contains(e.relatedTarget)) onSubmenuClose();\n  };\n  let shouldCloseOnInteractOutside = target => {\n    if (target !== ref.current) return true;\n    return false;\n  };\n  (0, $d275435c250248f8$export$85ec83e04c95f50a)({\n    menuRef: parentMenuRef,\n    submenuRef: submenuRef,\n    isOpen: state.isOpen,\n    isDisabled: isDisabled\n  });\n  return {\n    submenuTriggerProps: {\n      id: submenuTriggerId,\n      'aria-controls': state.isOpen ? overlayId : undefined,\n      'aria-haspopup': !isDisabled ? type : undefined,\n      'aria-expanded': state.isOpen ? 'true' : 'false',\n      onPressStart: onPressStart,\n      onPress: onPress,\n      onHoverChange: onHoverChange,\n      onKeyDown: submenuTriggerKeyDown,\n      onBlur: onBlur,\n      isOpen: state.isOpen\n    },\n    submenuProps: submenuProps,\n    popoverProps: {\n      isNonModal: true,\n      disableFocusManagement: true,\n      shouldCloseOnInteractOutside: shouldCloseOnInteractOutside\n    }\n  };\n}\nexport { $0065b146e7192841$export$7138b0d059a6e743 as useSubmenuTrigger };","map":{"version":3,"mappings":"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","names":["$0065b146e7192841$export$7138b0d059a6e743","props","state","ref","parentMenuRef","submenuRef","type","isDisabled","node","delay","submenuTriggerId","overlayId","direction","openTimeout","cancelOpenTimeout","current","clearTimeout","undefined","onSubmenuOpen","focusStrategy","open","onSubmenuClose","close","submenuKeyDown","e","key","currentTarget","contains","target","stopPropagation","focus","closeAll","submenuProps","id","textValue","submenuLevel","onClose","autoFocus","onKeyDown","submenuTriggerKeyDown","isOpen","document","activeElement","continuePropagation","onPressStart","pointerType","onPress","onHoverChange","isHovered","setTimeout","onBlur","relatedTarget","shouldCloseOnInteractOutside","menuRef","submenuTriggerProps","popoverProps","isNonModal","disableFocusManagement"],"sources":["D:\\Like, for real projects\\React-Todo-List-V2\\node_modules\\@react-aria\\menu\\dist\\packages\\@react-aria\\menu\\src\\useSubmenuTrigger.ts"],"sourcesContent":["/*\n * Copyright 2023 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaMenuItemProps} from './useMenuItem';\nimport {AriaMenuOptions} from './useMenu';\nimport type {AriaPopoverProps, OverlayProps} from '@react-aria/overlays';\nimport {FocusableElement, FocusStrategy, KeyboardEvent, PressEvent, Node as RSNode} from '@react-types/shared';\nimport {RefObject, useCallback, useRef} from 'react';\nimport type {SubmenuTriggerState} from '@react-stately/menu';\nimport {useEffectEvent, useId, useLayoutEffect} from '@react-aria/utils';\nimport {useLocale} from '@react-aria/i18n';\nimport {useSafelyMouseToSubmenu} from './useSafelyMouseToSubmenu';\n\nexport interface AriaSubmenuTriggerProps {\n  /** An object representing the submenu trigger menu item. Contains all the relevant information that makes up the menu item. */\n  node: RSNode<unknown>,\n  /** Whether the submenu trigger is disabled. */\n  isDisabled?: boolean,\n  /** The type of the contents that the submenu trigger opens. */\n  type?: 'dialog' | 'menu',\n  /** Ref of the menu that contains the submenu trigger. */\n  parentMenuRef: RefObject<HTMLElement>,\n  /** Ref of the submenu opened by the submenu trigger. */\n  submenuRef: RefObject<HTMLElement>,\n  /**\n   * The delay time in milliseconds for the submenu to appear after hovering over the trigger.\n   * @default 200\n   */\n  delay?: number\n}\n\ninterface SubmenuTriggerProps extends AriaMenuItemProps {\n  /** Whether the submenu trigger is in an expanded state. */\n  isOpen: boolean\n}\n\ninterface SubmenuProps<T> extends AriaMenuOptions<T> {\n  /** The level of the submenu. */\n  submenuLevel: number\n}\n\nexport interface SubmenuTriggerAria<T> {\n  /** Props for the submenu trigger menu item. */\n  submenuTriggerProps: SubmenuTriggerProps,\n  /** Props for the submenu controlled by the submenu trigger menu item. */\n  submenuProps: SubmenuProps<T>,\n  /** Props for the submenu's popover container. */\n  popoverProps: Pick<AriaPopoverProps, 'isNonModal' | 'shouldCloseOnInteractOutside'> & Pick<OverlayProps, 'disableFocusManagement'>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a submenu trigger and its associated submenu.\n * @param props - Props for the submenu trigger and refs attach to its submenu and parent menu.\n * @param state - State for the submenu trigger.\n * @param ref - Ref to the submenu trigger element.\n */\nexport function useSubmenuTrigger<T>(props: AriaSubmenuTriggerProps, state: SubmenuTriggerState, ref: RefObject<FocusableElement>): SubmenuTriggerAria<T> {\n  let {parentMenuRef, submenuRef, type = 'menu', isDisabled, node, delay = 200} = props;\n  let submenuTriggerId = useId();\n  let overlayId = useId();\n  let {direction} = useLocale();\n  let openTimeout = useRef<ReturnType<typeof setTimeout> | undefined>();\n  let cancelOpenTimeout = useCallback(() => {\n    if (openTimeout.current) {\n      clearTimeout(openTimeout.current);\n      openTimeout.current = undefined;\n    }\n  }, [openTimeout]);\n\n  let onSubmenuOpen = useEffectEvent((focusStrategy?: FocusStrategy) => {\n    cancelOpenTimeout();\n    state.open(focusStrategy);\n  });\n\n  let onSubmenuClose = useEffectEvent(() => {\n    cancelOpenTimeout();\n    state.close();\n  });\n\n  useLayoutEffect(() => {\n    return () => {\n      cancelOpenTimeout();\n    };\n  }, [cancelOpenTimeout]);\n\n  let submenuKeyDown = (e: KeyboardEvent) => {\n    switch (e.key) {\n      case 'ArrowLeft':\n        if (direction === 'ltr' && e.currentTarget.contains(e.target as Element)) {\n          e.stopPropagation();\n          onSubmenuClose();\n          ref.current.focus();\n        }\n        break;\n      case 'ArrowRight':\n        if (direction === 'rtl' && e.currentTarget.contains(e.target as Element)) {\n          e.stopPropagation();\n          onSubmenuClose();\n          ref.current.focus();\n        }\n        break;\n      case 'Escape':\n        e.stopPropagation();\n        state.closeAll();\n        break;\n    }\n  };\n\n  let submenuProps = {\n    id: overlayId,\n    'aria-label': node.textValue,\n    submenuLevel: state.submenuLevel,\n    ...(type === 'menu' && {\n      onClose: state.closeAll,\n      autoFocus: state.focusStrategy,\n      onKeyDown: submenuKeyDown\n    })\n  };\n\n  let submenuTriggerKeyDown = (e: KeyboardEvent) => {\n    switch (e.key) {\n      case 'ArrowRight':\n        if (!isDisabled) {\n          if (direction === 'ltr') {\n            if (!state.isOpen) {\n              onSubmenuOpen('first');\n            }\n\n            if (type === 'menu' && !!submenuRef?.current && document.activeElement === ref?.current) {\n              submenuRef.current.focus();\n            }\n          } else if (state.isOpen) {\n            onSubmenuClose();\n          } else {\n            e.continuePropagation();\n          }\n        }\n\n        break;\n      case 'ArrowLeft':\n        if (!isDisabled) {\n          if (direction === 'rtl') {\n            if (!state.isOpen) {\n              onSubmenuOpen('first');\n            }\n\n            if (type === 'menu' && !!submenuRef?.current && document.activeElement === ref?.current) {\n              submenuRef.current.focus();\n            }\n          } else if (state.isOpen) {\n            onSubmenuClose();\n          } else {\n            e.continuePropagation();\n          }\n        }\n        break;\n      case 'Escape':\n        state.closeAll();\n        break;\n      default:\n        e.continuePropagation();\n        break;\n    }\n  };\n\n  let onPressStart = (e: PressEvent) => {\n    if (!isDisabled && (e.pointerType === 'virtual' || e.pointerType === 'keyboard')) {\n      // If opened with a screen reader or keyboard, auto focus the first submenu item.\n      onSubmenuOpen('first');\n    }\n  };\n\n  let onPress = (e: PressEvent) => {\n    if (!isDisabled && (e.pointerType === 'touch' || e.pointerType === 'mouse')) {\n      // For touch or on a desktop device with a small screen open on press up to possible problems with\n      // press up happening on the newly opened tray items\n      onSubmenuOpen();\n    }\n  };\n\n  let onHoverChange = (isHovered) => {\n    if (!isDisabled) {\n      if (isHovered && !state.isOpen) {\n        if (!openTimeout.current) {\n          openTimeout.current = setTimeout(() => {\n            onSubmenuOpen();\n          }, delay);\n        }\n      } else if (!isHovered) {\n        cancelOpenTimeout();\n      }\n    }\n  };\n\n  let onBlur = (e) => {\n    if (state.isOpen && parentMenuRef.current.contains(e.relatedTarget)) {\n      onSubmenuClose();\n    }\n  };\n\n  let shouldCloseOnInteractOutside = (target) => {\n    if (target !== ref.current) {\n      return true;\n    }\n\n    return false;\n  };\n\n  useSafelyMouseToSubmenu({menuRef: parentMenuRef, submenuRef, isOpen: state.isOpen, isDisabled: isDisabled});\n\n  return {\n    submenuTriggerProps: {\n      id: submenuTriggerId,\n      'aria-controls': state.isOpen ? overlayId : undefined,\n      'aria-haspopup': !isDisabled ? type : undefined,\n      'aria-expanded': state.isOpen ? 'true' : 'false',\n      onPressStart,\n      onPress,\n      onHoverChange,\n      onKeyDown: submenuTriggerKeyDown,\n      onBlur,\n      isOpen: state.isOpen\n    },\n    submenuProps,\n    popoverProps: {\n      isNonModal: true,\n      disableFocusManagement: true,\n      shouldCloseOnInteractOutside\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}