{"ast":null,"code":"import { mergeProps as $bwqiF$mergeProps, filterDOMProps as $bwqiF$filterDOMProps } from \"@react-aria/utils\";\nimport { useFocusable as $bwqiF$useFocusable } from \"@react-aria/focus\";\nimport { usePress as $bwqiF$usePress } from \"@react-aria/interactions\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $701a24aa0da5b062$export$ea18c227d4417cc3(props, ref) {\n  let {\n    elementType = 'button',\n    isDisabled: isDisabled,\n    onPress: onPress,\n    onPressStart: onPressStart,\n    onPressEnd: onPressEnd,\n    onPressUp: onPressUp,\n    onPressChange: onPressChange,\n    preventFocusOnPress:\n    // @ts-ignore - undocumented\n    preventFocusOnPress,\n    allowFocusWhenDisabled:\n    // @ts-ignore - undocumented\n    allowFocusWhenDisabled,\n    // @ts-ignore\n    onClick: deprecatedOnClick,\n    href: href,\n    target: target,\n    rel: rel,\n    type = 'button'\n  } = props;\n  let additionalProps;\n  if (elementType === 'button') additionalProps = {\n    type: type,\n    disabled: isDisabled\n  };else additionalProps = {\n    role: 'button',\n    tabIndex: isDisabled ? undefined : 0,\n    href: elementType === 'a' && isDisabled ? undefined : href,\n    target: elementType === 'a' ? target : undefined,\n    type: elementType === 'input' ? type : undefined,\n    disabled: elementType === 'input' ? isDisabled : undefined,\n    'aria-disabled': !isDisabled || elementType === 'input' ? undefined : isDisabled,\n    rel: elementType === 'a' ? rel : undefined\n  };\n  let {\n    pressProps: pressProps,\n    isPressed: isPressed\n  } = (0, $bwqiF$usePress)({\n    onPressStart: onPressStart,\n    onPressEnd: onPressEnd,\n    onPressChange: onPressChange,\n    onPress: onPress,\n    onPressUp: onPressUp,\n    isDisabled: isDisabled,\n    preventFocusOnPress: preventFocusOnPress,\n    ref: ref\n  });\n  let {\n    focusableProps: focusableProps\n  } = (0, $bwqiF$useFocusable)(props, ref);\n  if (allowFocusWhenDisabled) focusableProps.tabIndex = isDisabled ? -1 : focusableProps.tabIndex;\n  let buttonProps = (0, $bwqiF$mergeProps)(focusableProps, pressProps, (0, $bwqiF$filterDOMProps)(props, {\n    labelable: true\n  }));\n  return {\n    isPressed: isPressed,\n    buttonProps: (0, $bwqiF$mergeProps)(additionalProps, buttonProps, {\n      'aria-haspopup': props['aria-haspopup'],\n      'aria-expanded': props['aria-expanded'],\n      'aria-controls': props['aria-controls'],\n      'aria-pressed': props['aria-pressed'],\n      onClick: e => {\n        if (deprecatedOnClick) {\n          deprecatedOnClick(e);\n          console.warn('onClick is deprecated, please use onPress');\n        }\n      }\n    })\n  };\n}\nexport { $701a24aa0da5b062$export$ea18c227d4417cc3 as useButton };","map":{"version":3,"mappings":";;;;AAAA;;;;;;;;;;;;AAgDO,SAASA,0CAAUC,KAAqC,EAAEC,GAAmB;EAClF,IAAI;IACFC,cAAc;IAAAC,YACdA,UAAU;IAAAC,SACVA,OAAO;IAAAC,cACPA,YAAY;IAAAC,YACZA,UAAU;IAAAC,WACVA,SAAS;IAAAC,eACTA,aAAa;IAAAC;IACb;IACAA,mBAAmB;IAAAC;IACnB;IACAA,sBAAsB;IACtB;IACAC,SAASC,iBAAiB;IAAAC,MAC1BA,IAAI;IAAAC,QACJA,MAAM;IAAAC,KACNA,GAAG;IACHC,OAAO;EAAA,CACR,GAAGhB;EACJ,IAAIiB;EACJ,IAAIf,gBAAgB,UAClBe,kBAAkB;UAChBD;IACAE,UAAUf;EACZ,OAEAc,kBAAkB;IAChBE,MAAM;IACNC,UAAUjB,aAAakB,YAAY;IACnCR,MAAMX,gBAAgB,OAAOC,aAAakB,YAAYR;IACtDC,QAAQZ,gBAAgB,MAAMY,SAASO;IACvCL,MAAMd,gBAAgB,UAAUc,OAAOK;IACvCH,UAAUhB,gBAAgB,UAAUC,aAAakB;IACjD,iBAAiB,CAAClB,cAAcD,gBAAgB,UAAUmB,YAAYlB;IACtEY,KAAKb,gBAAgB,MAAMa,MAAMM;EACnC;EAGF,IAAI;IAAAC,YAACA,UAAU;IAAAC,WAAEA;EAAS,CAAC,GAAG,mBAAO,EAAE;kBACrClB;gBACAC;mBACAE;aACAJ;eACAG;gBACAJ;yBACAM;SACAR;EACF;EAEA,IAAI;IAAAuB,gBAACA;EAAc,CAAC,GAAG,uBAAW,EAAExB,OAAOC;EAC3C,IAAIS,wBACFc,eAAeJ,QAAQ,GAAGjB,aAAa,KAAKqB,eAAeJ,QAAQ;EAErE,IAAIK,cAAc,qBAAS,EAAED,gBAAgBF,YAAY,yBAAa,EAAEtB,OAAO;IAAC0B,WAAW;EAAI;EAE/F,OAAO;eACLH;IACAE,aAAa,qBAAS,EAAER,iBAAiBQ,aAAa;MACpD,iBAAiBzB,KAAK,CAAC,gBAAgB;MACvC,iBAAiBA,KAAK,CAAC,gBAAgB;MACvC,iBAAiBA,KAAK,CAAC,gBAAgB;MACvC,gBAAgBA,KAAK,CAAC,eAAe;MACrCW,SAAUgB;QACR,IAAIf,mBAAmB;UACrBA,kBAAkBe;UAClBC,QAAQC,IAAI,CAAC;QACf;MACF;IACF;EACF;AACF","names":["$701a24aa0da5b062$export$ea18c227d4417cc3","props","ref","elementType","isDisabled","onPress","onPressStart","onPressEnd","onPressUp","onPressChange","preventFocusOnPress","allowFocusWhenDisabled","onClick","deprecatedOnClick","href","target","rel","type","additionalProps","disabled","role","tabIndex","undefined","pressProps","isPressed","focusableProps","buttonProps","labelable","e","console","warn"],"sources":["D:\\Like, for real projects\\React-Todo-List-V2\\node_modules\\@react-aria\\button\\dist\\packages\\@react-aria\\button\\src\\useButton.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  AnchorHTMLAttributes,\n  ButtonHTMLAttributes,\n  ElementType,\n  HTMLAttributes,\n  InputHTMLAttributes,\n  RefObject\n} from 'react';\nimport {AriaButtonProps} from '@react-types/button';\nimport {DOMAttributes} from '@react-types/shared';\nimport {filterDOMProps, mergeProps} from '@react-aria/utils';\nimport {useFocusable} from '@react-aria/focus';\nimport {usePress} from '@react-aria/interactions';\n\nexport interface AriaButtonOptions<E extends ElementType> extends Omit<AriaButtonProps<E>, 'children'> {}\n\nexport interface ButtonAria<T> {\n  /** Props for the button element. */\n  buttonProps: T,\n  /** Whether the button is currently pressed. */\n  isPressed: boolean\n}\n\n// Order with overrides is important: 'button' should be default\nexport function useButton(props: AriaButtonOptions<'button'>, ref: RefObject<HTMLButtonElement>): ButtonAria<ButtonHTMLAttributes<HTMLButtonElement>>;\nexport function useButton(props: AriaButtonOptions<'a'>, ref: RefObject<HTMLAnchorElement>): ButtonAria<AnchorHTMLAttributes<HTMLAnchorElement>>;\nexport function useButton(props: AriaButtonOptions<'div'>, ref: RefObject<HTMLDivElement>): ButtonAria<HTMLAttributes<HTMLDivElement>>;\nexport function useButton(props: AriaButtonOptions<'input'>, ref: RefObject<HTMLInputElement>): ButtonAria<InputHTMLAttributes<HTMLInputElement>>;\nexport function useButton(props: AriaButtonOptions<'span'>, ref: RefObject<HTMLSpanElement>): ButtonAria<HTMLAttributes<HTMLSpanElement>>;\nexport function useButton(props: AriaButtonOptions<ElementType>, ref: RefObject<Element>): ButtonAria<DOMAttributes>;\n/**\n * Provides the behavior and accessibility implementation for a button component. Handles mouse, keyboard, and touch interactions,\n * focus behavior, and ARIA props for both native button elements and custom element types.\n * @param props - Props to be applied to the button.\n * @param ref - A ref to a DOM element for the button.\n */\nexport function useButton(props: AriaButtonOptions<ElementType>, ref: RefObject<any>): ButtonAria<HTMLAttributes<any>> {\n  let {\n    elementType = 'button',\n    isDisabled,\n    onPress,\n    onPressStart,\n    onPressEnd,\n    onPressUp,\n    onPressChange,\n    // @ts-ignore - undocumented\n    preventFocusOnPress,\n    // @ts-ignore - undocumented\n    allowFocusWhenDisabled,\n    // @ts-ignore\n    onClick: deprecatedOnClick,\n    href,\n    target,\n    rel,\n    type = 'button'\n  } = props;\n  let additionalProps;\n  if (elementType === 'button') {\n    additionalProps = {\n      type,\n      disabled: isDisabled\n    };\n  } else {\n    additionalProps = {\n      role: 'button',\n      tabIndex: isDisabled ? undefined : 0,\n      href: elementType === 'a' && isDisabled ? undefined : href,\n      target: elementType === 'a' ? target : undefined,\n      type: elementType === 'input' ? type : undefined,\n      disabled: elementType === 'input' ? isDisabled : undefined,\n      'aria-disabled': !isDisabled || elementType === 'input' ? undefined : isDisabled,\n      rel: elementType === 'a' ? rel : undefined\n    };\n  }\n\n  let {pressProps, isPressed} = usePress({\n    onPressStart,\n    onPressEnd,\n    onPressChange,\n    onPress,\n    onPressUp,\n    isDisabled,\n    preventFocusOnPress,\n    ref\n  });\n\n  let {focusableProps} = useFocusable(props, ref);\n  if (allowFocusWhenDisabled) {\n    focusableProps.tabIndex = isDisabled ? -1 : focusableProps.tabIndex;\n  }\n  let buttonProps = mergeProps(focusableProps, pressProps, filterDOMProps(props, {labelable: true}));\n\n  return {\n    isPressed, // Used to indicate press state for visual\n    buttonProps: mergeProps(additionalProps, buttonProps, {\n      'aria-haspopup': props['aria-haspopup'],\n      'aria-expanded': props['aria-expanded'],\n      'aria-controls': props['aria-controls'],\n      'aria-pressed': props['aria-pressed'],\n      onClick: (e) => {\n        if (deprecatedOnClick) {\n          deprecatedOnClick(e);\n          console.warn('onClick is deprecated, please use onPress');\n        }\n      }\n    })\n  };\n}\n"]},"metadata":{},"sourceType":"module"}