{"ast":null,"code":"import { useDateFieldState as $3c0fc76039f1c516$export$60e84778edff6d26 } from \"./useDateFieldState.mjs\";\nimport { Time as $2PRh3$Time, toZoned as $2PRh3$toZoned, toTime as $2PRh3$toTime, GregorianCalendar as $2PRh3$GregorianCalendar, today as $2PRh3$today, getLocalTimeZone as $2PRh3$getLocalTimeZone, toCalendarDateTime as $2PRh3$toCalendarDateTime } from \"@internationalized/date\";\nimport { useMemo as $2PRh3$useMemo, useCallback as $2PRh3$useCallback } from \"react\";\nimport { useControlledState as $2PRh3$useControlledState } from \"@react-stately/utils\";\n\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $eff5d8ee529ac4bb$export$fd53cef0cc796101(props) {\n  let {\n    placeholderValue = new (0, $2PRh3$Time)(),\n    minValue: minValue,\n    maxValue: maxValue,\n    granularity: granularity,\n    validate: validate\n  } = props;\n  let [value, setValue] = (0, $2PRh3$useControlledState)(props.value, props.defaultValue, props.onChange);\n  let v = value || placeholderValue;\n  let day = v && 'day' in v ? v : undefined;\n  let defaultValueTimeZone = props.defaultValue && 'timeZone' in props.defaultValue ? props.defaultValue.timeZone : undefined;\n  let placeholderDate = (0, $2PRh3$useMemo)(() => {\n    let valueTimeZone = v && 'timeZone' in v ? v.timeZone : undefined;\n    return (valueTimeZone || defaultValueTimeZone) && placeholderValue ? (0, $2PRh3$toZoned)($eff5d8ee529ac4bb$var$convertValue(placeholderValue), valueTimeZone || defaultValueTimeZone) : $eff5d8ee529ac4bb$var$convertValue(placeholderValue);\n  }, [placeholderValue, v, defaultValueTimeZone]);\n  let minDate = (0, $2PRh3$useMemo)(() => $eff5d8ee529ac4bb$var$convertValue(minValue, day), [minValue, day]);\n  let maxDate = (0, $2PRh3$useMemo)(() => $eff5d8ee529ac4bb$var$convertValue(maxValue, day), [maxValue, day]);\n  let timeValue = (0, $2PRh3$useMemo)(() => value && 'day' in value ? (0, $2PRh3$toTime)(value) : value, [value]);\n  let dateTime = (0, $2PRh3$useMemo)(() => value == null ? null : $eff5d8ee529ac4bb$var$convertValue(value), [value]);\n  let onChange = newValue => {\n    setValue(day || defaultValueTimeZone ? newValue : newValue && (0, $2PRh3$toTime)(newValue));\n  };\n  let state = (0, $3c0fc76039f1c516$export$60e84778edff6d26)({\n    ...props,\n    value: dateTime,\n    defaultValue: undefined,\n    minValue: minDate,\n    maxValue: maxDate,\n    onChange: onChange,\n    granularity: granularity || 'minute',\n    maxGranularity: 'hour',\n    placeholderValue: placeholderDate,\n    // Calendar should not matter for time fields.\n    createCalendar: () => new (0, $2PRh3$GregorianCalendar)(),\n    validate: (0, $2PRh3$useCallback)(() => validate === null || validate === void 0 ? void 0 : validate(value), [validate, value])\n  });\n  return {\n    ...state,\n    timeValue: timeValue\n  };\n}\nfunction $eff5d8ee529ac4bb$var$convertValue(value) {\n  let date = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (0, $2PRh3$today)((0, $2PRh3$getLocalTimeZone)());\n  if (!value) return null;\n  if ('day' in value) return value;\n  return (0, $2PRh3$toCalendarDateTime)(date, value);\n}\nexport { $eff5d8ee529ac4bb$export$fd53cef0cc796101 as useTimeFieldState };","map":{"version":3,"mappings":";;;;;AAAA;;;;;;;;;;;;AAiCO,SAASA,0CAAmDC,KAA+B;EAChG,IAAI;IACFC,mBAAmB,KAAI,cAAG;IAAAC,UAC1BA,QAAQ;IAAAC,UACRA,QAAQ;IAAAC,aACRA,WAAW;IAAAC,UACXA;EAAQ,CACT,GAAGL;EAEJ,IAAI,CAACM,OAAOC,SAAS,GAAG,6BAAiB,EACvCP,MAAMM,KAAK,EACXN,MAAMQ,YAAY,EAClBR,MAAMS,QAAQ;EAGhB,IAAIC,IAAIJ,SAASL;EACjB,IAAIU,MAAMD,KAAK,SAASA,IAAIA,IAAIE;EAChC,IAAIC,uBAAuBb,MAAMQ,YAAY,IAAI,cAAcR,MAAMQ,YAAY,GAAGR,MAAMQ,YAAY,CAACM,QAAQ,GAAGF;EAClH,IAAIG,kBAAkB,kBAAM,EAAE;IAC5B,IAAIC,gBAAgBN,KAAK,cAAcA,IAAIA,EAAEI,QAAQ,GAAGF;IAExD,OAAO,CAACI,iBAAiBH,oBAAmB,KAAMZ,mBAAmB,kBAAM,EAAEgB,mCAAahB,mBAAmBe,iBAAiBH,wBAAwBI,mCAAahB;EACrK,GAAG,CAACA,kBAAkBS,GAAGG,qBAAqB;EAC9C,IAAIK,UAAU,kBAAM,EAAE,MAAMD,mCAAaf,UAAUS,MAAM,CAACT,UAAUS,IAAI;EACxE,IAAIQ,UAAU,kBAAM,EAAE,MAAMF,mCAAad,UAAUQ,MAAM,CAACR,UAAUQ,IAAI;EAExE,IAAIS,YAAY,kBAAM,EAAE,MAAMd,SAAS,SAASA,QAAQ,iBAAK,EAAEA,SAASA,OAAe,CAACA,MAAM;EAC9F,IAAIe,WAAW,kBAAM,EAAE,MAAMf,SAAS,OAAO,OAAOW,mCAAaX,QAAQ,CAACA,MAAM;EAChF,IAAIG,WAAWa;IACbf,SAASI,OAAOE,uBAAuBS,WAAWA,YAAY,iBAAK,EAAEA;EACvE;EAEA,IAAIC,QAAQ,6CAAgB,EAAE;IAC5B,GAAGvB,KAAK;IACRM,OAAOe;IACPb,cAAcI;IACdV,UAAUgB;IACVf,UAAUgB;cACVV;IACAL,aAAaA,eAAe;IAC5BoB,gBAAgB;IAChBvB,kBAAkBc;IAClB;IACAU,gBAAgBA,MAAM,KAAI,2BAAgB;IAC1CpB,UAAU,sBAAU,EAAE,MAAMA,6DAAWC,QAAe,CAACD,UAAUC,MAAM;EACzE;EAEA,OAAO;IACL,GAAGiB,KAAK;eACRH;EACF;AACF;AAEA,SAASH,mCAAaX,KAAgB,EAA6C;EAAA,IAA3CoB,2EAAkB,gBAAI,EAAE,2BAAe,IAAI;EACjF,IAAI,CAACpB,OACH,OAAO;EAGT,IAAI,SAASA,OACX,OAAOA;EAGT,OAAO,6BAAiB,EAAEoB,MAAMpB;AAClC","names":["$eff5d8ee529ac4bb$export$fd53cef0cc796101","props","placeholderValue","minValue","maxValue","granularity","validate","value","setValue","defaultValue","onChange","v","day","undefined","defaultValueTimeZone","timeZone","placeholderDate","valueTimeZone","$eff5d8ee529ac4bb$var$convertValue","minDate","maxDate","timeValue","dateTime","newValue","state","maxGranularity","createCalendar","date"],"sources":["D:\\Like, for real projects\\React-Todo-List-V2\\node_modules\\@react-stately\\datepicker\\dist\\packages\\@react-stately\\datepicker\\src\\useTimeFieldState.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DateFieldState, useDateFieldState} from '.';\nimport {DateValue, TimePickerProps, TimeValue} from '@react-types/datepicker';\nimport {getLocalTimeZone, GregorianCalendar, Time, toCalendarDateTime, today, toTime, toZoned} from '@internationalized/date';\nimport {useCallback, useMemo} from 'react';\nimport {useControlledState} from '@react-stately/utils';\n\nexport interface TimeFieldStateOptions<T extends TimeValue = TimeValue> extends TimePickerProps<T> {\n  /** The locale to display and edit the value according to. */\n  locale: string\n}\n\nexport interface TimeFieldState extends DateFieldState {\n  /** The current time value. */\n  timeValue: Time\n}\n\n/**\n * Provides state management for a time field component.\n * A time field allows users to enter and edit time values using a keyboard.\n * Each part of a time value is displayed in an individually editable segment.\n */\nexport function useTimeFieldState<T extends TimeValue = TimeValue>(props: TimeFieldStateOptions<T>): TimeFieldState {\n  let {\n    placeholderValue = new Time(),\n    minValue,\n    maxValue,\n    granularity,\n    validate\n  } = props;\n\n  let [value, setValue] = useControlledState<TimeValue>(\n    props.value,\n    props.defaultValue,\n    props.onChange\n  );\n\n  let v = value || placeholderValue;\n  let day = v && 'day' in v ? v : undefined;\n  let defaultValueTimeZone = props.defaultValue && 'timeZone' in props.defaultValue ? props.defaultValue.timeZone : undefined;\n  let placeholderDate = useMemo(() => {\n    let valueTimeZone = v && 'timeZone' in v ? v.timeZone : undefined;\n\n    return (valueTimeZone || defaultValueTimeZone) && placeholderValue ? toZoned(convertValue(placeholderValue), valueTimeZone || defaultValueTimeZone) : convertValue(placeholderValue);\n  }, [placeholderValue, v, defaultValueTimeZone]);\n  let minDate = useMemo(() => convertValue(minValue, day), [minValue, day]);\n  let maxDate = useMemo(() => convertValue(maxValue, day), [maxValue, day]);\n\n  let timeValue = useMemo(() => value && 'day' in value ? toTime(value) : value as Time, [value]);\n  let dateTime = useMemo(() => value == null ? null : convertValue(value), [value]);\n  let onChange = newValue => {\n    setValue(day || defaultValueTimeZone ? newValue : newValue && toTime(newValue));\n  };\n\n  let state = useDateFieldState({\n    ...props,\n    value: dateTime,\n    defaultValue: undefined,\n    minValue: minDate,\n    maxValue: maxDate,\n    onChange,\n    granularity: granularity || 'minute',\n    maxGranularity: 'hour',\n    placeholderValue: placeholderDate,\n    // Calendar should not matter for time fields.\n    createCalendar: () => new GregorianCalendar(),\n    validate: useCallback(() => validate?.(value as any), [validate, value])\n  });\n\n  return {\n    ...state,\n    timeValue\n  };\n}\n\nfunction convertValue(value: TimeValue, date: DateValue = today(getLocalTimeZone())) {\n  if (!value) {\n    return null;\n  }\n\n  if ('day' in value) {\n    return value;\n  }\n\n  return toCalendarDateTime(date, value);\n}\n"]},"metadata":{},"sourceType":"module"}