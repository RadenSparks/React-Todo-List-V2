{"ast":null,"code":"import { focusManagerSymbol as $16f0b7bb276bc17e$export$7b3062cd49e80452, roleSymbol as $16f0b7bb276bc17e$export$300019f83c56d282 } from \"./useDateField.mjs\";\nimport $eIQ1H$intlStringsmodulejs from \"./intlStrings.mjs\";\nimport { useDatePickerGroup as $3dfb0f96be0d6a08$export$4a931266a3838b86 } from \"./useDatePickerGroup.mjs\";\nimport { createFocusManager as $eIQ1H$createFocusManager } from \"@react-aria/focus\";\nimport { DEFAULT_VALIDATION_RESULT as $eIQ1H$DEFAULT_VALIDATION_RESULT, privateValidationStateProp as $eIQ1H$privateValidationStateProp, mergeValidation as $eIQ1H$mergeValidation } from \"@react-stately/form\";\nimport { useDescription as $eIQ1H$useDescription, useId as $eIQ1H$useId, filterDOMProps as $eIQ1H$filterDOMProps, mergeProps as $eIQ1H$mergeProps } from \"@react-aria/utils\";\nimport { useMemo as $eIQ1H$useMemo, useRef as $eIQ1H$useRef } from \"react\";\nimport { useField as $eIQ1H$useField } from \"@react-aria/label\";\nimport { useFocusWithin as $eIQ1H$useFocusWithin } from \"@react-aria/interactions\";\nimport { useLocalizedStringFormatter as $eIQ1H$useLocalizedStringFormatter, useLocale as $eIQ1H$useLocale } from \"@react-aria/i18n\";\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nfunction $887cac91b7cc8801$export$12fd5f0e9f4bb192(props, state, ref) {\n  var _state_value, _state_value1;\n  let stringFormatter = (0, $eIQ1H$useLocalizedStringFormatter)((0, $parcel$interopDefault($eIQ1H$intlStringsmodulejs)), '@react-aria/datepicker');\n  let {\n    isInvalid: isInvalid,\n    validationErrors: validationErrors,\n    validationDetails: validationDetails\n  } = state.displayValidation;\n  let {\n    labelProps: labelProps,\n    fieldProps: fieldProps,\n    descriptionProps: descriptionProps,\n    errorMessageProps: errorMessageProps\n  } = (0, $eIQ1H$useField)({\n    ...props,\n    labelElementType: 'span',\n    isInvalid: isInvalid,\n    errorMessage: props.errorMessage || validationErrors\n  });\n  let labelledBy = fieldProps['aria-labelledby'] || fieldProps.id;\n  let {\n    locale: locale\n  } = (0, $eIQ1H$useLocale)();\n  let range = state.formatValue(locale, {\n    month: 'long'\n  });\n  let description = range ? stringFormatter.format('selectedRangeDescription', {\n    startDate: range.start,\n    endDate: range.end\n  }) : '';\n  let descProps = (0, $eIQ1H$useDescription)(description);\n  let startFieldProps = {\n    'aria-label': stringFormatter.format('startDate'),\n    'aria-labelledby': labelledBy\n  };\n  let endFieldProps = {\n    'aria-label': stringFormatter.format('endDate'),\n    'aria-labelledby': labelledBy\n  };\n  let buttonId = (0, $eIQ1H$useId)();\n  let dialogId = (0, $eIQ1H$useId)();\n  let groupProps = (0, $3dfb0f96be0d6a08$export$4a931266a3838b86)(state, ref);\n  let ariaDescribedBy = [descProps['aria-describedby'], fieldProps['aria-describedby']].filter(Boolean).join(' ') || undefined;\n  let focusManager = (0, $eIQ1H$useMemo)(() => (0, $eIQ1H$createFocusManager)(ref, {\n    // Exclude the button from the focus manager.\n    accept: element => element.id !== buttonId\n  }), [ref, buttonId]);\n  let commonFieldProps = {\n    [(0, $16f0b7bb276bc17e$export$7b3062cd49e80452)]: focusManager,\n    [(0, $16f0b7bb276bc17e$export$300019f83c56d282)]: 'presentation',\n    'aria-describedby': ariaDescribedBy,\n    placeholderValue: props.placeholderValue,\n    hideTimeZone: props.hideTimeZone,\n    hourCycle: props.hourCycle,\n    granularity: props.granularity,\n    shouldForceLeadingZeros: props.shouldForceLeadingZeros,\n    isDisabled: props.isDisabled,\n    isReadOnly: props.isReadOnly,\n    isRequired: props.isRequired,\n    validationBehavior: props.validationBehavior\n  };\n  let domProps = (0, $eIQ1H$filterDOMProps)(props);\n  let {\n    focusWithinProps: focusWithinProps\n  } = (0, $eIQ1H$useFocusWithin)({\n    ...props,\n    isDisabled: state.isOpen,\n    onBlurWithin: props.onBlur,\n    onFocusWithin: props.onFocus,\n    onFocusWithinChange: props.onFocusChange\n  });\n  let startFieldValidation = (0, $eIQ1H$useRef)((0, $eIQ1H$DEFAULT_VALIDATION_RESULT));\n  let endFieldValidation = (0, $eIQ1H$useRef)((0, $eIQ1H$DEFAULT_VALIDATION_RESULT));\n  return {\n    groupProps: (0, $eIQ1H$mergeProps)(domProps, groupProps, fieldProps, descProps, focusWithinProps, {\n      role: 'group',\n      'aria-disabled': props.isDisabled || null,\n      'aria-describedby': ariaDescribedBy,\n      onKeyDown(e) {\n        if (state.isOpen) return;\n        if (props.onKeyDown) props.onKeyDown(e);\n      },\n      onKeyUp(e) {\n        if (state.isOpen) return;\n        if (props.onKeyUp) props.onKeyUp(e);\n      }\n    }),\n    labelProps: {\n      ...labelProps,\n      onClick: () => {\n        focusManager.focusFirst();\n      }\n    },\n    buttonProps: {\n      ...descProps,\n      id: buttonId,\n      'aria-haspopup': 'dialog',\n      'aria-label': stringFormatter.format('calendar'),\n      'aria-labelledby': `${buttonId} ${labelledBy}`,\n      'aria-describedby': ariaDescribedBy,\n      'aria-expanded': state.isOpen,\n      isDisabled: props.isDisabled || props.isReadOnly,\n      onPress: () => state.setOpen(true)\n    },\n    dialogProps: {\n      id: dialogId,\n      'aria-labelledby': `${buttonId} ${labelledBy}`\n    },\n    startFieldProps: {\n      ...startFieldProps,\n      ...commonFieldProps,\n      value: (_state_value = state.value) === null || _state_value === void 0 ? void 0 : _state_value.start,\n      onChange: start => state.setDateTime('start', start),\n      autoFocus: props.autoFocus,\n      name: props.startName,\n      [(0, $eIQ1H$privateValidationStateProp)]: {\n        realtimeValidation: state.realtimeValidation,\n        displayValidation: state.displayValidation,\n        updateValidation(e) {\n          startFieldValidation.current = e;\n          state.updateValidation((0, $eIQ1H$mergeValidation)(e, endFieldValidation.current));\n        },\n        resetValidation: state.resetValidation,\n        commitValidation: state.commitValidation\n      }\n    },\n    endFieldProps: {\n      ...endFieldProps,\n      ...commonFieldProps,\n      value: (_state_value1 = state.value) === null || _state_value1 === void 0 ? void 0 : _state_value1.end,\n      onChange: end => state.setDateTime('end', end),\n      name: props.endName,\n      [(0, $eIQ1H$privateValidationStateProp)]: {\n        realtimeValidation: state.realtimeValidation,\n        displayValidation: state.displayValidation,\n        updateValidation(e) {\n          endFieldValidation.current = e;\n          state.updateValidation((0, $eIQ1H$mergeValidation)(startFieldValidation.current, e));\n        },\n        resetValidation: state.resetValidation,\n        commitValidation: state.commitValidation\n      }\n    },\n    descriptionProps: descriptionProps,\n    errorMessageProps: errorMessageProps,\n    calendarProps: {\n      autoFocus: true,\n      value: state.dateRange,\n      onChange: state.setDateRange,\n      minValue: props.minValue,\n      maxValue: props.maxValue,\n      isDisabled: props.isDisabled,\n      isReadOnly: props.isReadOnly,\n      isDateUnavailable: props.isDateUnavailable,\n      allowsNonContiguousRanges: props.allowsNonContiguousRanges,\n      defaultFocusedValue: state.dateRange ? undefined : props.placeholderValue,\n      isInvalid: state.isInvalid,\n      errorMessage: typeof props.errorMessage === 'function' ? props.errorMessage(state.displayValidation) : props.errorMessage || state.displayValidation.validationErrors.join(' ')\n    },\n    isInvalid: isInvalid,\n    validationErrors: validationErrors,\n    validationDetails: validationDetails\n  };\n}\nexport { $887cac91b7cc8801$export$12fd5f0e9f4bb192 as useDateRangePicker };","map":{"version":3,"mappings":"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","names":["$887cac91b7cc8801$export$12fd5f0e9f4bb192","props","state","ref","_state_value","_state_value1","stringFormatter","isInvalid","validationErrors","validationDetails","displayValidation","labelProps","fieldProps","descriptionProps","errorMessageProps","labelElementType","errorMessage","labelledBy","id","locale","range","formatValue","month","description","format","startDate","start","endDate","end","descProps","startFieldProps","endFieldProps","buttonId","dialogId","groupProps","ariaDescribedBy","filter","Boolean","join","undefined","focusManager","accept","element","commonFieldProps","placeholderValue","hideTimeZone","hourCycle","granularity","shouldForceLeadingZeros","isDisabled","isReadOnly","isRequired","validationBehavior","domProps","focusWithinProps","isOpen","onBlurWithin","onBlur","onFocusWithin","onFocus","onFocusWithinChange","onFocusChange","startFieldValidation","endFieldValidation","role","onKeyDown","e","onKeyUp","onClick","focusFirst","buttonProps","onPress","setOpen","dialogProps","value","onChange","setDateTime","autoFocus","name","startName","realtimeValidation","updateValidation","current","resetValidation","commitValidation","endName","calendarProps","dateRange","setDateRange","minValue","maxValue","isDateUnavailable","allowsNonContiguousRanges","defaultFocusedValue"],"sources":["D:\\Like, for real projects\\React-Todo-List-V2\\node_modules\\@react-aria\\datepicker\\dist\\packages\\@react-aria\\datepicker\\src\\useDateRangePicker.ts"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaButtonProps} from '@react-types/button';\nimport {AriaDatePickerProps, AriaDateRangePickerProps, DateValue} from '@react-types/datepicker';\nimport {AriaDialogProps} from '@react-types/dialog';\nimport {createFocusManager} from '@react-aria/focus';\nimport {DateRangePickerState} from '@react-stately/datepicker';\nimport {DEFAULT_VALIDATION_RESULT, mergeValidation, privateValidationStateProp} from '@react-stately/form';\nimport {DOMAttributes, GroupDOMAttributes, KeyboardEvent, ValidationResult} from '@react-types/shared';\nimport {filterDOMProps, mergeProps, useDescription, useId} from '@react-aria/utils';\nimport {focusManagerSymbol, roleSymbol} from './useDateField';\n// @ts-ignore\nimport intlMessages from '../intl/*.json';\nimport {RangeCalendarProps} from '@react-types/calendar';\nimport {RefObject, useMemo, useRef} from 'react';\nimport {useDatePickerGroup} from './useDatePickerGroup';\nimport {useField} from '@react-aria/label';\nimport {useFocusWithin} from '@react-aria/interactions';\nimport {useLocale, useLocalizedStringFormatter} from '@react-aria/i18n';\n\nexport interface DateRangePickerAria extends ValidationResult {\n  /** Props for the date range picker's visible label element, if any. */\n  labelProps: DOMAttributes,\n  /** Props for the grouping element containing the date fields and button. */\n  groupProps: GroupDOMAttributes,\n  /** Props for the start date field. */\n  startFieldProps: AriaDatePickerProps<DateValue>,\n  /** Props for the end date field. */\n  endFieldProps: AriaDatePickerProps<DateValue>,\n  /** Props for the popover trigger button. */\n  buttonProps: AriaButtonProps,\n  /** Props for the description element, if any. */\n  descriptionProps: DOMAttributes,\n  /** Props for the error message element, if any. */\n  errorMessageProps: DOMAttributes,\n  /** Props for the popover dialog. */\n  dialogProps: AriaDialogProps,\n  /** Props for the range calendar within the popover dialog. */\n  calendarProps: RangeCalendarProps<DateValue>\n}\n\n/**\n * Provides the behavior and accessibility implementation for a date picker component.\n * A date range picker combines two DateFields and a RangeCalendar popover to allow\n * users to enter or select a date and time range.\n */\nexport function useDateRangePicker<T extends DateValue>(props: AriaDateRangePickerProps<T>, state: DateRangePickerState, ref: RefObject<Element>): DateRangePickerAria {\n  let stringFormatter = useLocalizedStringFormatter(intlMessages, '@react-aria/datepicker');\n  let {isInvalid, validationErrors, validationDetails} = state.displayValidation;\n  let {labelProps, fieldProps, descriptionProps, errorMessageProps} = useField({\n    ...props,\n    labelElementType: 'span',\n    isInvalid,\n    errorMessage: props.errorMessage || validationErrors\n  });\n\n  let labelledBy = fieldProps['aria-labelledby'] || fieldProps.id;\n\n  let {locale} = useLocale();\n  let range = state.formatValue(locale, {month: 'long'});\n  let description = range ? stringFormatter.format('selectedRangeDescription', {startDate: range.start, endDate: range.end}) : '';\n  let descProps = useDescription(description);\n\n  let startFieldProps = {\n    'aria-label': stringFormatter.format('startDate'),\n    'aria-labelledby': labelledBy\n  };\n\n  let endFieldProps = {\n    'aria-label': stringFormatter.format('endDate'),\n    'aria-labelledby': labelledBy\n  };\n\n  let buttonId = useId();\n  let dialogId = useId();\n\n  let groupProps = useDatePickerGroup(state, ref);\n\n  let ariaDescribedBy = [descProps['aria-describedby'], fieldProps['aria-describedby']].filter(Boolean).join(' ') || undefined;\n  let focusManager = useMemo(() => createFocusManager(ref, {\n    // Exclude the button from the focus manager.\n    accept: element => element.id !== buttonId\n  }), [ref, buttonId]);\n\n  let commonFieldProps = {\n    [focusManagerSymbol]: focusManager,\n    [roleSymbol]: 'presentation',\n    'aria-describedby': ariaDescribedBy,\n    placeholderValue: props.placeholderValue,\n    hideTimeZone: props.hideTimeZone,\n    hourCycle: props.hourCycle,\n    granularity: props.granularity,\n    shouldForceLeadingZeros: props.shouldForceLeadingZeros,\n    isDisabled: props.isDisabled,\n    isReadOnly: props.isReadOnly,\n    isRequired: props.isRequired,\n    validationBehavior: props.validationBehavior\n  };\n\n  let domProps = filterDOMProps(props);\n\n  let {focusWithinProps} = useFocusWithin({\n    ...props,\n    isDisabled: state.isOpen,\n    onBlurWithin: props.onBlur,\n    onFocusWithin: props.onFocus,\n    onFocusWithinChange: props.onFocusChange\n  });\n\n  let startFieldValidation = useRef(DEFAULT_VALIDATION_RESULT);\n  let endFieldValidation = useRef(DEFAULT_VALIDATION_RESULT);\n\n  return {\n    groupProps: mergeProps(domProps, groupProps, fieldProps, descProps, focusWithinProps, {\n      role: 'group' as const,\n      'aria-disabled': props.isDisabled || null,\n      'aria-describedby': ariaDescribedBy,\n      onKeyDown(e: KeyboardEvent) {\n        if (state.isOpen) {\n          return;\n        }\n\n        if (props.onKeyDown) {\n          props.onKeyDown(e);\n        }\n      },\n      onKeyUp(e: KeyboardEvent) {\n        if (state.isOpen) {\n          return;\n        }\n\n        if (props.onKeyUp) {\n          props.onKeyUp(e);\n        }\n      }\n    }),\n    labelProps: {\n      ...labelProps,\n      onClick: () => {\n        focusManager.focusFirst();\n      }\n    },\n    buttonProps: {\n      ...descProps,\n      id: buttonId,\n      'aria-haspopup': 'dialog',\n      'aria-label': stringFormatter.format('calendar'),\n      'aria-labelledby': `${buttonId} ${labelledBy}`,\n      'aria-describedby': ariaDescribedBy,\n      'aria-expanded': state.isOpen,\n      isDisabled: props.isDisabled || props.isReadOnly,\n      onPress: () => state.setOpen(true)\n    },\n    dialogProps: {\n      id: dialogId,\n      'aria-labelledby': `${buttonId} ${labelledBy}`\n    },\n    startFieldProps: {\n      ...startFieldProps,\n      ...commonFieldProps,\n      value: state.value?.start,\n      onChange: start => state.setDateTime('start', start),\n      autoFocus: props.autoFocus,\n      name: props.startName,\n      [privateValidationStateProp]: {\n        realtimeValidation: state.realtimeValidation,\n        displayValidation: state.displayValidation,\n        updateValidation(e) {\n          startFieldValidation.current = e;\n          state.updateValidation(mergeValidation(e, endFieldValidation.current));\n        },\n        resetValidation: state.resetValidation,\n        commitValidation: state.commitValidation\n      }\n    },\n    endFieldProps: {\n      ...endFieldProps,\n      ...commonFieldProps,\n      value: state.value?.end,\n      onChange: end => state.setDateTime('end', end),\n      name: props.endName,\n      [privateValidationStateProp]: {\n        realtimeValidation: state.realtimeValidation,\n        displayValidation: state.displayValidation,\n        updateValidation(e) {\n          endFieldValidation.current = e;\n          state.updateValidation(mergeValidation(startFieldValidation.current, e));\n        },\n        resetValidation: state.resetValidation,\n        commitValidation: state.commitValidation\n      }\n    },\n    descriptionProps,\n    errorMessageProps,\n    calendarProps: {\n      autoFocus: true,\n      value: state.dateRange,\n      onChange: state.setDateRange,\n      minValue: props.minValue,\n      maxValue: props.maxValue,\n      isDisabled: props.isDisabled,\n      isReadOnly: props.isReadOnly,\n      isDateUnavailable: props.isDateUnavailable,\n      allowsNonContiguousRanges: props.allowsNonContiguousRanges,\n      defaultFocusedValue: state.dateRange ? undefined : props.placeholderValue,\n      isInvalid: state.isInvalid,\n      errorMessage: typeof props.errorMessage === 'function' ? props.errorMessage(state.displayValidation) : (props.errorMessage || state.displayValidation.validationErrors.join(' '))\n    },\n    isInvalid,\n    validationErrors,\n    validationDetails\n  };\n}\n"]},"metadata":{},"sourceType":"module"}