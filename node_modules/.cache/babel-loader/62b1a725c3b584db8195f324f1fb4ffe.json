{"ast":null,"code":"/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */const $6db58dc88e78b024$var$pluralRulesCache = new Map();\nconst $6db58dc88e78b024$var$numberFormatCache = new Map();\nclass $6db58dc88e78b024$export$2f817fcdc4b89ae0 {\n  /** Formats a localized string for the given key with the provided variables. */format(key, variables) {\n    let message = this.strings.getStringForLocale(key, this.locale);\n    return typeof message === 'function' ? message(variables, this) : message;\n  }\n  plural(count, options) {\n    let type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'cardinal';\n    let opt = options['=' + count];\n    if (opt) return typeof opt === 'function' ? opt() : opt;\n    let key = this.locale + ':' + type;\n    let pluralRules = $6db58dc88e78b024$var$pluralRulesCache.get(key);\n    if (!pluralRules) {\n      pluralRules = new Intl.PluralRules(this.locale, {\n        type: type\n      });\n      $6db58dc88e78b024$var$pluralRulesCache.set(key, pluralRules);\n    }\n    let selected = pluralRules.select(count);\n    opt = options[selected] || options.other;\n    return typeof opt === 'function' ? opt() : opt;\n  }\n  number(value) {\n    let numberFormat = $6db58dc88e78b024$var$numberFormatCache.get(this.locale);\n    if (!numberFormat) {\n      numberFormat = new Intl.NumberFormat(this.locale);\n      $6db58dc88e78b024$var$numberFormatCache.set(this.locale, numberFormat);\n    }\n    return numberFormat.format(value);\n  }\n  select(options, value) {\n    let opt = options[value] || options.other;\n    return typeof opt === 'function' ? opt() : opt;\n  }\n  constructor(locale, strings) {\n    this.locale = locale;\n    this.strings = strings;\n  }\n}\nexport { $6db58dc88e78b024$export$2f817fcdc4b89ae0 as LocalizedStringFormatter };","map":{"version":3,"mappings":"AAAA;;;;;;;;;;GAkBA,MAAMA,yCAAmB,IAAIC;AAC7B,MAAMC,0CAAoB,IAAID;AAMvB,MAAME;EASX,gFACAC,OAAOC,GAAM,EAAEC,SAAqB,EAAU;IAC5C,IAAIC,UAAU,IAAI,CAACC,OAAO,CAACC,kBAAkB,CAACJ,KAAK,IAAI,CAACK,MAAM;IAC9D,OAAO,OAAOH,YAAY,aAAaA,QAAQD,WAAW,IAAI,IAAIC;EACpE;EAEUI,OAAOC,KAAa,EAAEC,OAAuC,EAA0C;IAAA,IAAxCC,2EAA4B,UAAU;IAC7G,IAAIC,MAAMF,OAAO,CAAC,MAAMD,MAAM;IAC9B,IAAIG,KACF,OAAO,OAAOA,QAAQ,aAAaA,QAAQA;IAG7C,IAAIV,MAAM,IAAI,CAACK,MAAM,GAAG,MAAMI;IAC9B,IAAIE,cAAchB,uCAAiBiB,GAAG,CAACZ;IACvC,IAAI,CAACW,aAAa;MAChBA,cAAc,IAAIE,KAAKC,WAAW,CAAC,IAAI,CAACT,MAAM,EAAE;cAACI;MAAI;MACrDd,uCAAiBoB,GAAG,CAACf,KAAKW;IAC5B;IAEA,IAAIK,WAAWL,YAAYM,MAAM,CAACV;IAClCG,MAAMF,OAAO,CAACQ,SAAS,IAAIR,QAAQU,KAAK;IACxC,OAAO,OAAOR,QAAQ,aAAaA,QAAQA;EAC7C;EAEUS,OAAOC,KAAa,EAAE;IAC9B,IAAIC,eAAexB,wCAAkBe,GAAG,CAAC,IAAI,CAACP,MAAM;IACpD,IAAI,CAACgB,cAAc;MACjBA,eAAe,IAAIR,KAAKS,YAAY,CAAC,IAAI,CAACjB,MAAM;MAChDR,wCAAkBkB,GAAG,CAAC,IAAI,CAACV,MAAM,EAAEgB;IACrC;IACA,OAAOA,aAAatB,MAAM,CAACqB;EAC7B;EAEUH,OAAOT,OAAuC,EAAEY,KAAa,EAAE;IACvE,IAAIV,MAAMF,OAAO,CAACY,MAAM,IAAIZ,QAAQU,KAAK;IACzC,OAAO,OAAOR,QAAQ,aAAaA,QAAQA;EAC7C;EAzCAa,YAAYlB,MAAc,EAAEF,OAAwC,EAAE;IACpE,IAAI,CAACE,MAAM,GAAGA;IACd,IAAI,CAACF,OAAO,GAAGA;EACjB;AAuCF","names":["$6db58dc88e78b024$var$pluralRulesCache","Map","$6db58dc88e78b024$var$numberFormatCache","$6db58dc88e78b024$export$2f817fcdc4b89ae0","format","key","variables","message","strings","getStringForLocale","locale","plural","count","options","type","opt","pluralRules","get","Intl","PluralRules","set","selected","select","other","number","value","numberFormat","NumberFormat","constructor"],"sources":["D:\\Like, for real projects\\React-Todo-List-V2\\node_modules\\@internationalized\\string\\dist\\packages\\@internationalized\\string\\src\\LocalizedStringFormatter.ts"],"sourcesContent":["/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport type {LocalizedStringDictionary} from './LocalizedStringDictionary';\n\nexport type Variables = Record<string, string | number | boolean> | undefined;\nexport type LocalizedString = string | ((args: Variables, formatter?: LocalizedStringFormatter<any, any>) => string);\ntype InternalString = string | (() => string);\n\nconst pluralRulesCache = new Map<string, Intl.PluralRules>();\nconst numberFormatCache = new Map<string, Intl.NumberFormat>();\n\n/**\n * Formats localized strings from a LocalizedStringDictionary. Supports interpolating variables,\n * selecting the correct pluralization, and formatting numbers for the locale.\n */\nexport class LocalizedStringFormatter<K extends string = string, T extends LocalizedString = string> {\n  private locale: string;\n  private strings: LocalizedStringDictionary<K, T>;\n\n  constructor(locale: string, strings: LocalizedStringDictionary<K, T>) {\n    this.locale = locale;\n    this.strings = strings;\n  }\n\n  /** Formats a localized string for the given key with the provided variables. */\n  format(key: K, variables?: Variables): string {\n    let message = this.strings.getStringForLocale(key, this.locale);\n    return typeof message === 'function' ? message(variables, this) : message;\n  }\n\n  protected plural(count: number, options: Record<string, InternalString>, type: Intl.PluralRuleType = 'cardinal') {\n    let opt = options['=' + count];\n    if (opt) {\n      return typeof opt === 'function' ? opt() : opt;\n    }\n\n    let key = this.locale + ':' + type;\n    let pluralRules = pluralRulesCache.get(key);\n    if (!pluralRules) {\n      pluralRules = new Intl.PluralRules(this.locale, {type});\n      pluralRulesCache.set(key, pluralRules);\n    }\n\n    let selected = pluralRules.select(count);\n    opt = options[selected] || options.other;\n    return typeof opt === 'function' ? opt() : opt;\n  }\n\n  protected number(value: number) {\n    let numberFormat = numberFormatCache.get(this.locale);\n    if (!numberFormat) {\n      numberFormat = new Intl.NumberFormat(this.locale);\n      numberFormatCache.set(this.locale, numberFormat);\n    }\n    return numberFormat.format(value);\n  }\n\n  protected select(options: Record<string, InternalString>, value: string) {\n    let opt = options[value] || options.other;\n    return typeof opt === 'function' ? opt() : opt;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}